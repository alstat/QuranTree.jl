var documenterSearchIndex = {"docs":
[{"location":"man/transliteration/#Transliteration","page":"Transliteration","title":"Transliteration","text":"","category":"section"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"QuranTree.jl uses Buckwalter as the default transliteration, which is based on the Quranic Arabic Corpus encoding. The transliteration is invoke using the encode function. However, to extract the form/verses of the CorpusData/TanzilData, the function verses can be used. For example, the following will transliterate the first verse of chapter 1:","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"using QuranTree\n\ncrps, tnzl = load(QuranData());\ncrpsdata = table(crps);\ntnzldata = table(tnzl);","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"using QuranTree\n\ncrps, tnzl = load(QuranData());\ncrpsdata = table(crps);\ntnzldata = table(tnzl);\nvrs = verses(tnzldata[1][1])\nencode(vrs[1])","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"The function verses always returns an Array, and hence encoding multiple verses is possible using Julia's . (dot) broadcasting. For example, the following will transliterate all verses of chapter 114:","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"vrs = verses(tnzldata[114])\nencode.(vrs)","category":"page"},{"location":"man/transliteration/#Decoding","page":"Transliteration","title":"Decoding","text":"","category":"section"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"To decode the transliterated back to arabic is done using the function arabic. For example, the following will decode to arabic the transliterated verses above of chapter 114:","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"arabic.(encode.(vrs))","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"Or using the CorpusData, ","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"vrs = verses(crpsdata[114])\navrs = arabic.(vrs)","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"Note that . (dot) broadcasting is only used for arrays. So for pure string input (not arrays of string), arabic(...) (without dot) is used. Example,","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"vrs[1]\narabic(vrs[1]);","category":"page"},{"location":"man/transliteration/#Custom-Transliteration","page":"Transliteration","title":"Custom Transliteration","text":"","category":"section"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"Creating a custom transliteration requires only an input encoding in the form of dictionary. For example, QuranTree.jl's Buckwalter's encoding is provided by the constant BW_ENCODING as shown below:","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"BW_ENCODING","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"Suppose, we want to create a new transliteration by simply reversing the values of the dictionary. This is done as follows:","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"old_keys = collect(keys(BW_ENCODING));\nnew_keys = reverse(collect(values(BW_ENCODING)));\nmy_encoder = Dict(old_keys .=> new_keys)\n@transliterator my_encoder \"MyEncoder\"","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"The macro @transliterator is used for updating the transliteration, and it takes two inputs: the dictionary (my_encoder) and the name of the encoding (\"MyEncoder\"). Using this new encoding, the avrs above will have a new transliteration:","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"new_vrs = encode.(avrs);\nnew_vrs","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"To confirm this new transliteration, decoding it back to arabic should generate the proper results:","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"arabic.(new_vrs)","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"To reset the transliteration, simply run the following:","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"@transliterator :default","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"This will fallback to the Buckwalter transliteration, as shown below:","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"bw_vrs = encode.(avrs);\nbw_vrs\narabic.(bw_vrs)","category":"page"},{"location":"man/transliteration/#Simple-Encoding","page":"Transliteration","title":"Simple Encoding","text":"","category":"section"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"Another feature supported in QuranTree.jl is the Simple Encoding. For example, the following will (Simple) encode first verse of chapter 1:","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"vrs = verses(tnzldata[1][1])\nencode(SimpleEncoder, vrs[1])","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"Or, for verses 1 to 4 of chapter 114:","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"vrs = verses(tnzldata[114][1:4])\nencode.(SimpleEncoder, vrs)","category":"page"},{"location":"man/indexing/#Indexing-the-Corpus","page":"Indexing","title":"Indexing the Corpus","text":"","category":"section"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"QuranTree.jl offers a intuitive indexing for both Quranic Arabic Corpus and the Tanzil Data, specifically it follows the following usage:","category":"page"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"# for Quranic Arabic Corpus\ncrpsdata[<chapters>][<verses>][<words>][<parts>]\n\n# for Tanzil Data\ntnzldata[<chapters>][<verses>]","category":"page"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"The following are the options supported for each index:","category":"page"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"Chapters:\nInt64 - crpsdata[1] (extracts chapter 1)\nUnitRange - crpsdata[15:24] (extracts chapters 15 to 24)\nArray{Int64,1} - crpsdata[[3,9,10]] (extracts chapters 3, 9 and 10)\nend (special) - crpsdata[end-3:end] (extracts chapters 111 to 114).\nVerses:\nInt64 - crpsdata[1][1] (extracts verse 1 of chapter 1)\nUnitRange - crpsdata[2][15:24] (extracts verses 15 to 24 of chapter 2)\nArray{Int64,1} - crpsdata[10][[3,9,10]] (extracts verses 3, 9 and 10 of chapter 10)\nWords: (not applicable for TanzilData, only CorpusData)\nInt64 - crpsdata[1][1][1] (extracts word 1 of verse 1 of chapter 1)\nUnitRange - crpsdata[2][8][1:3] (extracts words 1 to 3 of verse 8 of chapter 2)\nArray{Int64,1} - crpsdata[2][8][[1,3]] (extracts words 1 and 3 of verse 8 of chapter 2)\nParts: (not applicable for TanzilData, only CorpusData)\nInt64 - crpsdata[1][1][1][1] (extracts part 1 of word 1 of verse 1 of chapter 1)\nUnitRange - crpsdata[2][9][1][1:2] (extracts part 1 to part 2 of word 1 of verse 9 of chapter 2)\nArray{Int64,1} - crpsdata[2][9][1][[1,2]] (extracts part 1 and part 2 of word 1 of verse 9 of chapter 2)","category":"page"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"Hence, to extract chapters verses 9 of chapter 2 of both TanzilData and CorpusData are given below:","category":"page"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"using Pkg\nPkg.add(\"PrettyTables\")\nusing QuranTree\nusing PrettyTables\n@ptconf vcrop_mode=:middle tf=tf_compact\n\ndata = QuranData()\ncrps, tnzl = load(data)\ncrpsdata = table(crps);\ntnzldata = table(tnzl);\ncrpstbl = @data crpsdata; # or crpsdata.data\ntnzltbl = @data tnzldata; # or tnzldata.data","category":"page"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"using QuranTree\n\ndata = QuranData();\ncrps, tnzl = load(data);\ncrpsdata = table(crps);\ntnzldata = table(tnzl);\ncrpsdata[2][9]\ntnzldata[2][9]","category":"page"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"As shown above, the output of the indexing returns the label for the chapter name, both in Arabic and in English. Again the output of the crpsdata[2][9] is not shown, since the width of the output is wider than the width of the output pane. So, PrettyTables.jl can be used to view the table, as follows:","category":"page"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"@pt crpsdata[2][9]","category":"page"},{"location":"man/indexing/#Combinations-of-Indices","page":"Indexing","title":"Combinations of Indices","text":"","category":"section"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"Combinations of these indices are also supported. For example, to extract chapters 111 to 114, verses 1 and 3, is done as follows:","category":"page"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"@pt crpsdata[111:114][[1,3]] # or crpsdata[end-3:end][[1,3]]\n@pt tnzldata[111:114][[1,3]] # or tnzldata[end-3:end][[1,3]]","category":"page"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"Further, to extract part 1 of words 1 to 3 of the above CorpusData output, is done as follows:","category":"page"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"@pt crpsdata[111:114][[1,3]][1:3][1] ","category":"page"},{"location":"man/morphological_features/#Morphological-Features","page":"Morphological Features","title":"Morphological Features","text":"","category":"section"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"<table>\n<thead><td>Type</td><td>Parent Type</td><td>Tag</td><td>Description</td><td>Arabic Name</td></thead>\n<tr><td><code> Noun</code></td><td><code>AbstractNoun</code></td><td><code>Symbol(\"N\")</code></td><td>Noun</td><td>اسم</td></tr>\n<tr><td><code> ProperNoun</code></td><td><code>AbstractNoun</code></td><td><code>Symbol(\"PN\")</code></td><td>Proper noun</td><td>اسم علم</td></tr>\n\n<tr><td><code> Adjective</code></td><td><code>AbstractDerivedNominal</code></td><td><code>Symbol(\"ADJ\")</code></td><td>Adjective</td><td>صفة</td></tr>\n<tr><td><code> ImperativeVerbalNoun</code></td><td><code>AbstractDerivedNominal</code></td><td><code>Symbol(\"IMPN\")</code></td><td>Imperative verbal noun</td><td>اسم فعل أمر</td></tr>\n\n<tr><td><code> Personal</code></td><td><code>AbstractPronoun</code></td><td><code>Symbol(\"PRON\")</code></td><td>Personal pronoun</td><td>ضمير</td></tr>\n<tr><td><code> Demonstrative</code></td><td><code>AbstractPronoun</code></td><td><code>Symbol(\"DEM\")</code></td><td>Demonstrative pronoun</td><td>اسم اشارة</td></tr>\n<tr><td><code> Relative</code></td><td><code>AbstractPronoun</code></td><td><code>Symbol(\"REL\")</code></td><td>Relative pronoun</td><td>اسم موصول</td></tr>\n\n<tr><td><code> Time</code></td><td><code>AbstractAdverb</code></td><td><code>Symbol(\"T\")</code></td><td>Time adverb</td><td>ظرف زمان</td></tr>\n<tr><td><code> Location</code></td><td><code>AbstractAdverb</code></td><td><code>Symbol(\"LOC\")</code></td><td>Location adverb</td><td>ظرف مكان</td></tr>\n\n<tr><td><code> Preposition</code></td><td><code>AbstractPreposition</code></td><td><code>Symbol(\"P\")</code></td><td>Preposition</td><td>حرف جر</td></tr>\n\n<tr><td><code> EmphaticLam</code></td><td><code>AbstractPrefix</code></td><td><code>Symbol(\"EMPH\")</code></td><td>Emphatic lam prefix</td><td>لام التوكيد</td></tr>\n<tr><td><code> ImperativeLam</code></td><td><code>AbstractPrefix</code></td><td><code>Symbol(\"IMPV\")</code></td><td>Imperative lam prefix</td><td>لام الامر</td></tr>\n<tr><td><code> PurposeLam</code></td><td><code>AbstractPrefix</code></td><td><code>Symbol(\"PRP\")</code></td><td>Purpose lam prefix</td><td>لام التعليل</td></tr>\n<tr><td><code> EmphaticNun</code></td><td><code>AbstractPrefix</code></td><td><code>Symbol(\"+n:EMPH\")</code></td><td>Emphatic lam prefix</td><td>لام التوكيد</td></tr>\n\n<tr><td><code> Coordinating</code></td><td><code>AbstractConjunction</code></td><td><code>Symbol(\"CONJ\")</code></td><td>Coordinating conjunction</td><td>حرف عطف</td></tr>\n<tr><td><code> Subordinating</code></td><td><code>AbstractConjunction</code></td><td><code>Symbol(\"SUB\")</code></td><td>Subordinating particle</td><td>حرف مصدري</td></tr>\n\n<tr><td><code> Accusative</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"ACC\")</code></td><td>Accusative particle</td><td>حرف نصب</td></tr>\n<tr><td><code> Amendment</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"AMD\")</code></td><td>Amendment particle</td><td>حرف استدراك</td></tr>\n<tr><td><code> Answer</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"ANS\")</code></td><td>Answer particle</td><td>حرف جواب</td></tr>\n<tr><td><code> Aversion</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"AVR\")</code></td><td>Aversion particle</td><td>حرف ردع</td></tr>\n<tr><td><code> Cause</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"CAUS\")</code></td><td>Particle of cause</td><td>حرف سببية</td></tr>\n<tr><td><code> Certainty</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"CERT\")</code></td><td>Particle of certainty</td><td>حرف تحقيق</td></tr>\n<tr><td><code> Circumstantial</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"CIRC\")</code></td><td>Circumstantial particle</td><td>حرف حال</td></tr>\n<tr><td><code> Comitative</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"COM\")</code></td><td>Comitative particle</td><td>واو المعية</td></tr>\n<tr><td><code> Conditional</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"COND\")</code></td><td>Conditional particle</td><td>حرف شرط</td></tr>\n<tr><td><code> Equalization</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"EQ\")</code></td><td>Equalization particle</td><td>حرف تسوية</td></tr>\n<tr><td><code> Exhortation</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"EXH\")</code></td><td>Exhortation particle</td><td>حرف تحضيض</td></tr>\n<tr><td><code> Explanation</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"EXL\")</code></td><td>Explanation particle</td><td>حرف تفصيل</td></tr>\n<tr><td><code> Exceptive</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"EXP\")</code></td><td>Exceptive particle</td><td>أداة استثناء</td></tr>\n<tr><td><code> Future</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"FUT\")</code></td><td>Future particle</td><td>حرف استقبال</td></tr>\n<tr><td><code> Inceptive</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"INC\")</code></td><td>Inceptive particle</td><td>حرف ابتداء</td></tr>\n<tr><td><code> Interpretation</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"INT\")</code></td><td>Inceptive particle</td><td>حرف تفسير</td></tr>\n<tr><td><code> Interogative</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"INTG\")</code></td><td>Interogative particle</td><td>حرف استفهام</td></tr>\n<tr><td><code> Negative</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"NEG\")</code></td><td>Negative particle</td><td>حرف نفي</td></tr>\n<tr><td><code> Preventive</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"PREV\")</code></td><td>Preventive particle</td><td>حرف كاف</td></tr>\n<tr><td><code> Prohibition</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"PRO\")</code></td><td>Prohibition particle</td><td>حرف نهي</td></tr>\n<tr><td><code> Resumption</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"REM\")</code></td><td>Resumption particle</td><td>حرف استئنافية</td></tr>\n<tr><td><code> Restriction</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"RES\")</code></td><td>Restriction particle</td><td>أداة حصر</td></tr>\n<tr><td><code> Retraction</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"RET\")</code></td><td>Retraction particle</td><td>حرف اضراب</td></tr>\n<tr><td><code> Result</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"RSLT\")</code></td><td>Result particle</td><td>حرف واقع في جواب الشرط</td></tr>\n<tr><td><code> Supplemental</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"SUP\")</code></td><td>Suplemental particle</td><td>حرف زائد</td></tr>\n<tr><td><code> Surprise</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"SUR\")</code></td><td>Surprise particle</td><td>حرف فجاءة</td></tr>\n<tr><td><code> Vocative</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"VOC\")</code></td><td>Vocative particle</td><td>حرف نداء</td></tr>\n\n<tr><td><code> DisconnectedLetters</code></td><td><code>AbstractDisLetters</code></td><td><code>Symbol(\"INL\")</code></td><td>Quranic initials</td><td>حروف مقطعة</td></tr>\n\n<tr><td><code> FirstPerson</code></td><td><code>AbstractPerson</code></td><td><code>Symbol(\"1\")</code></td><td>First person</td><td>الاسناد</td></tr>\n<tr><td><code> SecondPerson</code></td><td><code>AbstractPerson</code></td><td><code>Symbol(\"2\")</code></td><td>Second person</td><td>الاسناد</td></tr>\n<tr><td><code> ThirdPerson</code></td><td><code>AbstractPerson</code></td><td><code>Symbol(\"3\")</code></td><td>Third person</td><td>الاسناد</td></tr>\n\n<tr><td><code> Masculine</code></td><td><code>AbstractGender</code></td><td><code>Symbol(\"M\")</code></td><td>Masculine</td><td>الجنس</td></tr>\n<tr><td><code> Feminine</code></td><td><code>AbstractGender</code></td><td><code>Symbol(\"F\")</code></td><td>Feminine</td><td>الجنس</td></tr>\n\n<tr><td><code> Singular</code></td><td><code>AbstractNumber</code></td><td><code>Symbol(\"S\")</code></td><td>Singular</td><td>العدد</td></tr>\n<tr><td><code> Dual</code></td><td><code>AbstractNumber</code></td><td><code>Symbol(\"D\")</code></td><td>Dual</td><td>العدد</td></tr>\n<tr><td><code> Plural</code></td><td><code>AbstractNumber</code></td><td><code>Symbol(\"P\")</code></td><td>Plural</td><td>العدد</td></tr>\n\n<tr><td><code> Verb</code></td><td><code>AbstractPartOfSpeech</code></td><td><code>Symbol(\"V\")</code></td><td>Verb</td><td>فعل</td></tr>\n<tr><td><code> Perfect</code></td><td><code>AbstractAspect</code></td><td><code>Symbol(\"PERF\")</code></td><td>Perfect verb</td><td>فعل ماض</td></tr>\n<tr><td><code> Imperfect</code></td><td><code>AbstractAspect</code></td><td><code>Symbol(\"IMPF\")</code></td><td>Imperfect verb</td><td>فعل مضارع</td></tr>\n<tr><td><code> Imperative</code></td><td><code>AbstractAspect</code></td><td><code>Symbol(\"IMPV\")</code></td><td>Imperative verb</td><td>فعل أمر</td></tr>\n<tr><td><code> Indicative</code></td><td><code>AbstractMood</code></td><td><code>Symbol(\"IND\")</code></td><td>Indicative mood (default)</td><td>مرفوع</td></tr>\n<tr><td><code> Subjunctive</code></td><td><code>AbstractMood</code></td><td><code>Symbol(\"SUBJ\")</code></td><td>Subjunctive mood</td><td>منصوب</td></tr>\n<tr><td><code> Jussive</code></td><td><code>AbstractMood</code></td><td><code>Symbol(\"JUS\")</code></td><td>Jussive mood</td><td>مجزوم</td></tr>\n<tr><td><code> Active</code></td><td><code>AbstractVoice</code></td><td><code>Symbol(\"ACT\")</code></td><td>Active voice (default)</td><td>مبني للمعلوم</td></tr>\n<tr><td><code> Passive</code></td><td><code>AbstractVoice</code></td><td><code>Symbol(\"PASS\")</code></td><td>Passive voice</td><td>مبني للمجهول</td></tr>\n\n<tr><td><code> VerbFormI</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"I\")</code></td><td>First verb form (default)</td><td>فعل</td></tr>\n<tr><td><code> VerbFormII</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"II\")</code></td><td>Second verb form</td><td>فعل</td></tr>\n<tr><td><code> VerbFormIII</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"III\")</code></td><td>Third verb form</td><td>فعل</td></tr>\n<tr><td><code> VerbFormIV</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"IV\")</code></td><td>Fourth verb form</td><td>فعل</td></tr>\n<tr><td><code> VerbFormV</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"V\")</code></td><td>Fifth verb form</td><td>فعل</td></tr>\n<tr><td><code> VerbFormVI</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"VI\")</code></td><td>Sixth verb form</td><td>فعل</td></tr>\n<tr><td><code> VerbFormVII</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"VII\")</code></td><td>Seventh verb form</td><td>فعل</td></tr>\n<tr><td><code> VerbFormVIII</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"VIII\")</code></td><td>Eighth verb form</td><td>فعل</td></tr>\n<tr><td><code> VerbFormIX</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"IX\")</code></td><td>Ninth verb form</td><td>فعل</td></tr>\n<tr><td><code> VerbFormX</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"X\")</code></td><td>Tenth verb form</td><td>فعل</td></tr>\n<tr><td><code> VerbFormXI</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"XI\")</code></td><td>Eleventh verb form</td><td>فعل</td></tr>\n<tr><td><code> VerbFormXII</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"XII\")</code></td><td>Twelfth verb form</td><td>فعل</td></tr>\n\n<tr><td><code> ActiveParticle</code></td><td><code>AbstractDerivedNoun</code></td><td><code>Symbol(\"ACT PCPL\")</code></td><td>Active particle</td><td>اسم فاعل</td></tr>\n<tr><td><code> PassiveParticle</code></td><td><code>AbstractDerivedNoun</code></td><td><code>Symbol(\"PASS PCPL\")</code></td><td>Passive particle</td><td>اسم مفعول</td></tr>\n<tr><td><code> VerbalNoun</code></td><td><code>AbstractDerivedNoun</code></td><td><code>Symbol(\"VN\")</code></td><td>Verbal noun</td><td>مصدر</td></tr>\n\n<tr><td><code> Definite</code></td><td><code>AbstractState</code></td><td><code>Symbol(\"DEF\")</code></td><td>Definite state</td><td>معرفة</td></tr>\n<tr><td><code> Indefinite</code></td><td><code>AbstractState</code></td><td><code>Symbol(\"INDEF\")</code></td><td>Indefinite state</td><td>نكرة</td></tr>\n<tr><td><code> Nominative</code></td><td><code>AbstractCase</code></td><td><code>Symbol(\"NOM\")</code></td><td>Nominative case</td><td>مرفوع</td></tr>\n<tr><td><code> Genetive</code></td><td><code>AbstractCase</code></td><td><code>Symbol(\"GEN\")</code></td><td>Genetive case</td><td>مجرور</td></tr>\n</table>","category":"page"},{"location":"man/getting_started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"CurrentModule = QuranTree\nDocTestSetup = quote\n    using QuranTree\nend","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"The dataset is included in the library already, both the Quranic Corpus and the Tanzil Data. To load the data, simply run the following","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"using QuranTree\n\ndata = QuranData()\ncrps, tnzl = load(data);","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"The QuranData() is a struct containing the default filepath of the data. The load function returns a tuple for both the Quranic Corpus and the Tanzil Data. The loaded data is encoded in a immutable (read-only) array, so users cannot change it. This is specified in the type of the object as shown below:","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"using QuranTree\n\ndata = QuranData()\ncrps, tnzl = load(data)\ncrpsdata = table(crps);\ntnzldata = table(tnzl);\ncrpstbl = @data crpsdata; # or crpsdata.data\ntnzltbl = @data tnzldata; # or tnzldata.data","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"crps\ntnzl","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"In order to parse these raw data, the table function is used:","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"crpsdata = table(crps);\ntnzldata = table(tnzl);\ncrpsdata\ntnzldata","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"The resulting tables, which are of type CorpusData and TanzilData, respectively, are based on JuliaDB.jl, which can be accessed by simply calling the macro @data (for example, @data crpsdata or crpsdata.data). One thing to note, however, is that JuliaDB.jl will only display the meta data of the columns if the width of the table is wider than the width of the output pane, for example in case of the crpsdata above which has more columns (and thus wider) compared to tnzldata. To display the data of any wide table, PrettyTables.jl can be used:","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"using PrettyTables\n@ptconf vcrop_mode=:middle tf=tf_compact\n@pt crpsdata","category":"page"},{"location":"man/getting_started/#Manipulating-the-Table","page":"Getting Started","title":"Manipulating the Table","text":"","category":"section"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"As mentioned above, the table is based on JuliaDB.jl, which has a type IndexedTable. Therefore, any data manipulation is done through the JuliaDB.jl's APIs. To access the data simply call the property with .data or the macro @data:","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"crpstbl = @data crpsdata; # or crpsdata.data\ntnzltbl = @data tnzldata; # or tnzldata.data\ncrpstbl\ntnzltbl","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"Note that, crpsdata and crpstbl have different type (as in the case of tnzldata and tnzltbl) as shown below:","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"typeof(crpsdata)\ntypeof(crpstbl)","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"From here, any data manipulation is done using JuliaDB.jl's APIs. For example, to select the feature column of the crpstbl is done as follows:","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"using JuliaDB\n\nselect(crpstbl, :features)\n\n# or equivalent to\nselect(crpsdata.data, :features)","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"Or filtering tokens that are Prefix features, is done as follows:","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"filter(t -> occursin(r\"^PREFIX\", t.features), crpstbl)\n\n# or equivalent to\nfilter(t -> occursin(r\"^PREFIX\", t.features), crpsdata.data)","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"Bottomline, any data manipulation on the CorpusTable and TanzilData is done through JuliaDB.jl's APIs.","category":"page"},{"location":"man/nlp/#Natural-Language-Processing","page":"Natural Language Processing","title":"Natural Language Processing","text":"","category":"section"},{"location":"#QuranTree.jl-Documentation","page":"Home","title":"QuranTree.jl Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = QuranTree\nDocTestSetup = quote\n    using Pkg\n    Pkg.add(\"PrettyTables\")\n    using QuranTree\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"A Julia package for working with the Quran. QuranTree.jl is based on The Quranic Arabic Corpus by Kais Dukes, and is aimed at offerring a high-level API alternative to the Java package, JQuranTree. ","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The following are the features of the package:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Indexing\nIntuitive indexing for Chapters, Verses, Words and Parts\nTransliteration\nBuckwalter as default\nCreate custom transliterator\nUpdate transliteration in 1 line of code\nComplete type for all Morphological Features and Part of Speech\nSeemless transition between Arabic and Buckwalter (or custom transliteration)\nSimple Encoding (refer here)\nCharacter Normalization\nFor both Arabic and Buckwalter (or custom transliteration)\nCharacter Dediacritization\nFor both Arabic and Buckwalter (or custom transliteration)\nUtilities\nFunction for detailed description of the Morphological Features.\nOthers\nSupports Tanzil data\nRead-only array for raw datasets (Corpus and Tanzil)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Since the library is purely written in Julia, it is therefore fast, type-safe and modular.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The library will soon be added to the Julia Package Registry, still finishing up the documentation. For now, QuranTree.jl can be installed as follows:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg\njulia> Pkg.add(\"https://github.com/alstat/QuranTree.jl\")","category":"page"},{"location":"#Requirements","page":"Home","title":"Requirements","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Julia >= 1.4\nJuliaDB >= 0.13.0\nPrettyTables >= 0.10.1","category":"page"},{"location":"man/api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"man/api/","page":"API","title":"API","text":"Modules = [QuranTree]","category":"page"},{"location":"man/api/#QuranTree.Features","page":"API","title":"QuranTree.Features","text":"Features(data::String)\n\nConvert a string to morphological feature object.\n\n\n\n\n\n","category":"type"},{"location":"man/api/#QuranTree.Lemma","page":"API","title":"QuranTree.Lemma","text":"Lemma(data::String)\n\nConvert a string to a Lemma object.\n\n\n\n\n\n","category":"type"},{"location":"man/api/#QuranTree.Prefix","page":"API","title":"QuranTree.Prefix","text":"Prefix(data::Symbol, pos::AbstractPartOfSpeech)\n\nCreate a new Prefix object with data as the symbol of the morphological feature with pos as  the corresponding Part of Speech.\n\n\n\n\n\n","category":"type"},{"location":"man/api/#QuranTree.Root","page":"API","title":"QuranTree.Root","text":"Root(data::String)\n\nConvert a string to a Root object.\n\n\n\n\n\n","category":"type"},{"location":"man/api/#QuranTree.Special","page":"API","title":"QuranTree.Special","text":"Special(data::String)\n\nConvert a string to a Special object.\n\n\n\n\n\n","category":"type"},{"location":"man/api/#QuranTree.Stem","page":"API","title":"QuranTree.Stem","text":"Stem(data::Symbol, pos::AbstractPartOfSpeech)\n\nCreate a new Stem object with data as the symbol of the morphological feature with pos as  the corresponding Part of Speech.\n\n\n\n\n\n","category":"type"},{"location":"man/api/#QuranTree.Suffix","page":"API","title":"QuranTree.Suffix","text":"Suffix(data::Symbol, pos::AbstractPartOfSpeech)\n\nCreate a new Suffix object with data as the symbol of the morphological feature with pos as  the corresponding Part of Speech.\n\n\n\n\n\n","category":"type"},{"location":"man/api/#Base.parse-Tuple{Type{Features},AbstractString}","page":"API","title":"Base.parse","text":"parse(::Type{Features}, f::AbstractString)\n\nExtract the features of a morphological Feature object.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#IndexedTables.table-Tuple{CorpusRaw}","page":"API","title":"IndexedTables.table","text":"table(crps::CorpusRaw)\n\nConvert the CorpusRaw read-only array into a tabularized CorpusData using IndexedTable.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#IndexedTables.table-Tuple{TanzilRaw}","page":"API","title":"IndexedTables.table","text":"table(tnzl::TanzilRaw)\n\nConvert the TanzilRaw read-only array into a tabularized TanzilData using IndexedTable.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.arabic-Tuple{String}","page":"API","title":"QuranTree.arabic","text":"arabic(s::String[, encoder::AbstractEncoder])\n\nEncode the String object into Arabic characters. Custom encoder generated from @transliterator can be provided, but default is Buckwalter.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.chapter_name","page":"API","title":"QuranTree.chapter_name","text":"chapter_name(quran::AbstractQuran, transliterate::Bool=false; lang::Symbol=:arabic)\n\nExtracts the chapter label of the input quran, in either :arabic (default) or :english\n\n\n\n\n\n","category":"function"},{"location":"man/api/#QuranTree.dediac-Tuple{String}","page":"API","title":"QuranTree.dediac","text":"dediac(s::String)\n\nDediacritize the input String object.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.encode-Tuple{String}","page":"API","title":"QuranTree.encode","text":"encode(s::String)\n\nTransliterate the input String object using Buckwalter.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.encode-Tuple{Type{SimpleEncoder},String}","page":"API","title":"QuranTree.encode","text":"encode(::Type{SimpleEncoder}, s::String)\n\nEncode the input String object as SimpleEncoder.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.encode-Tuple{Union{Char, String},AbstractEncoder}","page":"API","title":"QuranTree.encode","text":"encode(s::Union{Char,String}, encoder::AbstractEncoder)\n\nTransliterate the input String object using a custom encoder. Custom encoder is generated using the @transliterator.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.isfeature-Tuple{QuranTree.AbstractFeature,Type{var\"#s13\"} where var\"#s13\"<:QuranTree.AbstractFeature}","page":"API","title":"QuranTree.isfeature","text":"isfeature(feat::Features, pos::Type{<:AbstractFeature})\n\nCheck if the morphological Feature object is a type of pos.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.load-Tuple{QuranData}","page":"API","title":"QuranTree.load","text":"load(data::QuranData)\n\nLoad the raw QuranData as a ReadOnlyArray for both Quranic Corpus and Tanzil Data.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.normalize-Tuple{String,Array{Symbol,1}}","page":"API","title":"QuranTree.normalize","text":"normalize(s::String, chars::Array{Symbol,1})\n\nNormalize a specific Arabic or Buckwalter String character/s (chars).\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.normalize-Tuple{String,Symbol}","page":"API","title":"QuranTree.normalize","text":"normalize(s::String, char::Symbol)\n\nNormalize a specific Arabic or Buckwalter String character (chars).\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.normalize-Tuple{String}","page":"API","title":"QuranTree.normalize","text":"normalize(s::String)\n\nNormalize a Arabic or Buckwalter String characters.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.verses-Tuple{IndexedTables.IndexedTable,Int64,Int64}","page":"API","title":"QuranTree.verses","text":"verses(data::IndexedTable[, a::Int64[, b::Int64]])\n\nExtract the verses of a IndexedTable object from row a to row b.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.verses-Tuple{QuranTree.AbstractQuran}","page":"API","title":"QuranTree.verses","text":"verses(quran::AbstractQuran)\n\nExtract the verses of a AbstractQuran object.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.verses-Tuple{QuranTree.TanzilData}","page":"API","title":"QuranTree.verses","text":"verses(quran::TanzilData)\n\nExtract the verses of a TanzilData object.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.@data-Tuple{Any}","page":"API","title":"QuranTree.@data","text":"@data(expr)\n\nExtract the data property object.\n\n\n\n\n\n","category":"macro"},{"location":"man/api/#QuranTree.@desc-Tuple{Any}","page":"API","title":"QuranTree.@desc","text":"@desc(expr)\n\nExtract the detailed description of a AbstractFeature.\n\n\n\n\n\n","category":"macro"},{"location":"man/api/#QuranTree.@transliterator-Tuple{Any,Any}","page":"API","title":"QuranTree.@transliterator","text":"@transliterator(dict, name)\n\nCreate a custom transliterator using an input dict (Dict object) with its corresponding name as String object. This will automatically update the transliterator inside all  functions like arabic, verses, and encode.\n\n\n\n\n\n","category":"macro"},{"location":"man/api/#QuranTree.@transliterator-Tuple{Any}","page":"API","title":"QuranTree.@transliterator","text":"@transliterator(dict)\n\nFallback to the default Buckwalter transliterator.\n\n\n\n\n\n","category":"macro"}]
}
