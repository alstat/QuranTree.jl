var documenterSearchIndex = {"docs":
[{"location":"man/transliteration/#Transliteration","page":"Transliteration","title":"Transliteration","text":"","category":"section"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"QuranTree.jl uses Buckwalter as the default transliteration, which is based on the Quranic Arabic Corpus encoding. The transliteration is written as encode function, for example, the following will transliterate the first verse of Chapter 1:","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"using QuranTree\n\ncrps, tnzl = load(QuranData());\ncrpsdata = table(crps);\ntnzldata = table(tnzl);\nvrs = verses(tnzldata[1][1])\nencode(vrs[1])","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"The verses function above is used to extract the corresponding verse from the Qur'an data of type AbstractQuran.","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"tip: Tips\nverses by default only returns the verse form of the table, but one can also extract the corresponding verse number instead of the form, example:verses(tnzldata, number=true, start_end=true)\nverses(tnzldata, number=true, start_end=false)","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"tip: Tips\nTo extract the words of the corpus, use the function words instead.","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"The function verses always returns an Array, and hence encoding multiple verses is possible using Julia's . (dot) broadcasting operation. For example, the following will transliterate all verses of Chapter 114:","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"vrs = verses(tnzldata[114])\nencode.(vrs)","category":"page"},{"location":"man/transliteration/#Decoding","page":"Transliteration","title":"Decoding","text":"","category":"section"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"To decode the transliterated back to Arabic form, use the arabic function. For example, the following will decode to Arabic the transliterated verses of Chapter 114 above:","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"arabic.(encode.(vrs))","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"Or using the CorpusData, ","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"vrs = verses(crpsdata[114])\navrs = arabic.(vrs)","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"tip: Tips\n. (dot) broadcasting is only used for arrays. So, for String input (not arrays of String), arabic(...) (without dot) is used. Example,arabic(vrs[1])","category":"page"},{"location":"man/transliteration/#Custom-Transliteration","page":"Transliteration","title":"Custom Transliteration","text":"","category":"section"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"Creating a custom transliteration requires only an input encoding in the form of a dictionary (Dict). For example, QuranTree.jl's Buckwalter's encoding is provided by the constant BW_ENCODING as shown below:","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"BW_ENCODING","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"Suppose, we want to create a new transliteration by simply reversing the values of the dictionary. This is done as follows:","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"old_keys = collect(keys(BW_ENCODING));\nnew_vals = reverse(collect(values(BW_ENCODING)));\nmy_encoder = Dict(old_keys .=> new_vals)\n@transliterator my_encoder \"MyEncoder\"","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"The macro @transliterator is used for updating the transliteration, and it takes two inputs: the dictionary (my_encoder) and the name of the encoding (\"MyEncoder\"). Using this new encoding, the avrs above will have a new transliteration:","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"new_vrs = encode.(avrs);\nnew_vrs","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"To confirm this new transliteration, decoding it back to arabic should generate the proper results:","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"arabic.(new_vrs)","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"To reset the transliteration, simply run the following:","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"@transliterator :default","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"This will fallback to the Buckwalter transliteration, as shown below:","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"bw_vrs = encode.(avrs);\nbw_vrs\narabic.(bw_vrs)","category":"page"},{"location":"man/transliteration/#Simple-Encoding","page":"Transliteration","title":"Simple Encoding","text":"","category":"section"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"Another feature supported in QuranTree.jl is the Simple Encoding. For example, the following will (Simple) encode the first verse of Chapter 1:","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"vrs = verses(tnzldata[1][1])\nencode(SimpleEncoder, vrs[1])","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"tip: Tips\nFor verses 1 to 4 of Chapter 114, use the broadcasting operator:vrs = verses(tnzldata[114][1:4])\nencode.(SimpleEncoder, vrs)","category":"page"},{"location":"man/indexing/#Indexing-the-Corpus","page":"Indexing","title":"Indexing the Corpus","text":"","category":"section"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"QuranTree.jl offers a intuitive indexing for both Quranic Arabic Corpus and the Tanzil Data, specifically it follows the following usage:","category":"page"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"# for Quranic Arabic Corpus\ncrpsdata[<chapters>][<verses>][<words>][<parts>]\n\n# for Tanzil Data\ntnzldata[<chapters>][<verses>]","category":"page"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"The following are the options supported for each index:","category":"page"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"Chapters:\nInt64 - crpsdata[1] (extracts Chapter 1)\nUnitRange - crpsdata[15:24] (extracts Chapter 15 to 24)\nArray{Int64,1} - crpsdata[[3,9,10]] (extracts Chapter 3, 9 and 10)\nend (special) - crpsdata[end-3:end] (extracts Chapter 111 to 114).\nVerses:\nInt64 - crpsdata[1][1] (extracts Verse 1 of Chapter 1)\nUnitRange - crpsdata[2][15:24] (extracts verses 15 to 24 of Chapter 2)\nArray{Int64,1} - crpsdata[10][[3,9,10]] (extracts verses 3, 9 and 10 of Chapter 10)\nWords: (not applicable for TanzilData, only CorpusData)\nInt64 - crpsdata[1][1][1] (extracts Word 1 of Verse 1 of Chapter 1)\nUnitRange - crpsdata[2][8][1:3] (extracts words 1 to 3 of Verse 8 of Chapter 2)\nArray{Int64,1} - crpsdata[2][8][[1,3]] (extracts words 1 and 3 of Verse 8 of Chapter 2)\nParts: (not applicable for TanzilData, only CorpusData)\nInt64 - crpsdata[1][1][1][1] (extracts Part 1 of Word 1 of Verse 1 of Chapter 1)\nUnitRange - crpsdata[2][9][1][1:2] (extracts Part 1 to Part 2 of Word 1 of Verse 9 of Chapter 2)\nArray{Int64,1} - crpsdata[2][9][1][[1,2]] (extracts Part 1 and Part 2 of Word 1 of Verse 9 of Chapter 2)","category":"page"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"As an example, the following will extract Verse 9 of Chapter 2 in both TanzilData and CorpusData:","category":"page"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"using QuranTree\n\ndata = QuranData();\ncrps, tnzl = load(data);\ncrpsdata = table(crps);\ntnzldata = table(tnzl);\ncrpsdata[2][9]\ntnzldata[2][9]","category":"page"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"As shown above, the output of the indexing contains label for the chapter name, both in Arabic and in English. Again, the output of the crpsdata[2][9] is not shown, since the width of the output is wider than the width of the output pane. So, PrettyTables.jl is used to view the table:","category":"page"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"using Pkg\nPkg.add(\"PrettyTables\")","category":"page"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"using PrettyTables\n@ptconf vcrop_mode=:middle tf=tf_compact\n@pt crpsdata[2][9]","category":"page"},{"location":"man/indexing/#Combinations-of-Indices","page":"Indexing","title":"Combinations of Indices","text":"","category":"section"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"Combinations of these indices are also supported. For example, the following will extract Chapter 111 to 114, each with verses 1 and 3:","category":"page"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"@pt crpsdata[111:114][[1,3]]\n@pt tnzldata[111:114][[1,3]] ","category":"page"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"info: Note\nSpecial indexing end is also applicable, for example crpsdata[111:114][[1,3]] is the same as crpsdata[end-3:end][[1,3]], and tnzldata[111:114][[1,3]] is equivalent to tnzldata[end-3:end][[1,3]].","category":"page"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"Another example, the following will extract Part 1 of Words 1 to 3 of the above CorpusData output:","category":"page"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"@pt crpsdata[111:114][[1,3]][1:3][1] ","category":"page"},{"location":"man/data_processing/#Data-Processing","page":"Data Processing","title":"Data Processing","text":"","category":"section"},{"location":"man/data_processing/","page":"Data Processing","title":"Data Processing","text":"The goal of having a Quranic corpus is to study it computationally. As such, special utilities for further data preprocessing are necessary. QuranTree.jl offers functions for processing Arabic texts. These include, character dediacritization and character normalization.","category":"page"},{"location":"man/data_processing/#Character-Dediacritization","page":"Data Processing","title":"Character Dediacritization","text":"","category":"section"},{"location":"man/data_processing/","page":"Data Processing","title":"Data Processing","text":"dediac works for both Arabic, Buckwalter and custom transliterations.","category":"page"},{"location":"man/data_processing/","page":"Data Processing","title":"Data Processing","text":"using QuranTree\n\ncrps, tnzl = load(QuranData());\ncrpsdata = table(crps);\ntnzldata = table(tnzl);\navrs = verses(tnzldata[1][1])[1]\ndediac(avrs)\nbvrs = verses(crpsdata[1][1])[1]\ndediac(bvrs)\ndediac(avrs) === arabic(dediac(bvrs))","category":"page"},{"location":"man/data_processing/","page":"Data Processing","title":"Data Processing","text":"Custom transliteration is also dediacritizable as shown below,","category":"page"},{"location":"man/data_processing/","page":"Data Processing","title":"Data Processing","text":"old_keys = collect(keys(BW_ENCODING));\nnew_vals = reverse(collect(values(BW_ENCODING)));\nmy_encoder = Dict(old_keys .=> new_vals);\n\n@transliterator my_encoder \"MyEncoder\"\nencode(avrs)\narabic(encode(avrs))\ndediac(encode(avrs))\narabic(dediac(encode(avrs)))","category":"page"},{"location":"man/data_processing/","page":"Data Processing","title":"Data Processing","text":"To reset the transliteration,","category":"page"},{"location":"man/data_processing/","page":"Data Processing","title":"Data Processing","text":"@transliterator :default\nencode(avrs)\ndediac(encode(avrs))","category":"page"},{"location":"man/data_processing/#Character-Normalization","page":"Data Processing","title":"Character Normalization","text":"","category":"section"},{"location":"man/data_processing/","page":"Data Processing","title":"Data Processing","text":"Normalization is done using the normalize function. It works for Arabic, Buckwalter and other custom transliterations. For example, the following normalizes the avrs above:","category":"page"},{"location":"man/data_processing/","page":"Data Processing","title":"Data Processing","text":"normalize(avrs)\nnormalize(dediac(avrs))\ndediac(normalize(avrs))\n# using pipe notation\navrs |> dediac |> normalize |> encode","category":"page"},{"location":"man/data_processing/","page":"Data Processing","title":"Data Processing","text":"Specific character can be normalized:","category":"page"},{"location":"man/data_processing/","page":"Data Processing","title":"Data Processing","text":"avrs1 = verses(tnzldata[2][4])[1]\nnormalize(avrs1, :alif_maddah)\nnormalize(avrs1, :alif_hamza_above)\nnormalize(avrs, [:alif_khanjareeya, :hamzat_wasl])","category":"page"},{"location":"man/data_processing/","page":"Data Processing","title":"Data Processing","text":"Or using the CorpusData instead of the TanzilData,","category":"page"},{"location":"man/data_processing/","page":"Data Processing","title":"Data Processing","text":"avrs2 = arabic(verses(crpsdata[2][15])[1])\nnormalize(avrs2, :ya_hamza_above)","category":"page"},{"location":"man/camel/analysis/#Morphological-Analysis","page":"Morphological Analysis","title":"Morphological Analysis","text":"","category":"section"},{"location":"man/camel/analysis/","page":"Morphological Analysis","title":"Morphological Analysis","text":"Among the features of CAMeL Tools, is the availability of a token analyzer. In the following example, we will analyze the first word of the basmalah from avrs1 above. Load the data as follows:","category":"page"},{"location":"man/camel/analysis/","page":"Morphological Analysis","title":"Morphological Analysis","text":"using Pkg\nPkg.add(\"JuliaDB\")\nPkg.add(\"PrettyTables\")","category":"page"},{"location":"man/camel/analysis/","page":"Morphological Analysis","title":"Morphological Analysis","text":"using QuranTree\ncrps, tnzl = load(QuranData());\ncrpsdata = table(crps);\ntnzldata = table(tnzl);\navrs1 = verses(tnzldata[1][1])[1]\ndediac(avrs1)","category":"page"},{"location":"man/camel/analysis/","page":"Morphological Analysis","title":"Morphological Analysis","text":"To analyze the Morphological feature of the basmalah, run the following:","category":"page"},{"location":"man/camel/analysis/","page":"Morphological Analysis","title":"Morphological Analysis","text":"using Pkg\nPkg.add(\"PyCall\")\nusing PyCall\nusing JuliaDB\nusing PrettyTables\n@ptconf vcrop_mode=:middle tf=tf_compact\n@pyimport camel_tools.morphology.database as camel_database\n@pyimport camel_tools.morphology.analyzer as camel_analyzer\n\ndb = camel_database.MorphologyDB.builtin_db()\nanalyzer = camel_analyzer.Analyzer(db)\nanalyses = analyzer.analyze(split(avrs1)[1])\ntbl = table([(;Dict(Symbol.(keys(d)) .=> collect(values(d)))...) for d in analyses])\n@pt tbl","category":"page"},{"location":"man/camel/analysis/","page":"Morphological Analysis","title":"Morphological Analysis","text":"info: Note\nYou need to install JuliaDB.jl and PrettyTables.jl to successfully run the code. using Pkg\nPkg.add(\"JuliaDB\")\nPkg.add(\"PrettyTables\")","category":"page"},{"location":"man/camel/analysis/","page":"Morphological Analysis","title":"Morphological Analysis","text":"The following is the table of the above output properly formatted in HTML.","category":"page"},{"location":"man/camel/analysis/","page":"Morphological Analysis","title":"Morphological Analysis","text":"Pkg.add(\"DataFrames\")\nPkg.add(\"IterableTables\")\nPkg.add(\"Latexify\")\nusing DataFrames: DataFrame\nusing IterableTables\nusing Latexify\n\nmdtable(DataFrame(tbl), latex=false)","category":"page"},{"location":"man/api/#API-References","page":"API","title":"API References","text":"","category":"section"},{"location":"man/api/","page":"API","title":"API","text":"Modules = [QuranTree]","category":"page"},{"location":"man/api/#QuranTree.Features","page":"API","title":"QuranTree.Features","text":"Features(data::String)\n\nConvert a string to morphological feature object.\n\n\n\n\n\n","category":"type"},{"location":"man/api/#QuranTree.Lemma","page":"API","title":"QuranTree.Lemma","text":"Lemma(data::String)\n\nConvert a string to a Lemma object.\n\n\n\n\n\n","category":"type"},{"location":"man/api/#QuranTree.Prefix","page":"API","title":"QuranTree.Prefix","text":"Prefix(data::Symbol, pos::AbstractPartOfSpeech)\n\nCreate a new Prefix object with data as the symbol of the morphological feature with pos as  the corresponding Part of Speech.\n\n\n\n\n\n","category":"type"},{"location":"man/api/#QuranTree.Root","page":"API","title":"QuranTree.Root","text":"Root(data::String)\n\nConvert a string to a Root object.\n\n\n\n\n\n","category":"type"},{"location":"man/api/#QuranTree.Special","page":"API","title":"QuranTree.Special","text":"Special(data::String)\n\nConvert a string to a Special object.\n\n\n\n\n\n","category":"type"},{"location":"man/api/#QuranTree.Stem","page":"API","title":"QuranTree.Stem","text":"Stem(data::Symbol, pos::AbstractPartOfSpeech)\n\nCreate a new Stem object with data as the symbol of the morphological feature with pos as  the corresponding Part of Speech.\n\n\n\n\n\n","category":"type"},{"location":"man/api/#QuranTree.Suffix","page":"API","title":"QuranTree.Suffix","text":"Suffix(data::Symbol, pos::AbstractPartOfSpeech)\n\nCreate a new Suffix object with data as the symbol of the morphological feature with pos as  the corresponding Part of Speech.\n\n\n\n\n\n","category":"type"},{"location":"man/api/#Base.parse-Tuple{Type{Features}, AbstractString}","page":"API","title":"Base.parse","text":"parse(::Type{Features}, f::AbstractString)\n\nExtract the features of a morphological Feature object.\n\nExamples\n\njulia> data = QuranData()\njulia> crps, tnzl = load(data)\njulia> crpsdata = table(crps)\njulia> tnzldata = table(tnzl)\njulia> parse(Features, select(crpsdata.data, :features)[53])\nStem(:NEG, NEG, AbstractFeature[Lemma(\"laA\"), Special(\"<in~\")])\n\n\n\n\n\n","category":"method"},{"location":"man/api/#Dagger.load-Tuple{QuranData}","page":"API","title":"Dagger.load","text":"load(data::QuranData)\n\nLoad the raw QuranData as a ReadOnlyArray for both Quranic Corpus and Tanzil Data.\n\nExamples\n\njulia> data = QuranData()\njulia> crps, tnzl = load(data);\n\n\n\n\n\n","category":"method"},{"location":"man/api/#IndexedTables.table-Tuple{CorpusRaw}","page":"API","title":"IndexedTables.table","text":"table(crps::CorpusRaw)\n\nConvert the CorpusRaw read-only array into a tabularized CorpusData using IndexedTable.\n\nExamples\n\njulia> data = QuranData()\njulia> crps, tnzl = load(data)\njulia> crpsdata = table(crps);\n\n\n\n\n\n","category":"method"},{"location":"man/api/#IndexedTables.table-Tuple{TanzilRaw}","page":"API","title":"IndexedTables.table","text":"table(tnzl::TanzilRaw)\n\nConvert the TanzilRaw read-only array into a tabularized TanzilData using IndexedTable.\n\nExamples\n\njulia> data = QuranData()\njulia> crps, tnzl = load(data)\njulia> tnzldata = table(tnzl);\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.arabic-Tuple{String}","page":"API","title":"QuranTree.arabic","text":"arabic(s::String[, encoder::AbstractEncoder])\n\nEncode the String object into Arabic characters. Custom encoder generated from @transliterator can be provided, but default is Buckwalter.\n\nExamples\n\njulia> data = QuranData()\njulia> crps, tnzl = load(data)\njulia> crpsdata = table(crps)\njulia> tnzldata = table(tnzl)\njulia> arabic(verses(crpsdata[114])[1])\n\"قُلْ أَعُوذُ بِرَبِّ ٱلنَّاسِ\"\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.chapter_name","page":"API","title":"QuranTree.chapter_name","text":"chapter_name(quran::AbstractQuran, transliterate::Bool=false; lang::Symbol=:arabic)\n\nExtract the chapter name of the input quran, in either :arabic (default) or :english\n\nExamples\n\njulia> data = QuranData()\njulia> crps, tnzl = load(data)\njulia> crpsdata = table(crps)\njulia> tnzldata = table(tnzl)\njulia> chapter_name(crpsdata[13][2][1])\n\"ٱلرَّعْد\"\n\n\n\n\n\n","category":"function"},{"location":"man/api/#QuranTree.dediac-Tuple{String}","page":"API","title":"QuranTree.dediac","text":"dediac(s::String)\n\nDediacritize the input String object.\n\nExamples\n\njulia> data = QuranData()\njulia> crps, tnzl = load(data)\njulia> crpsdata = table(crps)\njulia> tnzldata = table(tnzl)\njulia> dediac(verses(crpsdata[1][1])[1])\n\"bsm {llh {lrHm`n {lrHym\"\njulia> dediac(arabic(verses(crpsdata[1][1])[1]))\n\"بسم ٱلله ٱلرحمٰن ٱلرحيم\"\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.encode-Tuple{String}","page":"API","title":"QuranTree.encode","text":"encode(s::String)\n\nTransliterate the input String object using Buckwalter.\n\nExamples\n\njulia> data = QuranData()\njulia> crps, tnzl = load(data)\njulia> crpsdata = table(crps)\njulia> tnzldata = table(tnzl)\njulia> basmala = arabic(verses(crpsdata[1][1])[1])\njulia> encode(basmala)\n\"bisomi {ll~ahi {lr~aHoma`ni {lr~aHiymi\"\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.encode-Tuple{Type{SimpleEncoder}, String}","page":"API","title":"QuranTree.encode","text":"encode(::Type{SimpleEncoder}, s::String)\n\nEncode the input String object as SimpleEncoder.\n\nExamples\n\njulia> data = QuranData()\njulia> crps, tnzl = load(data)\njulia> crpsdata = table(crps)\njulia> tnzldata = table(tnzl)\njulia> basmala = arabic(verses(crpsdata[1][1])[1])\njulia> encode(SimpleEncoder, basmala)\n\"Ba+Kasra | Seen+Sukun | Meem+Kasra | <space> | HamzatWasl | Lam | Lam+Shadda+Fatha | Ha+Kasra | <space> | HamzatWasl | Lam | Ra+Shadda+Fatha | HHa+Sukun | Meem+Fatha | AlifKhanjareeya | Noon+Kasra | <space> | HamzatWasl | Lam | Ra+Shadda+Fatha | HHa+Kasra | Ya | Meem+Kasra\"\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.encode-Tuple{Union{Char, String}, AbstractEncoder}","page":"API","title":"QuranTree.encode","text":"encode(s::Union{Char,String}, encoder::AbstractEncoder)\n\nTransliterate the input String object using a custom encoder. Custom encoder is generated using the @transliterator.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.isfeature-Tuple{AbstractFeature, Type{var\"#s112\"} where var\"#s112\"<:AbstractFeature}","page":"API","title":"QuranTree.isfeature","text":"isfeature(feat::Features, pos::Type{<:AbstractFeature})\n\nCheck if the morphological Feature object is a type of pos.\n\nExamples\n\njulia> data = QuranData()\njulia> crps, tnzl = load(data)\njulia> crpsdata = table(crps)\njulia> tnzldata = table(tnzl)\njulia> isfeature(parse(Features, select(crpsdata[1].data, :features)[2]), Stem)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.lemma-Tuple{AbstractFeature}","page":"API","title":"QuranTree.lemma","text":"lemma(feat::AbstractFeature)\n\nExtract the lemma of the feature.\n\nExamples\n\njulia> data = QuranData()\njulia> crps, tnzl = load(data)\njulia> crpsdata = table(crps)\njulia> tnzldata = table(tnzl)\njulia> lemma(parse(Features, select(crpsdata[112].data, :features)[1]))\n\"qaAla\"\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.normalize-Tuple{String, Symbol}","page":"API","title":"QuranTree.normalize","text":"normalize(s::String, char::Symbol)\n\nNormalize a specific Arabic or Buckwalter String character (chars).\n\nExamples\n\njulia> data = QuranData()\njulia> crps, tnzl = load(data)\njulia> crpsdata = table(crps);\njulia> tnzldata = table(tnzl);\njulia> normalize(arabic(verses(crpsdata[1][1])[1]), :hamzat_wasl)\n\"بِسْمِ اللَّهِ الرَّحْمَٰنِ الرَّحِيمِ\"\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.normalize-Tuple{String, Vector{Symbol}}","page":"API","title":"QuranTree.normalize","text":"normalize(s::String, chars::Array{Symbol,1})\n\nNormalize a specific Arabic or Buckwalter String character/s (chars).\n\nExamples\n\njulia> data = QuranData()\njulia> crps, tnzl = load(data)\njulia> crpsdata = table(crps);\njulia> tnzldata = table(tnzl);\njulia> normalize(arabic(verses(crpsdata[1][1])[1]), [:alif_khanjareeya, :hamzat_wasl])\n\"بِسْمِ اللَّهِ الرَّحْمَانِ الرَّحِيمِ\"\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.normalize-Tuple{String}","page":"API","title":"QuranTree.normalize","text":"normalize(s::String)\n\nNormalize a Arabic or Buckwalter String characters.\n\nExamples\n\njulia> data = QuranData()\njulia> crps, tnzl = load(data)\njulia> crpsdata = table(crps);\njulia> tnzldata = table(tnzl);\njulia> normalize(dediac(verses(crpsdata[1][1])[1]))\n\"bsm Allh AlrHmAn AlrHym\"\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.root-Tuple{AbstractFeature}","page":"API","title":"QuranTree.root","text":"root(feat::AbstractFeature)\n\nExtract the root of the feature.\n\nExamples\n\njulia> data = QuranData()\njulia> crps, tnzl = load(data)\njulia> crpsdata = table(crps)\njulia> tnzldata = table(tnzl)\njulia> root(parse(Features, select(crpsdata[112].data, :features)[1]))\n\"qwl\"\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.special-Tuple{AbstractFeature}","page":"API","title":"QuranTree.special","text":"special(feat::AbstractFeature)\n\nExtract the special feature of the token.\n\nExamples\n\njulia> data = QuranData()\njulia> crps, tnzl = load(data)\njulia> crpsdata = table(crps)\njulia> tnzldata = table(tnzl)\njulia> special(parse(Features, select(crpsdata.data, :features)[53]))\n\"<in~\"\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.verses-Tuple{AbstractQuran}","page":"API","title":"QuranTree.verses","text":"verses(quran::AbstractQuran; number=false, start_end=true)\n\nExtract the verses of a AbstractQuran object.\n\nExamples\n\njulia> data = QuranData()\njulia> crps, tnzl = load(data)\njulia> crpsdata = table(crps)\njulia> tnzldata = table(tnzl)\njulia> verses(crpsdata[1])[7]\n\"Sira`Ta {l~a*iyna >anoEamota Ealayohimo gayori {lomagoDuwbi Ealayohimo walaA {lD~aA^l~iyna\"\njulia> verses(crpsdata[113:114], number=true)[1]\n\"113:(1,5)\"\njulia> verses(crpsdata[113:114], number=true, start_end=false)[1]\n([113], [1, 2, 3, 4, 5])\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.verses-Tuple{IndexedTables.IndexedTable, Int64, Int64}","page":"API","title":"QuranTree.verses","text":"verses(data::IndexedTable[, a::Int64[, b::Int64]]; number=false, start_end=true)\n\nExtract the verses of a IndexedTable object from row a to row b.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.verses-Tuple{TanzilData}","page":"API","title":"QuranTree.verses","text":"verses(quran::TanzilData)\n\nExtract the verses of a TanzilData object.\n\nExamples\n\njulia> data = QuranData()\njulia> crps, tnzl = load(data)\njulia> crpsdata = table(crps)\njulia> tnzldata = table(tnzl)\njulia> verses(tnzldata)[1]\n\"بِسْمِ ٱللَّهِ ٱلرَّحْمَٰنِ ٱلرَّحِيمِ\"\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.words-Tuple{AbstractQuran}","page":"API","title":"QuranTree.words","text":"words(quran::AbstractQuran)\n\nExtract words of the input quran.\n\nExamples\n\njulia> data = QuranData()\njulia> crps, tnzl = load(data)\njulia> crpsdata = table(crps)\njulia> tnzldata = table(tnzl)\njulia> words(tnzldata[1][7])[1]\n\"صِرَٰطَ\"\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.@data-Tuple{Any}","page":"API","title":"QuranTree.@data","text":"@data(expr)\n\nExtract the data property object.\n\nExamples\n\njulia> data = QuranData()\njulia> crps, tnzl = load(data)\njulia> crpsdata = table(crps);\njulia> tnzldata = table(tnzl);\njulia> feat = parse(Features, select(crpsdata.data, :features)[53])\njulia> @data feat\n:NEG\n\n\n\n\n\n","category":"macro"},{"location":"man/api/#QuranTree.@desc-Tuple{Any}","page":"API","title":"QuranTree.@desc","text":"@desc(expr)\n\nExtract the detailed description of a AbstractFeature.\n\nExamples\n\njulia> data = QuranData()\njulia> crps, tnzl = load(data)\njulia> crpsdata = table(crps);\njulia> tnzldata = table(tnzl);\njulia> feat = parse(Features, select(crpsdata.data, :features)[53])\njulia> @desc feat\nStem\n────\nNegative:\n ├ data: NEG\n ├ desc: Negative particle\n └ ar_label: حرف نفي\nLemma:\n └ data: laA\nSpecial:\n └ data: <in~\n\n\n\n\n\n","category":"macro"},{"location":"man/api/#QuranTree.@transliterator-Tuple{Any, Any}","page":"API","title":"QuranTree.@transliterator","text":"@transliterator(dict, name)\n\nCreate a custom transliterator using an input dict (Dict object) with its corresponding name as String object. This will automatically update the transliterator inside all  functions like arabic, verses, and encode.\n\nExamples\n\njulia> data = QuranData()\njulia> crps, tnzl = load(data)\njulia> crpsdata = table(crps);\njulia> tnzldata = table(tnzl);\njulia> old_keys = collect(keys(BW_ENCODING))\njulia> new_vals = reverse(collect(values(BW_ENCODING)))\njulia> my_encoder = Dict(old_keys .=> new_vals)\njulia> basmala = arabic(verses(crpsdata[1][1])[1])\njulia> @transliterator my_encoder \"MyEncoder\"\njulia> encode(basmala)\n\"\"S%gAS zppj[KS zp`j[&gA[r]S zp`j[&SkAS\"\n\n\n\n\n\n","category":"macro"},{"location":"man/api/#QuranTree.@transliterator-Tuple{Any}","page":"API","title":"QuranTree.@transliterator","text":"@transliterator(symbl)\n\nFallback to the default Buckwalter transliterator.\n\njulia> data = QuranData()\njulia> crps, tnzl = load(data)\njulia> crpsdata = table(crps);\njulia> tnzldata = table(tnzl);\njulia> old_keys = collect(keys(BW_ENCODING))\njulia> new_vals = reverse(collect(values(BW_ENCODING)))\njulia> my_encoder = Dict(old_keys .=> new_vals)\njulia> basmala = arabic(verses(crpsdata[1][1])[1])\njulia> @transliterator my_encoder \"MyEncoder\"\njulia> encode(basmala)\n\"\"S%gAS zppj[KS zp`j[&gA[r]S zp`j[&SkAS\"\njulia> @transliterator :default\njulia> encode(basmala)\n\"bisomi {ll~ahi {lr~aHoma`ni {lr~aHiymi\"\n\n\n\n\n\n","category":"macro"},{"location":"man/nlp/nlp/#Natural-Language-Processing","page":"Introduction","title":"Natural Language Processing","text":"","category":"section"},{"location":"man/nlp/nlp/","page":"Introduction","title":"Introduction","text":"CurrentModule = QuranTree\nDocTestSetup = quote\n    using QuranTree\nend","category":"page"},{"location":"man/nlp/nlp/","page":"Introduction","title":"Introduction","text":"The goal of this section is to demonstrate the use of the package for Natural Language Processing. At the moment, the following are the available applications:","category":"page"},{"location":"man/nlp/nlp/","page":"Introduction","title":"Introduction","text":"Pages = [\n    \"text_summarization.md\"\n    \"topic_modeling.md\"\n]\nDepth = 2","category":"page"},{"location":"man/nlp/text_summarization/#Text-Summarization","page":"Text Summarization","title":"Text Summarization","text":"","category":"section"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"This section will demonstrate how to use TextAnalysis.jl (Julia's leading NLP library) for QuranTree.jl. In particular, in summarizing the Qur'an, specifically Chapter 18 (The Cave) which most Muslims are aware of the story, since it is the chapter recommended to be read every Friday. The algorithm used for summarization is called TextRank, an application of PageRank algorithm to text datasets.","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"using Pkg\nPkg.add(\"JuliaDB\")\nPkg.add(\"PrettyTables\")\nPkg.add(\"TextAnalysis\")","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"using JuliaDB\nusing PrettyTables\nusing QuranTree\nusing TextAnalysis\n@ptconf tf=tf_compact vcrop_mode=:backend\n\ncrps, tnzl = QuranData() |> load;\ncrpsdata = table(crps)","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"info: Note\nYou need to install JuliaDB.jl and PrettyTables.jl to successfully run the code. using Pkg\nPkg.add(\"JuliaDB\")\nPkg.add(\"PrettyTables\")","category":"page"},{"location":"man/nlp/text_summarization/#Data-Preprocessing","page":"Text Summarization","title":"Data Preprocessing","text":"","category":"section"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"The first data processing will be the removal of all Disconnected Letters like الٓمٓ ,الٓمٓصٓ, among others. This is done as follows:","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"function preprocess(s::String)\n    feat = parse(Features, s)\n    disletters = isfeature(feat, AbstractDisLetters)\n    prepositions = isfeature(feat, AbstractPreposition)\n    particles = isfeature(feat, AbstractParticle)\n    conjunctions = isfeature(feat, AbstractConjunction)\n    pronouns = isfeature(feat, AbstractPronoun)\n    adverbs = isfeature(feat, AbstractAdverb)\n\n    return !disletters && !prepositions && !particles && !conjunctions && !pronouns && !adverbs\nend\n\ncrpstbl = filter(t -> preprocess(t.features), crpsdata[18].data)","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"Next, we create a copy of the above data so we have the original state, and use the copy to do further data processing.","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"crpsnew = deepcopy(crpstbl)\nfeats = select(crpsnew, :features)\nfeats = parse.(Features, feats)","category":"page"},{"location":"man/nlp/text_summarization/#Lemmatization","page":"Text Summarization","title":"Lemmatization","text":"","category":"section"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"Using the above parsed features, we then convert the form of the tokens into its lemma. This is useful for addressing minimal variations due to inflection.","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"lemmas = lemma.(feats)\nforms1 = select(crpsnew, :form)\nforms1[.!ismissing.(lemmas)] = lemmas[.!ismissing.(lemmas)]","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"tip: Tips\nWe can also use the Root features instead, which is done by simply replacing lemma.(feats) with root.(feats). ","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"We now put back the new form to the corpus:","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"crpsnew = transform(crpsnew, :form => forms1)\ncrpsnew = CorpusData(crpsnew)","category":"page"},{"location":"man/nlp/text_summarization/#Tokenization","page":"Text Summarization","title":"Tokenization","text":"","category":"section"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"We want to summarize the Qur'an at the verse level. Thus, the token would be the verses of the corpus. From these verses, we further clean it by dediacritization and normalization of the characters:","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"lem_vrs = verses(crpsnew)\nvrs = QuranTree.normalize.(dediac.(lem_vrs))","category":"page"},{"location":"man/nlp/text_summarization/#Creating-a-TextAnalysis-Corpus","page":"Text Summarization","title":"Creating a TextAnalysis Corpus","text":"","category":"section"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"To make use of the TextAnalysis.jl's APIs, we need to encode the processed Quranic Corpus to TextAnalysis.jl's Corpus. In this case, we will create a StringDocument of the verses.","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"crps1 = Corpus(StringDocument.(vrs))","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"We then update the lexicon and inverse index for efficient indexing of the corpus.","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"update_lexicon!(crps1)\nupdate_inverse_index!(crps1)","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"Next, we create a Document Term Matrix, which will have rows of verses and columns of words describing the verses.","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"m1 = DocumentTermMatrix(crps1)","category":"page"},{"location":"man/nlp/text_summarization/#TF-IDF","page":"Text Summarization","title":"TF-IDF","text":"","category":"section"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"Finally, we compute the corresponding TF-IDF, which will serve as the feature matrix.","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"tfidf = tf_idf(m1)","category":"page"},{"location":"man/nlp/text_summarization/#Summarizing-the-Qur'an","page":"Text Summarization","title":"Summarizing the Qur'an","text":"","category":"section"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"Using the TF-IDF, we compute the product of it with its transpose to come up with a square matrix, where the elements describes the linkage between the verses, or the similarity between the verses.","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"sim_mat = tfidf * tfidf'","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"At this point, we can now write the code for the PageRank algorithm:","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"using LinearAlgebra\nfunction pagerank(A; Niter=20, damping=.15)\n    Nmax = size(A, 1)\n    r = rand(1, Nmax);              # Generate a random starting rank.\n    r = r ./ norm(r, 1);            # Normalize\n    a = (1 - damping) ./ Nmax;      # Create damping vector\n\n    for i=1:Niter\n        s = r * A\n        rmul!(s, damping)\n        r = s .+ (a * sum(r, dims=2));   # Compute PageRank.\n    end\n\n    r = r ./ norm(r, 1);\n\n    return r\nend","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"Using this function, we apply it to the above similarity matrix (sim_mat) and extract the PageRank scores for all verses. This score will serve as the weights, and so higher scores suggest that the verse has a lot of connections to other verses in the corpus, which means it represents per se the corpus.","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"p = pagerank(sim_mat)","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"Now we sort these scores in descending order and use it to rearrange the original verses:","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"idx = sortperm(vec(p), rev=true)[1:10]","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"Finally, the following 10 verses best summarizes the corpus (Chapter 18) using TextRank:","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"verse_nos = verses(CorpusData(crpstbl), number=true, start_end=false)\n\nverse_out = String[];\nchapter = Int64[];\nverse = Int64[];\nfor v in verse_nos\n    verse_out = vcat(verse_out, verses(crpsdata[v[1]][v[2]]))\n    chapter = vcat(chapter, repeat(v[1], inner=length(v[2])))\n    verse = vcat(verse, v[2])\nend\n\ntbl = table((\n    chapter=chapter[idx], \n    verse=verse[idx], \n    verse_text=arabic.(verse_out[idx])\n));\n\n@pt tbl","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"The following is the table of the above output properly formatted in HTML.","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"Pkg.add(\"DataFrames\")\nPkg.add(\"IterableTables\")\nPkg.add(\"Latexify\")\nusing DataFrames: DataFrame\nusing IterableTables\nusing Latexify\n\nmdtable(DataFrame(tbl), latex=false)","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"The following are the translations of the above verses:","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"<table>\n    <thead><td>Chapter</td><td>Verse</td><td>English Translation</td></thead>\n    <tbody>\n    <tr><td>18</td><td>85</td><td>So he travelled a course,</td></tr>\n    <tr><td>18</td><td>89</td><td>Then he travelled a ˹different˺ course</td></tr>\n    <tr><td>18</td><td>92</td><td>Then he travelled a ˹third˺ course</td></tr>\n    <tr><td>18</td><td>66</td><td>Moses said to him, “May I follow you, provided that you teach me some of the right guidance you have been taught?”</td></tr>\n    <tr><td>18</td><td>70</td><td>He responded, “Then if you follow me, do not question me about anything until I ˹myself˺ clarify it for you.”</td></tr>\n    <tr><td>18</td><td>8</td><td>And We will certainly reduce whatever is on it to barren ground.</td></tr>\n    <tr><td>18</td><td>28</td><td>And patiently stick with those who call upon their Lord morning and evening, seeking His pleasure.1 Do not let your eyes look beyond them, desiring the luxuries of this worldly life. And do not obey those whose hearts We have made heedless of Our remembrance, who follow ˹only˺ their desires and whose state is ˹total˺ loss.</td></tr>\n    <tr><td>18</td><td>108</td><td>where they will be forever, never desiring anywhere else.</td></tr>\n    <tr><td>18</td><td>91</td><td>So it was. And We truly had full knowledge of him.</td></tr>\n    <tr><td>18</td><td>68</td><td>And how can you be patient with what is beyond your ˹realm of˺ knowledge?”</td></tr>\n    </tbody>\n</table>","category":"page"},{"location":"man/camel/disambig/#Arabic-Disambiguation","page":"Disambiguation","title":"Arabic Disambiguation","text":"","category":"section"},{"location":"man/camel/disambig/","page":"Disambiguation","title":"Disambiguation","text":"In this section, we are going to apply a model, estimated from Maximum Likelihood Estimation (MLE), for disambiguating Arabic texts with no diacritics. As always, load the data as follows:","category":"page"},{"location":"man/camel/disambig/","page":"Disambiguation","title":"Disambiguation","text":"using Pkg\nPkg.add(\"JuliaDB\")\nPkg.add(\"PrettyTables\")","category":"page"},{"location":"man/camel/disambig/","page":"Disambiguation","title":"Disambiguation","text":"using QuranTree\ncrps, tnzl = load(QuranData());\ncrpsdata = table(crps);\ntnzldata = table(tnzl);","category":"page"},{"location":"man/camel/disambig/","page":"Disambiguation","title":"Disambiguation","text":"For this task, we are going to use the last verse of Chapter 1.","category":"page"},{"location":"man/camel/disambig/","page":"Disambiguation","title":"Disambiguation","text":"avrs1 = verses(tnzldata[1][7])[1]","category":"page"},{"location":"man/camel/disambig/","page":"Disambiguation","title":"Disambiguation","text":"Of course, the input needs to have no diacritics and so:","category":"page"},{"location":"man/camel/disambig/","page":"Disambiguation","title":"Disambiguation","text":"avrs1 = avrs1 |> dediac","category":"page"},{"location":"man/camel/disambig/#Inferring","page":"Disambiguation","title":"Inferring","text":"","category":"section"},{"location":"man/camel/disambig/","page":"Disambiguation","title":"Disambiguation","text":"To infer the diacritics then, run the following:","category":"page"},{"location":"man/camel/disambig/","page":"Disambiguation","title":"Disambiguation","text":"using Pkg\nPkg.add(\"PyCall\")\nusing PyCall\n@pyimport camel_tools.disambig.mle as camel_disambig\nmled = camel_disambig.MLEDisambiguator.pretrained()\ndisambig = mled.disambiguate(split(avrs1))","category":"page"},{"location":"man/camel/disambig/#Extracting-Diacritized-Output","page":"Disambiguation","title":"Extracting Diacritized Output","text":"","category":"section"},{"location":"man/camel/disambig/","page":"Disambiguation","title":"Disambiguation","text":"Finally, tying up all diacritized output:","category":"page"},{"location":"man/camel/disambig/","page":"Disambiguation","title":"Disambiguation","text":"join([d[2][1][2][\"diac\"] for d in disambig], \" \")","category":"page"},{"location":"man/camel/external/#CAMeL-Tools","page":"Getting Started","title":"CAMeL Tools","text":"","category":"section"},{"location":"man/camel/external/","page":"Getting Started","title":"Getting Started","text":"In this section, we will explore how to use CAMeL Tools of New York University Abu Dhabi. CAMeL is a suite of tools for Arabic Natural Language Processing, and by far the most feature-rich library to date for universal Arabic NLP. To install the library, follow the instructions here. ","category":"page"},{"location":"man/camel/external/#Setting-up","page":"Getting Started","title":"Setting up","text":"","category":"section"},{"location":"man/camel/external/","page":"Getting Started","title":"Getting Started","text":"For macOS users, however, simply run the following in the terminal:","category":"page"},{"location":"man/camel/external/","page":"Getting Started","title":"Getting Started","text":"pip3 install camel-tools","category":"page"},{"location":"man/camel/external/","page":"Getting Started","title":"Getting Started","text":"Then, download the necessary data as follows:","category":"page"},{"location":"man/camel/external/","page":"Getting Started","title":"Getting Started","text":"camel_data light","category":"page"},{"location":"man/camel/external/","page":"Getting Started","title":"Getting Started","text":"For this tutorial, we are going to use only the light version of the CAMeL data which is around 19mb.","category":"page"},{"location":"man/camel/external/#Julia-PyCall.jl","page":"Getting Started","title":"Julia PyCall.jl","text":"","category":"section"},{"location":"man/camel/external/","page":"Getting Started","title":"Getting Started","text":"Julia can interoperate with Python through the library PyCall.jl. To install, run the following:","category":"page"},{"location":"man/camel/external/","page":"Getting Started","title":"Getting Started","text":"using Pkg\nPkg.add(\"JuliaDB\")\nPkg.add(\"PrettyTables\")","category":"page"},{"location":"man/camel/external/","page":"Getting Started","title":"Getting Started","text":"using Pkg\nPkg.add(\"PyCall\")","category":"page"},{"location":"man/camel/external/","page":"Getting Started","title":"Getting Started","text":"ENV[\"PYTHON\"] = \"/usr/bin/python3\"\nPkg.build(\"PyCall\")","category":"page"},{"location":"man/camel/external/#Character-Dediacritization","page":"Getting Started","title":"Character Dediacritization","text":"","category":"section"},{"location":"man/camel/external/","page":"Getting Started","title":"Getting Started","text":"At this point, Julia can now connect to Python, and CAMeL Tools can now be loaded via the macro @pyimport. For example, the following will load the dediac module of the said library:","category":"page"},{"location":"man/camel/external/","page":"Getting Started","title":"Getting Started","text":"using PyCall\n@pyimport camel_tools.utils.dediac as camel_dediac\n@pyimport camel_tools.utils.normalize as camel_normalize","category":"page"},{"location":"man/camel/external/","page":"Getting Started","title":"Getting Started","text":"warning: Important\nIn case Python is not found, then it is required to specify the path in the environment variables, and as to which version to use. Hence, after installation of PyCall.jl, specify the path, for example:ENV[\"PYTHON\"] = \"/usr/bin/python3\"\nPkg.build(\"PyCall\")The last line will build the library and PyCall.jl will remember the path.","category":"page"},{"location":"man/camel/external/","page":"Getting Started","title":"Getting Started","text":"warning: Important\nMake sure the Python version you setup is where the CAMeL Tools was installed.","category":"page"},{"location":"man/camel/external/","page":"Getting Started","title":"Getting Started","text":"Let's use this and compare the results with QuranTree.jl's built in dediac function.","category":"page"},{"location":"man/camel/external/","page":"Getting Started","title":"Getting Started","text":"using QuranTree\ncrps, tnzl = load(QuranData());\ncrpsdata = table(crps);\ntnzldata = table(tnzl);\navrs1 = verses(tnzldata[1][1])[1]\ndediac(avrs1)","category":"page"},{"location":"man/camel/external/","page":"Getting Started","title":"Getting Started","text":"Now using CAMeL tools, we get the following:","category":"page"},{"location":"man/camel/external/","page":"Getting Started","title":"Getting Started","text":"camel_dediac.dediac_ar(avrs1)","category":"page"},{"location":"man/camel/external/","page":"Getting Started","title":"Getting Started","text":"The difference is on the Alif Khanjareeya, where at the moment QuranTree.jl tree does not consider it as part of the diacritics, but part of the characters to be normalized. ","category":"page"},{"location":"man/camel/external/","page":"Getting Started","title":"Getting Started","text":"Let's try this on CorpusData as well, to see how it handles Buckwalter dediacritization:","category":"page"},{"location":"man/camel/external/","page":"Getting Started","title":"Getting Started","text":"vrs1 = verses(crpsdata[1][1])[1]\ndediac(vrs1)\ncamel_dediac.dediac_bw(vrs1)","category":"page"},{"location":"man/camel/external/#Character-Normalization","page":"Getting Started","title":"Character Normalization","text":"","category":"section"},{"location":"man/camel/external/","page":"Getting Started","title":"Getting Started","text":"To normalize, QuranTree.jl uses argument for specifying the character to normalize. However for CAMeL tools, this is part of the name of the function:","category":"page"},{"location":"man/camel/external/","page":"Getting Started","title":"Getting Started","text":"avrs2 = verses(tnzldata[2][3])[1]\nnormalize(avrs2, :ta_marbuta)\ncamel_normalize.normalize_teh_marbuta_ar(avrs2)","category":"page"},{"location":"man/camel/external/","page":"Getting Started","title":"Getting Started","text":"Another example, normalizing over the Buckwalter encoding:","category":"page"},{"location":"man/camel/external/","page":"Getting Started","title":"Getting Started","text":"vrs2 = verses(crpsdata[2][3])[1]\nnormalize(vrs2, :ta_marbuta)\ncamel_normalize.normalize_teh_marbuta_bw(vrs2)","category":"page"},{"location":"man/morphological_features/#Morphological-Features","page":"Morphological Features","title":"Morphological Features","text":"","category":"section"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"QuranTree.jl provides complete types for all morphological features and part of speech of The Quranic Arabic Corpus. ","category":"page"},{"location":"man/morphological_features/#Parsing","page":"Morphological Features","title":"Parsing","text":"","category":"section"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"The features of each token are encoded as String in its raw form, and in order to parse this as morphological feature, the function parse(Features, x) is used, where x is the raw String input. For example, the following will parse the 2nd part of the 3rd word of 1st verse of Chapter 1:","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"using Pkg\nPkg.add(\"JuliaDB\")","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"using QuranTree\nusing JuliaDB\n\ncrps, tnzl = load(QuranData());\ncrpsdata = table(crps);\ntnzldata = table(tnzl);\ncrpsdata[1][1][3][2]\ntoken = select(crpsdata[1][1][3][2].data, :features)\nmfeat = parse(Features, token[1])\ntypeof(mfeat)","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"info: Note\nYou need to install JuliaDB.jl to successfully run the code. using Pkg\nPkg.add(\"JuliaDB\")","category":"page"},{"location":"man/morphological_features/#Extracting-Detailed-Description","page":"Morphological Features","title":"Extracting Detailed Description","text":"","category":"section"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"To see the detailed description of the features, @desc is used.","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"@desc mfeat","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"The Julia's dump function can be used as to how to access the properties of the Stem object.","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"dump(mfeat)\n\n# access other feats of the token\nmfeat.feats","category":"page"},{"location":"man/morphological_features/#Checking-Parts-of-Speech","page":"Morphological Features","title":"Checking Parts of Speech","text":"","category":"section"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"isfeature(token, pos) checks whether the token's parsed feature is a particular part of speech (pos). For example, the following checks whether mfeat above, among others, is indeed Masculine and Singular.","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"isfeature(mfeat, Masculine)\nisfeature(mfeat, Feminine)\nisfeature(mfeat, Singular)\nisfeature(mfeat, Adjective) && isfeature(mfeat, Genetive)","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"Another example on checking whether the token has Root and Lemma features.","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"isfeature(mfeat, Root) && isfeature(mfeat, Lemma)","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"tip: Tips\nisfeature(...) is useful when working with the JuliaDB.jl's filter function, instead of using regular expressions. For example,using Pkg\nPkg.add(\"PrettyTables\")using PrettyTables\n@ptconf vcrop_mode=:middle tf=tf_compact\n\ntbl = filter(t -> isfeature(parse(Features, t.features), ActiveParticle), crpsdata.data)\n\n@pt select(tbl, Not(:word, :part, :tag))","category":"page"},{"location":"man/morphological_features/#Lemma,-Root-and-Special","page":"Morphological Features","title":"Lemma, Root and Special","text":"","category":"section"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"root, lemma and special functions are used for extracting the Root, Lemma and Special morphological features, respectively. ","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"root(mfeat)\nlemma(mfeat)\n\narabic(root(mfeat))\narabic(lemma(mfeat))","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"The following example shows token with Special feature:","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"token2 = select(crpsdata.data, :features)[53]\nmfeat2 = parse(Features, token2)\nspecial(mfeat2)\narabic(special(mfeat2))","category":"page"},{"location":"man/morphological_features/#Implied-Verb-Features","page":"Morphological Features","title":"Implied Verb Features","text":"","category":"section"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"Some features of Quranic Arabic Verbs are implied. For example, the Voice feature of the Verb is default to Active voice, the Mood feature is default to Indicative mood, and the Verb form feature is default to First form. ","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"token3 = select(crpsdata.data, :features)[27]","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"token3 is a Verb with no Mood and Verb form features stated. However, parsing this will automatically add the default values of the said features as shown below:","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"mfeat3 = parse(Features, token3)\n@desc mfeat3","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"Another example where the Voice feature of the Verb is implied:","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"token4 = select(crpsdata.data, :features)[27]\nmfeat4 = parse(Features, token4)\n@desc mfeat4","category":"page"},{"location":"man/morphological_features/#POS-Abstract-Types","page":"Morphological Features","title":"POS Abstract Types","text":"","category":"section"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"The table below contains the complete list of the Part of Speech with its corresponding types. As shown in the table below, each part of speech has a corresponding parent type, which is a superset type in the Type Hierarchy. This is useful for grouping. For example, instead of using || (or) in checking for all tokens that are either FirstPerson, SecondPerson, or ThirdPerson, the parent type AbstractPerson can be used.","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"# without using parent type\nfunction allpersons(t)\n    is1st = isfeature(parse(Features, t.features), FirstPerson)\n    is2nd = isfeature(parse(Features, t.features), SecondPerson)\n    is3rd = isfeature(parse(Features, t.features), ThirdPerson)\n    \n    return is1st || is2nd || is3rd\nend\ntbl1 = filter(allpersons, crpsdata.data);\nselect(tbl1, (:form, :features))\n# using parent type\ntbl2 = filter(t -> isfeature(parse(Features, t.features), AbstractPerson), crpsdata.data);\nselect(tbl2, (:form, :features))\n\nsum(select(tbl1, :features) .!== select(tbl2, :features))","category":"page"},{"location":"man/morphological_features/#Part-of-Speech-Types","page":"Morphological Features","title":"Part of Speech Types","text":"","category":"section"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"<table>\n<thead><td>Type</td><td>Parent Type</td><td>Tag</td><td>Description</td><td>Arabic Name</td></thead>\n<tr><td><code> Noun</code></td><td><code>AbstractNoun</code></td><td><code>Symbol(\"N\")</code></td><td>Noun</td><td style=\"text-align:right !important\">اسم</td></tr>\n<tr><td><code> ProperNoun</code></td><td><code>AbstractNoun</code></td><td><code>Symbol(\"PN\")</code></td><td>Proper noun</td><td style=\"text-align:right !important\">اسم علم</td></tr>\n\n<tr><td><code> Adjective</code></td><td><code>AbstractDerivedNominal</code></td><td><code>Symbol(\"ADJ\")</code></td><td>Adjective</td><td style=\"text-align:right !important\">صفة</td></tr>\n<tr><td><code> ImperativeVerbalNoun</code></td><td><code>AbstractDerivedNominal</code></td><td><code>Symbol(\"IMPN\")</code></td><td>Imperative verbal noun</td><td style=\"text-align:right !important\">اسم فعل أمر</td></tr>\n\n<tr><td><code> Personal</code></td><td><code>AbstractPronoun</code></td><td><code>Symbol(\"PRON\")</code></td><td>Personal pronoun</td><td style=\"text-align:right !important\">ضمير</td></tr>\n<tr><td><code> Demonstrative</code></td><td><code>AbstractPronoun</code></td><td><code>Symbol(\"DEM\")</code></td><td>Demonstrative pronoun</td><td style=\"text-align:right !important\">اسم اشارة</td></tr>\n<tr><td><code> Relative</code></td><td><code>AbstractPronoun</code></td><td><code>Symbol(\"REL\")</code></td><td>Relative pronoun</td><td style=\"text-align:right !important\">اسم موصول</td></tr>\n\n<tr><td><code> Time</code></td><td><code>AbstractAdverb</code></td><td><code>Symbol(\"T\")</code></td><td>Time adverb</td><td style=\"text-align:right !important\">ظرف زمان</td></tr>\n<tr><td><code> Location</code></td><td><code>AbstractAdverb</code></td><td><code>Symbol(\"LOC\")</code></td><td>Location adverb</td><td style=\"text-align:right !important\">ظرف مكان</td></tr>\n\n<tr><td><code> Preposition</code></td><td><code>AbstractPreposition</code></td><td><code>Symbol(\"P\")</code></td><td>Preposition</td><td style=\"text-align:right !important\">حرف جر</td></tr>\n\n<tr><td><code> EmphaticLam</code></td><td><code>AbstractPrefix</code></td><td><code>Symbol(\"EMPH\")</code></td><td>Emphatic lam prefix</td><td style=\"text-align:right !important\">لام التوكيد</td></tr>\n<tr><td><code> ImperativeLam</code></td><td><code>AbstractPrefix</code></td><td><code>Symbol(\"IMPV\")</code></td><td>Imperative lam prefix</td><td style=\"text-align:right !important\">لام الامر</td></tr>\n<tr><td><code> PurposeLam</code></td><td><code>AbstractPrefix</code></td><td><code>Symbol(\"PRP\")</code></td><td>Purpose lam prefix</td><td style=\"text-align:right !important\">لام التعليل</td></tr>\n<tr><td><code> EmphaticNun</code></td><td><code>AbstractPrefix</code></td><td><code>Symbol(\"+n:EMPH\")</code></td><td>Emphatic lam prefix</td><td style=\"text-align:right !important\">لام التوكيد</td></tr>\n\n<tr><td><code> Coordinating</code></td><td><code>AbstractConjunction</code></td><td><code>Symbol(\"CONJ\")</code></td><td>Coordinating conjunction</td><td style=\"text-align:right !important\">حرف عطف</td></tr>\n<tr><td><code> Subordinating</code></td><td><code>AbstractConjunction</code></td><td><code>Symbol(\"SUB\")</code></td><td>Subordinating particle</td><td style=\"text-align:right !important\">حرف مصدري</td></tr>\n\n<tr><td><code> Accusative</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"ACC\")</code></td><td>Accusative particle</td><td style=\"text-align:right !important\">حرف نصب</td></tr>\n<tr><td><code> Amendment</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"AMD\")</code></td><td>Amendment particle</td><td style=\"text-align:right !important\">حرف استدراك</td></tr>\n<tr><td><code> Answer</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"ANS\")</code></td><td>Answer particle</td><td style=\"text-align:right !important\">حرف جواب</td></tr>\n<tr><td><code> Aversion</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"AVR\")</code></td><td>Aversion particle</td><td style=\"text-align:right !important\">حرف ردع</td></tr>\n<tr><td><code> Cause</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"CAUS\")</code></td><td>Particle of cause</td><td style=\"text-align:right !important\">حرف سببية</td></tr>\n<tr><td><code> Certainty</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"CERT\")</code></td><td>Particle of certainty</td><td style=\"text-align:right !important\">حرف تحقيق</td></tr>\n<tr><td><code> Circumstantial</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"CIRC\")</code></td><td>Circumstantial particle</td><td style=\"text-align:right !important\">حرف حال</td></tr>\n<tr><td><code> Comitative</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"COM\")</code></td><td>Comitative particle</td><td style=\"text-align:right !important\">واو المعية</td></tr>\n<tr><td><code> Conditional</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"COND\")</code></td><td>Conditional particle</td><td style=\"text-align:right !important\">حرف شرط</td></tr>\n<tr><td><code> Equalization</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"EQ\")</code></td><td>Equalization particle</td><td style=\"text-align:right !important\">حرف تسوية</td></tr>\n<tr><td><code> Exhortation</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"EXH\")</code></td><td>Exhortation particle</td><td style=\"text-align:right !important\">حرف تحضيض</td></tr>\n<tr><td><code> Explanation</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"EXL\")</code></td><td>Explanation particle</td><td style=\"text-align:right !important\">حرف تفصيل</td></tr>\n<tr><td><code> Exceptive</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"EXP\")</code></td><td>Exceptive particle</td><td style=\"text-align:right !important\">أداة استثناء</td></tr>\n<tr><td><code> Future</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"FUT\")</code></td><td>Future particle</td><td style=\"text-align:right !important\">حرف استقبال</td></tr>\n<tr><td><code> Inceptive</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"INC\")</code></td><td>Inceptive particle</td><td style=\"text-align:right !important\">حرف ابتداء</td></tr>\n<tr><td><code> Interpretation</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"INT\")</code></td><td>Inceptive particle</td><td style=\"text-align:right !important\">حرف تفسير</td></tr>\n<tr><td><code> Interogative</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"INTG\")</code></td><td>Interogative particle</td><td style=\"text-align:right !important\">حرف استفهام</td></tr>\n<tr><td><code> Negative</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"NEG\")</code></td><td>Negative particle</td><td style=\"text-align:right !important\">حرف نفي</td></tr>\n<tr><td><code> Preventive</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"PREV\")</code></td><td>Preventive particle</td><td style=\"text-align:right !important\">حرف كاف</td></tr>\n<tr><td><code> Prohibition</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"PRO\")</code></td><td>Prohibition particle</td><td style=\"text-align:right !important\">حرف نهي</td></tr>\n<tr><td><code> Resumption</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"REM\")</code></td><td>Resumption particle</td><td style=\"text-align:right !important\"حرف استئنافية</td></tr>\n<tr><td><code> Restriction</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"RES\")</code></td><td>Restriction particle</td><td style=\"text-align:right !important\">أداة حصر</td></tr>\n<tr><td><code> Retraction</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"RET\")</code></td><td>Retraction particle</td><td style=\"text-align:right !important\">حرف اضراب</td></tr>\n<tr><td><code> Result</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"RSLT\")</code></td><td>Result particle</td><td style=\"text-align:right !important\">حرف واقع في جواب الشرط</td></tr>\n<tr><td><code> Supplemental</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"SUP\")</code></td><td>Suplemental particle</td><td style=\"text-align:right !important\">حرف زائد</td></tr>\n<tr><td><code> Surprise</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"SUR\")</code></td><td>Surprise particle</td><td style=\"text-align:right !important\">حرف فجاءة</td></tr>\n<tr><td><code> Vocative</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"VOC\")</code></td><td>Vocative particle</td><td style=\"text-align:right !important\">حرف نداء</td></tr>\n\n<tr><td><code> DisconnectedLetters</code></td><td><code>AbstractDisLetters</code></td><td><code>Symbol(\"INL\")</code></td><td>Quranic initials</td><td style=\"text-align:right !important\">حروف مقطعة</td></tr>\n\n<tr><td><code> FirstPerson</code></td><td><code>AbstractPerson</code></td><td><code>Symbol(\"1\")</code></td><td>First person</td><td style=\"text-align:right !important\">الاسناد</td></tr>\n<tr><td><code> SecondPerson</code></td><td><code>AbstractPerson</code></td><td><code>Symbol(\"2\")</code></td><td>Second person</td><td style=\"text-align:right !important\">الاسناد</td></tr>\n<tr><td><code> ThirdPerson</code></td><td><code>AbstractPerson</code></td><td><code>Symbol(\"3\")</code></td><td>Third person</td><td style=\"text-align:right !important\">الاسناد</td></tr>\n\n<tr><td><code> Masculine</code></td><td><code>AbstractGender</code></td><td><code>Symbol(\"M\")</code></td><td>Masculine</td><td style=\"text-align:right !important\">الجنس</td></tr>\n<tr><td><code> Feminine</code></td><td><code>AbstractGender</code></td><td><code>Symbol(\"F\")</code></td><td>Feminine</td><td style=\"text-align:right !important\">الجنس</td></tr>\n\n<tr><td><code> Singular</code></td><td><code>AbstractNumber</code></td><td><code>Symbol(\"S\")</code></td><td>Singular</td><td style=\"text-align:right !important\">العدد</td></tr>\n<tr><td><code> Dual</code></td><td><code>AbstractNumber</code></td><td><code>Symbol(\"D\")</code></td><td>Dual</td><td style=\"text-align:right !important\">العدد</td></tr>\n<tr><td><code> Plural</code></td><td><code>AbstractNumber</code></td><td><code>Symbol(\"P\")</code></td><td>Plural</td><td style=\"text-align:right !important\">العدد</td></tr>\n\n<tr><td><code> Verb</code></td><td><code>AbstractPartOfSpeech</code></td><td><code>Symbol(\"V\")</code></td><td>Verb</td><td style=\"text-align:right !important\">فعل</td></tr>\n<tr><td><code> Perfect</code></td><td><code>AbstractAspect</code></td><td><code>Symbol(\"PERF\")</code></td><td>Perfect verb</td><td style=\"text-align:right !important\">فعل ماض</td></tr>\n<tr><td><code> Imperfect</code></td><td><code>AbstractAspect</code></td><td><code>Symbol(\"IMPF\")</code></td><td>Imperfect verb</td><td style=\"text-align:right !important\">فعل مضارع</td></tr>\n<tr><td><code> Imperative</code></td><td><code>AbstractAspect</code></td><td><code>Symbol(\"IMPV\")</code></td><td>Imperative verb</td><td style=\"text-align:right !important\">فعل أمر</td></tr>\n<tr><td><code> Indicative</code></td><td><code>AbstractMood</code></td><td><code>Symbol(\"IND\")</code></td><td>Indicative mood (default)</td><td style=\"text-align:right !important\">مرفوع</td></tr>\n<tr><td><code> Subjunctive</code></td><td><code>AbstractMood</code></td><td><code>Symbol(\"SUBJ\")</code></td><td>Subjunctive mood</td><td style=\"text-align:right !important\">منصوب</td></tr>\n<tr><td><code> Jussive</code></td><td><code>AbstractMood</code></td><td><code>Symbol(\"JUS\")</code></td><td>Jussive mood</td><td style=\"text-align:right !important\">مجزوم</td></tr>\n<tr><td><code> Active</code></td><td><code>AbstractVoice</code></td><td><code>Symbol(\"ACT\")</code></td><td>Active voice (default)</td><td style=\"text-align:right !important\">مبني للمعلوم</td></tr>\n<tr><td><code> Passive</code></td><td><code>AbstractVoice</code></td><td><code>Symbol(\"PASS\")</code></td><td>Passive voice</td><td style=\"text-align:right !important\">مبني للمجهول</td></tr>\n\n<tr><td><code> VerbFormI</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"I\")</code></td><td>First verb form (default)</td><td style=\"text-align:right !important\">فعل</td></tr>\n<tr><td><code> VerbFormII</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"II\")</code></td><td>Second verb form</td><td style=\"text-align:right !important\">فعل</td></tr>\n<tr><td><code> VerbFormIII</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"III\")</code></td><td>Third verb form</td><td style=\"text-align:right !important\">فعل</td></tr>\n<tr><td><code> VerbFormIV</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"IV\")</code></td><td>Fourth verb form</td><td style=\"text-align:right !important\">فعل</td></tr>\n<tr><td><code> VerbFormV</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"V\")</code></td><td>Fifth verb form</td><td style=\"text-align:right !important\">فعل</td></tr>\n<tr><td><code> VerbFormVI</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"VI\")</code></td><td>Sixth verb form</td><td style=\"text-align:right !important\">فعل</td></tr>\n<tr><td><code> VerbFormVII</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"VII\")</code></td><td>Seventh verb form</td><td style=\"text-align:right !important\">فعل</td></tr>\n<tr><td><code> VerbFormVIII</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"VIII\")</code></td><td>Eighth verb form</td><td style=\"text-align:right !important\">فعل</td></tr>\n<tr><td><code> VerbFormIX</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"IX\")</code></td><td>Ninth verb form</td><td style=\"text-align:right !important\">فعل</td></tr>\n<tr><td><code> VerbFormX</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"X\")</code></td><td>Tenth verb form</td><td style=\"text-align:right !important\">فعل</td></tr>\n<tr><td><code> VerbFormXI</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"XI\")</code></td><td>Eleventh verb form</td><td style=\"text-align:right !important\">فعل</td></tr>\n<tr><td><code> VerbFormXII</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"XII\")</code></td><td>Twelfth verb form</td><td style=\"text-align:right !important\">فعل</td></tr>\n\n<tr><td><code> ActiveParticle</code></td><td><code>AbstractDerivedNoun</code></td><td><code>Symbol(\"ACT PCPL\")</code></td><td>Active particle</td><td style=\"text-align:right !important\">اسم فاعل</td></tr>\n<tr><td><code> PassiveParticle</code></td><td><code>AbstractDerivedNoun</code></td><td><code>Symbol(\"PASS PCPL\")</code></td><td>Passive particle</td><td style=\"text-align:right !important\">اسم مفعول</td></tr>\n<tr><td><code> VerbalNoun</code></td><td><code>AbstractDerivedNoun</code></td><td><code>Symbol(\"VN\")</code></td><td>Verbal noun</td><td style=\"text-align:right !important\">مصدر</td></tr>\n\n<tr><td><code> Definite</code></td><td><code>AbstractState</code></td><td><code>Symbol(\"DEF\")</code></td><td>Definite state</td><td style=\"text-align:right !important\">معرفة</td></tr>\n<tr><td><code> Indefinite</code></td><td><code>AbstractState</code></td><td><code>Symbol(\"INDEF\")</code></td><td>Indefinite state</td><td style=\"text-align:right !important\">نكرة</td></tr>\n<tr><td><code> Nominative</code></td><td><code>AbstractCase</code></td><td><code>Symbol(\"NOM\")</code></td><td>Nominative case</td><td style=\"text-align:right !important\">مرفوع</td></tr>\n<tr><td><code> Genetive</code></td><td><code>AbstractCase</code></td><td><code>Symbol(\"GEN\")</code></td><td>Genetive case</td><td style=\"text-align:right !important\">مجرور</td></tr>\n</table>","category":"page"},{"location":"man/camel/tagger/#Parts-of-Speech-Tagger","page":"POS Tagging","title":"Parts of Speech Tagger","text":"","category":"section"},{"location":"man/camel/tagger/","page":"POS Tagging","title":"POS Tagging","text":"In this section, we are going to use CAMeL Tools for Parts of Speech tagging. To start with, load the data as follows:","category":"page"},{"location":"man/camel/tagger/","page":"POS Tagging","title":"POS Tagging","text":"using Pkg\nPkg.add(\"JuliaDB\")\nPkg.add(\"PrettyTables\")","category":"page"},{"location":"man/camel/tagger/","page":"POS Tagging","title":"POS Tagging","text":"using QuranTree\ncrps, tnzl = load(QuranData());\ncrpsdata = table(crps);\ntnzldata = table(tnzl);","category":"page"},{"location":"man/camel/tagger/","page":"POS Tagging","title":"POS Tagging","text":"For this task, we are going to use the second verse of Chapter 1.","category":"page"},{"location":"man/camel/tagger/","page":"POS Tagging","title":"POS Tagging","text":"avrs1 = verses(tnzldata[1][2])[1]","category":"page"},{"location":"man/camel/tagger/","page":"POS Tagging","title":"POS Tagging","text":"The will load the model:","category":"page"},{"location":"man/camel/tagger/","page":"POS Tagging","title":"POS Tagging","text":"using Pkg\nPkg.add(\"PyCall\")\nusing PyCall\n@pyimport camel_tools.disambig.mle as camel_disambig\n@pyimport camel_tools.tagger.default as camel_tagger\nmled = camel_disambig.MLEDisambiguator.pretrained()","category":"page"},{"location":"man/camel/tagger/#Tagging","page":"POS Tagging","title":"Tagging","text":"","category":"section"},{"location":"man/camel/tagger/","page":"POS Tagging","title":"POS Tagging","text":"From the model, we instantiate the DefaultTagger and finally call the tag method to tag the token:","category":"page"},{"location":"man/camel/tagger/","page":"POS Tagging","title":"POS Tagging","text":"tagger = camel_tagger.DefaultTagger(mled, \"pos\")\ntagger.tag(split(avrs1))","category":"page"},{"location":"man/getting_started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"CurrentModule = QuranTree\nDocTestSetup = quote\n    using QuranTree\nend","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"There are two datasets included in the library, namely the Quranic Arabic Corpus and the Tanzil data. To load, simply run the following:","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"using QuranTree\n\ndata = QuranData()\ncrps, tnzl = load(data);","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"The QuranData() is a struct containing the default file path of the data. The load function returns a tuple for both the Quranic Corpus and the Tanzil Data. The loaded data is encoded in a immutable (read-only) array, so users cannot change it. This is specified in the type of the object as shown below:","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"crps\ntnzl","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"In order to parse these raw data, the table function is used:","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"crpsdata = table(crps);\ntnzldata = table(tnzl);\ncrpsdata\ntnzldata","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"The resulting tables are of type CorpusData and TanzilData, respectively, and are encoded on top of JuliaDB.jl's IndexedTable, which can be accessed by simply calling the macro @data (for example, @data crpsdata or crpsdata.data). One thing to note, however, is that JuliaDB.jl will only display the meta data of the columns if the width of the table is wider than the width of the output pane, for example in case of the crpsdata above, the table contains more columns (and thus wider) compared to tnzldata. To display the data of any wide table, we recommend PrettyTables.jl:","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"using Pkg\nPkg.add(\"PrettyTables\")","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"using PrettyTables\n@ptconf vcrop_mode=:middle tf=tf_compact\n@pt crpsdata","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"info: Note\nYou need to install PrettyTables.jl to successfully run the code. using Pkg\nPkg.add(\"PrettyTables\")","category":"page"},{"location":"man/getting_started/#Manipulating-the-Table","page":"Getting Started","title":"Manipulating the Table","text":"","category":"section"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"As mentioned above, the table is based on JuliaDB.jl's  IndexedTable. Therefore, any data manipulation is done through the JuliaDB.jl's APIs. To access the data, simply call the property with .data or using the macro @data:","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"crpstbl = @data crpsdata; # or crpsdata.data\ntnzltbl = @data tnzldata; # or tnzldata.data\ncrpstbl\ntnzltbl","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"Note that, crpsdata and crpstbl have different type (as in the case of tnzldata and tnzltbl) as shown below:","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"typeof(crpsdata)\ntypeof(crpstbl)","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"From here, any data manipulation is done using JuliaDB.jl's APIs. For example, the following will select the feature column of the crpstbl:","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"using Pkg\nPkg.add(\"JuliaDB\")","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"using JuliaDB\n\nselect(crpstbl, :features)\n\n# or equivalent to\nselect(crpsdata.data, :features)","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"info: Note\nYou need to install JuliaDB.jl to successfully run the code. using Pkg\nPkg.add(\"JuliaDB\")","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"To filter tokens that are Prefixed features, the Base.jl's occursin can be used:","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"filter(t -> occursin(r\"^PREFIX\", t.features), crpstbl)\n\n# or equivalent to\nfilter(t -> occursin(r\"^PREFIX\", t.features), crpsdata.data)","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"The main point here is that, any data manipulation on the CorpusTable and TanzilData is done through JuliaDB.jl's APIs.","category":"page"},{"location":"#QuranTree.jl-Documentation","page":"Home","title":"QuranTree.jl Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = QuranTree\nDocTestSetup = quote\n    using QuranTree\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"A Julia package for working with the Qur'an (Islam's Holy Book), computationally. QuranTree.jl is based on The Quranic Arabic Corpus by Kais Dukes of University of Leeds, and is aimed at offerring a high-level API alternative to the Java package, JQuranTree. ","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The following are the features of the package:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Indexing\nIntuitive indexing for Chapters, Verses, Words and Parts\nTransliteration\nBuckwalter as default\nFunctionality for creating custom transliterator\nUpdate transliteration in 1 line of code\nComplete type for all Morphological Features and Part of Speech\nSeemless transition between Arabic and Buckwalter (or custom transliteration)\nSimple Encoding (refer here)\nCharacter Normalization\nFor both Arabic and Buckwalter (or custom transliteration)\nCharacter Dediacritization\nFor both Arabic and Buckwalter (or custom transliteration)\nUtilities\nFunction for detailed description of the Morphological Features.\nModularity and Type-Safe\nCan easily integrate with other Julia packages, thanks to Julia's Multiple Dispatch\nCan easily integrate with Python (using PyCall.jl) and R (Using RCall.jl) for packages that are not yet in Julia\nLike JQuranTree, QuranTree.jl is type-safe\nOthers\nSupports Tanzil data\nRead-only array for raw datasets (Corpus and Tanzil)","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install the package, run the following:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg\njulia> Pkg.add(\"QuranTree\")","category":"page"},{"location":"#Requirements","page":"Home","title":"Requirements","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Julia >= 1.0\nJuliaDB.jl >= 0.13.0\nPrettyTables.jl >= 0.10.1","category":"page"},{"location":"man/nlp/topic_modeling/#Topic-Modeling","page":"Topic Modeling","title":"Topic Modeling","text":"","category":"section"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"Another application of Natural Language Processing is Topic Modeling, and in this section, we are going to extract the topics for Chapter 18 (The Cave). To do this, again TextAnalysis.jl (Julia's leading NLP library) is used. The model for this task will be Latent Dirichlet Allocation (LDA), but Latent Semantic Analysis (LSA) is also available in TextAnalysis.jl. To start with, load the data as follows:","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"using Pkg\nPkg.add(\"JuliaDB\")\nPkg.add(\"PrettyTables\")\nPkg.add(\"TextAnalysis\")","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"using JuliaDB\nusing PrettyTables\nusing QuranTree\nusing TextAnalysis\n@ptconf vcrop_mode=:middle tf=tf_compact\n\ncrps, tnzl = QuranData() |> load;\ncrpsdata = table(crps)","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"info: Note\nYou need to install JuliaDB.jl and PrettyTables.jl to successfully run the code. using Pkg\nPkg.add(\"JuliaDB\")\nPkg.add(\"PrettyTables\")","category":"page"},{"location":"man/nlp/topic_modeling/#Data-Preprocessing","page":"Topic Modeling","title":"Data Preprocessing","text":"","category":"section"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"The first data processing will be the removal of all Disconnected Letters like الٓمٓ ,الٓمٓصٓ, among others. This is done as follows:","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"function preprocess(s::String)\n    feat = parse(Features, s)\n    disletters = isfeature(feat, AbstractDisLetters)\n    prepositions = isfeature(feat, AbstractPreposition)\n    particles = isfeature(feat, AbstractParticle)\n    conjunctions = isfeature(feat, AbstractConjunction)\n    pronouns = isfeature(feat, AbstractPronoun)\n    adverbs = isfeature(feat, AbstractAdverb)\n\n    return !disletters && !prepositions && !particles && !conjunctions && !pronouns && !adverbs\nend\n\ncrpstbl = filter(t -> preprocess(t.features), crpsdata[18].data)","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"Next, we create a copy of the above data so we have the original state, and use the copy to do further data processing.","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"crpsnew = deepcopy(crpstbl)\nfeats = select(crpsnew, :features)\nfeats = parse.(Features, feats)","category":"page"},{"location":"man/nlp/topic_modeling/#Lemmatization","page":"Topic Modeling","title":"Lemmatization","text":"","category":"section"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"Using the above parsed features, we then convert the form of the tokens into its lemma. This is useful for addressing minimal variations due to inflection.","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"lemmas = lemma.(feats)\nforms1 = select(crpsnew, :form)\nforms1[.!ismissing.(lemmas)] = lemmas[.!ismissing.(lemmas)]","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"tip: Tips\nWe can also use the Root features instead, which is done by simply replacing lemma.(feats) with root.(feats). ","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"We now put back the new form to the corpus:","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"crpsnew = transform(crpsnew, :form => forms1)\ncrpsnew = CorpusData(crpsnew)","category":"page"},{"location":"man/nlp/topic_modeling/#Tokenization","page":"Topic Modeling","title":"Tokenization","text":"","category":"section"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"We want to summarize the Qur'an at the verse level. Thus, the token would be the verses of the corpus. From these verses, we further clean it by dediacritization and normalization of the characters:","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"lem_vrs = verses(crpsnew)\nvrs = QuranTree.normalize.(dediac.(lem_vrs))","category":"page"},{"location":"man/nlp/topic_modeling/#Creating-a-TextAnalysis-Corpus","page":"Topic Modeling","title":"Creating a TextAnalysis Corpus","text":"","category":"section"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"To make use of the TextAnalysis.jl's APIs, we need to encode the processed Quranic Corpus to TextAnalysis.jl's Corpus. In this case, we will create a StringDocument of the verses.","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"crps1 = Corpus(StringDocument.(vrs))","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"We then update the lexicon and inverse index for efficient indexing of the corpus.","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"update_lexicon!(crps1)\nupdate_inverse_index!(crps1)","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"Next, we create a Document Term Matrix, which will have rows of verses and columns of words describing the verses.","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"m1 = DocumentTermMatrix(crps1)","category":"page"},{"location":"man/nlp/topic_modeling/#Latent-Dirichlet-Allocation","page":"Topic Modeling","title":"Latent Dirichlet Allocation","text":"","category":"section"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"Finally, run LDA as follows:","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"k = 3          # number of topics\niter = 1000    # number of gibbs sampling iterations\nalpha = 0.1    # hyperparameter\nbeta = 0.1     # hyperparameter\nϕ, θ = lda(m1, k, iter, alpha, beta)","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"Extract the topic for first cluster:","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"ntopics = 10\ncluster_topics = Matrix(undef, ntopics, k);\nfor i = 1:k\n    topics_idcs = sortperm(ϕ[i, :], rev=true)\n    cluster_topics[:, i] = arabic.(m1.terms[topics_idcs][1:ntopics])\nend\n@pt cluster_topics","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"Tabulating this propery would give us the following","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"Pkg.add(\"DataFrames\")\nPkg.add(\"Latexify\")\nusing DataFrames: DataFrame\nusing Latexify\n\nmdtable(convert(DataFrame, cluster_topics), latex=false)","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"As you may have noticed, the result is not good and this is mainly due to data processing. Readers are encourage to improve this for their own use. This section, however, demonstrated how TextAnalysis.jl's LDA can be used for Topic Modeling the QuranTree.jl's corpus.","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"Finally, the following will extract the topic for each verse:","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"vrs_topics = []\nfor i = 1:dtm(m1).m\n    push!(vrs_topics, sortperm(θ[:, i], rev=true)[1])\nend\n@pt vrs_topics","category":"page"}]
}
