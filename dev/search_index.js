var documenterSearchIndex = {"docs":
[{"location":"man/transliteration/#Transliteration","page":"Transliteration","title":"Transliteration","text":"","category":"section"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"QuranTree.jl uses Buckwalter as the default transliteration, which is based on the Quranic Arabic Corpus encoding. The transliteration is written as encode function, for example, the following will transliterate the first verse of chapter 1:","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"using QuranTree\n\ncrps, tnzl = load(QuranData());\ncrpsdata = table(crps);\ntnzldata = table(tnzl);\nvrs = verses(tnzldata[1][1])\nencode(vrs[1])","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"The verses function above is used to extract the corresponding verse from the Qur'an data of type AbstractQuran.","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"tip: Tips\nverses by default only returns the verse form of the table, but one can also extract the corresponding verse number instead of the form, example:verses(tnzldata, number=true, start_end=true)\nverses(tnzldata, number=true, start_end=false)","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"tip: Tips\nTo extract the words of the corpus, use the function words instead.","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"The function verses always returns an Array, and hence encoding multiple verses is possible using Julia's . (dot) broadcasting operation. For example, the following will transliterate all verses of chapter 114:","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"vrs = verses(tnzldata[114])\nencode.(vrs)","category":"page"},{"location":"man/transliteration/#Decoding","page":"Transliteration","title":"Decoding","text":"","category":"section"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"To decode the transliterated back to Arabic form, use the arabic function. For example, the following will decode to Arabic the transliterated verses of chapter 114 above:","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"arabic.(encode.(vrs))","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"Or using the CorpusData, ","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"vrs = verses(crpsdata[114])\navrs = arabic.(vrs)","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"tip: Tips\n. (dot) broadcasting is only used for arrays. So, for String input (not arrays of String), arabic(...) (without dot) is used. Example,arabic(vrs[1])","category":"page"},{"location":"man/transliteration/#Custom-Transliteration","page":"Transliteration","title":"Custom Transliteration","text":"","category":"section"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"Creating a custom transliteration requires only an input encoding in the form of a dictionary (Dict). For example, QuranTree.jl's Buckwalter's encoding is provided by the constant BW_ENCODING as shown below:","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"BW_ENCODING","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"Suppose, we want to create a new transliteration by simply reversing the values of the dictionary. This is done as follows:","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"old_keys = collect(keys(BW_ENCODING));\nnew_vals = reverse(collect(values(BW_ENCODING)));\nmy_encoder = Dict(old_keys .=> new_vals)\n@transliterator my_encoder \"MyEncoder\"","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"The macro @transliterator is used for updating the transliteration, and it takes two inputs: the dictionary (my_encoder) and the name of the encoding (\"MyEncoder\"). Using this new encoding, the avrs above will have a new transliteration:","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"new_vrs = encode.(avrs);\nnew_vrs","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"To confirm this new transliteration, decoding it back to arabic should generate the proper results:","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"arabic.(new_vrs)","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"To reset the transliteration, simply run the following:","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"@transliterator :default","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"This will fallback to the Buckwalter transliteration, as shown below:","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"bw_vrs = encode.(avrs);\nbw_vrs\narabic.(bw_vrs)","category":"page"},{"location":"man/transliteration/#Simple-Encoding","page":"Transliteration","title":"Simple Encoding","text":"","category":"section"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"Another feature supported in QuranTree.jl is the Simple Encoding. For example, the following will (Simple) encode the first verse of chapter 1:","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"vrs = verses(tnzldata[1][1])\nencode(SimpleEncoder, vrs[1])","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"tip: Tips\nFor verses 1 to 4 of chapter 114, use the broadcasting operator:vrs = verses(tnzldata[114][1:4])\nencode.(SimpleEncoder, vrs)","category":"page"},{"location":"man/indexing/#Indexing-the-Corpus","page":"Indexing","title":"Indexing the Corpus","text":"","category":"section"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"QuranTree.jl offers a intuitive indexing for both Quranic Arabic Corpus and the Tanzil Data, specifically it follows the following usage:","category":"page"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"# for Quranic Arabic Corpus\ncrpsdata[<chapters>][<verses>][<words>][<parts>]\n\n# for Tanzil Data\ntnzldata[<chapters>][<verses>]","category":"page"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"The following are the options supported for each index:","category":"page"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"Chapters:\nInt64 - crpsdata[1] (extracts chapter 1)\nUnitRange - crpsdata[15:24] (extracts chapters 15 to 24)\nArray{Int64,1} - crpsdata[[3,9,10]] (extracts chapters 3, 9 and 10)\nend (special) - crpsdata[end-3:end] (extracts chapters 111 to 114).\nVerses:\nInt64 - crpsdata[1][1] (extracts verse 1 of chapter 1)\nUnitRange - crpsdata[2][15:24] (extracts verses 15 to 24 of chapter 2)\nArray{Int64,1} - crpsdata[10][[3,9,10]] (extracts verses 3, 9 and 10 of chapter 10)\nWords: (not applicable for TanzilData, only CorpusData)\nInt64 - crpsdata[1][1][1] (extracts word 1 of verse 1 of chapter 1)\nUnitRange - crpsdata[2][8][1:3] (extracts words 1 to 3 of verse 8 of chapter 2)\nArray{Int64,1} - crpsdata[2][8][[1,3]] (extracts words 1 and 3 of verse 8 of chapter 2)\nParts: (not applicable for TanzilData, only CorpusData)\nInt64 - crpsdata[1][1][1][1] (extracts part 1 of word 1 of verse 1 of chapter 1)\nUnitRange - crpsdata[2][9][1][1:2] (extracts part 1 to part 2 of word 1 of verse 9 of chapter 2)\nArray{Int64,1} - crpsdata[2][9][1][[1,2]] (extracts part 1 and part 2 of word 1 of verse 9 of chapter 2)","category":"page"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"As an example, the following will extract verse 9 of chapter 2 in both TanzilData and CorpusData:","category":"page"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"using QuranTree\n\ndata = QuranData();\ncrps, tnzl = load(data);\ncrpsdata = table(crps);\ntnzldata = table(tnzl);\ncrpsdata[2][9]\ntnzldata[2][9]","category":"page"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"As shown above, the output of the indexing contains label for the chapter name, both in Arabic and in English. Again, the output of the crpsdata[2][9] is not shown, since the width of the output is wider than the width of the output pane. So, PrettyTables.jl is used to view the table:","category":"page"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"using Pkg\nPkg.add(\"PrettyTables\")","category":"page"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"using PrettyTables\n@ptconf vcrop_mode=:middle tf=tf_compact\n@pt crpsdata[2][9]","category":"page"},{"location":"man/indexing/#Combinations-of-Indices","page":"Indexing","title":"Combinations of Indices","text":"","category":"section"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"Combinations of these indices are also supported. For example, the following will extract chapters 111 to 114, each with verses 1 and 3:","category":"page"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"@pt crpsdata[111:114][[1,3]]\n@pt tnzldata[111:114][[1,3]] ","category":"page"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"info: Note\nSpecial indexing end is also applicable, for example crpsdata[111:114][[1,3]] is the same as crpsdata[end-3:end][[1,3]], and tnzldata[111:114][[1,3]] is equivalent to tnzldata[end-3:end][[1,3]].","category":"page"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"Another example, the following will extract part 1 of words 1 to 3 of the above CorpusData output:","category":"page"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"@pt crpsdata[111:114][[1,3]][1:3][1] ","category":"page"},{"location":"man/data_processing/#Data-Processing","page":"Data Processing","title":"Data Processing","text":"","category":"section"},{"location":"man/data_processing/","page":"Data Processing","title":"Data Processing","text":"The goal of having a Quranic corpus is to study it computationally. As such, special utilities for further data preprocessing are necessary. QuranTree.jl offers functions for processing Arabic texts. These include, character dediacritization and character normalization.","category":"page"},{"location":"man/data_processing/#Character-Dediacritization","page":"Data Processing","title":"Character Dediacritization","text":"","category":"section"},{"location":"man/data_processing/","page":"Data Processing","title":"Data Processing","text":"dediac works for both Arabic, Buckwalter and custom transliterations.","category":"page"},{"location":"man/data_processing/","page":"Data Processing","title":"Data Processing","text":"using QuranTree\n\ncrps, tnzl = load(QuranData());\ncrpsdata = table(crps);\ntnzldata = table(tnzl);\navrs = verses(tnzldata[1][1])[1]\ndediac(avrs)\nbvrs = verses(crpsdata[1][1])[1]\ndediac(bvrs)\ndediac(avrs) === arabic(dediac(bvrs))","category":"page"},{"location":"man/data_processing/","page":"Data Processing","title":"Data Processing","text":"Custom transliteration is also dediacritizable as shown below,","category":"page"},{"location":"man/data_processing/","page":"Data Processing","title":"Data Processing","text":"old_keys = collect(keys(BW_ENCODING));\nnew_vals = reverse(collect(values(BW_ENCODING)));\nmy_encoder = Dict(old_keys .=> new_vals);\n\n@transliterator my_encoder \"MyEncoder\"\nencode(avrs)\narabic(encode(avrs))\ndediac(encode(avrs))\narabic(dediac(encode(avrs)))","category":"page"},{"location":"man/data_processing/","page":"Data Processing","title":"Data Processing","text":"To reset the transliteration,","category":"page"},{"location":"man/data_processing/","page":"Data Processing","title":"Data Processing","text":"@transliterator :default\nencode(avrs)\ndediac(encode(avrs))","category":"page"},{"location":"man/data_processing/#Character-Normalization","page":"Data Processing","title":"Character Normalization","text":"","category":"section"},{"location":"man/data_processing/","page":"Data Processing","title":"Data Processing","text":"Normalization is done using the normalize function. It works for Arabic, Buckwalter and other custom transliterations. For example, the following normalizes the avrs above:","category":"page"},{"location":"man/data_processing/","page":"Data Processing","title":"Data Processing","text":"normalize(avrs)\nnormalize(dediac(avrs))\ndediac(normalize(avrs))\n# using pipe notation\navrs |> dediac |> normalize |> encode","category":"page"},{"location":"man/data_processing/","page":"Data Processing","title":"Data Processing","text":"Specific character can be normalized:","category":"page"},{"location":"man/data_processing/","page":"Data Processing","title":"Data Processing","text":"avrs1 = verses(tnzldata[2][4])[1]\nnormalize(avrs1, :alif_maddah)\nnormalize(avrs1, :alif_hamza_above)\nnormalize(avrs, [:alif_khanjareeya, :hamzat_wasl])","category":"page"},{"location":"man/data_processing/","page":"Data Processing","title":"Data Processing","text":"Or using the CorpusData instead of the TanzilData,","category":"page"},{"location":"man/data_processing/","page":"Data Processing","title":"Data Processing","text":"avrs2 = arabic(verses(crpsdata[2][15])[1])\nnormalize(avrs2, :ya_hamza_above)","category":"page"},{"location":"man/api/#API-References","page":"API","title":"API References","text":"","category":"section"},{"location":"man/api/","page":"API","title":"API","text":"Modules = [QuranTree]","category":"page"},{"location":"man/api/#QuranTree.Features","page":"API","title":"QuranTree.Features","text":"Features(data::String)\n\nConvert a string to morphological feature object.\n\n\n\n\n\n","category":"type"},{"location":"man/api/#QuranTree.Lemma","page":"API","title":"QuranTree.Lemma","text":"Lemma(data::String)\n\nConvert a string to a Lemma object.\n\n\n\n\n\n","category":"type"},{"location":"man/api/#QuranTree.Prefix","page":"API","title":"QuranTree.Prefix","text":"Prefix(data::Symbol, pos::AbstractPartOfSpeech)\n\nCreate a new Prefix object with data as the symbol of the morphological feature with pos as  the corresponding Part of Speech.\n\n\n\n\n\n","category":"type"},{"location":"man/api/#QuranTree.Root","page":"API","title":"QuranTree.Root","text":"Root(data::String)\n\nConvert a string to a Root object.\n\n\n\n\n\n","category":"type"},{"location":"man/api/#QuranTree.Special","page":"API","title":"QuranTree.Special","text":"Special(data::String)\n\nConvert a string to a Special object.\n\n\n\n\n\n","category":"type"},{"location":"man/api/#QuranTree.Stem","page":"API","title":"QuranTree.Stem","text":"Stem(data::Symbol, pos::AbstractPartOfSpeech)\n\nCreate a new Stem object with data as the symbol of the morphological feature with pos as  the corresponding Part of Speech.\n\n\n\n\n\n","category":"type"},{"location":"man/api/#QuranTree.Suffix","page":"API","title":"QuranTree.Suffix","text":"Suffix(data::Symbol, pos::AbstractPartOfSpeech)\n\nCreate a new Suffix object with data as the symbol of the morphological feature with pos as  the corresponding Part of Speech.\n\n\n\n\n\n","category":"type"},{"location":"man/api/#Base.parse-Tuple{Type{Features},AbstractString}","page":"API","title":"Base.parse","text":"parse(::Type{Features}, f::AbstractString)\n\nExtract the features of a morphological Feature object.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#Dagger.load-Tuple{QuranData}","page":"API","title":"Dagger.load","text":"load(data::QuranData)\n\nLoad the raw QuranData as a ReadOnlyArray for both Quranic Corpus and Tanzil Data.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#IndexedTables.table-Tuple{CorpusRaw}","page":"API","title":"IndexedTables.table","text":"table(crps::CorpusRaw)\n\nConvert the CorpusRaw read-only array into a tabularized CorpusData using IndexedTable.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#IndexedTables.table-Tuple{TanzilRaw}","page":"API","title":"IndexedTables.table","text":"table(tnzl::TanzilRaw)\n\nConvert the TanzilRaw read-only array into a tabularized TanzilData using IndexedTable.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.arabic-Tuple{String}","page":"API","title":"QuranTree.arabic","text":"arabic(s::String[, encoder::AbstractEncoder])\n\nEncode the String object into Arabic characters. Custom encoder generated from @transliterator can be provided, but default is Buckwalter.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.chapter_name","page":"API","title":"QuranTree.chapter_name","text":"chapter_name(quran::AbstractQuran, transliterate::Bool=false; lang::Symbol=:arabic)\n\nExtract the chapter name of the input quran, in either :arabic (default) or :english\n\n\n\n\n\n","category":"function"},{"location":"man/api/#QuranTree.dediac-Tuple{String}","page":"API","title":"QuranTree.dediac","text":"dediac(s::String)\n\nDediacritize the input String object.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.encode-Tuple{String}","page":"API","title":"QuranTree.encode","text":"encode(s::String)\n\nTransliterate the input String object using Buckwalter.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.encode-Tuple{Type{SimpleEncoder},String}","page":"API","title":"QuranTree.encode","text":"encode(::Type{SimpleEncoder}, s::String)\n\nEncode the input String object as SimpleEncoder.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.encode-Tuple{Union{Char, String},AbstractEncoder}","page":"API","title":"QuranTree.encode","text":"encode(s::Union{Char,String}, encoder::AbstractEncoder)\n\nTransliterate the input String object using a custom encoder. Custom encoder is generated using the @transliterator.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.isfeature-Tuple{AbstractFeature,Type{var\"#s13\"} where var\"#s13\"<:AbstractFeature}","page":"API","title":"QuranTree.isfeature","text":"isfeature(feat::Features, pos::Type{<:AbstractFeature})\n\nCheck if the morphological Feature object is a type of pos.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.lemma-Tuple{AbstractFeature}","page":"API","title":"QuranTree.lemma","text":"lemma(feat::AbstractFeature)\n\nExtract the lemma of the feature.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.normalize-Tuple{String,Array{Symbol,1}}","page":"API","title":"QuranTree.normalize","text":"normalize(s::String, chars::Array{Symbol,1})\n\nNormalize a specific Arabic or Buckwalter String character/s (chars).\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.normalize-Tuple{String,Symbol}","page":"API","title":"QuranTree.normalize","text":"normalize(s::String, char::Symbol)\n\nNormalize a specific Arabic or Buckwalter String character (chars).\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.normalize-Tuple{String}","page":"API","title":"QuranTree.normalize","text":"normalize(s::String)\n\nNormalize a Arabic or Buckwalter String characters.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.root-Tuple{AbstractFeature}","page":"API","title":"QuranTree.root","text":"root(feat::AbstractFeature)\n\nExtract the root of the feature.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.special-Tuple{AbstractFeature}","page":"API","title":"QuranTree.special","text":"lemma(feat::AbstractFeature)\n\nExtract the special feature of the token.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.verses-Tuple{AbstractQuran}","page":"API","title":"QuranTree.verses","text":"verses(quran::AbstractQuran; number=false, start_end=true)\n\nExtract the verses of a AbstractQuran object.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.verses-Tuple{IndexedTables.IndexedTable,Int64,Int64}","page":"API","title":"QuranTree.verses","text":"verses(data::IndexedTable[, a::Int64[, b::Int64]]; number=false, start_end=true)\n\nExtract the verses of a IndexedTable object from row a to row b.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.verses-Tuple{TanzilData}","page":"API","title":"QuranTree.verses","text":"verses(quran::TanzilData)\n\nExtract the verses of a TanzilData object.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.words-Tuple{AbstractQuran}","page":"API","title":"QuranTree.words","text":"words(quran::AbstractQuran)\n\nExtract words of the input quran.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.@data-Tuple{Any}","page":"API","title":"QuranTree.@data","text":"@data(expr)\n\nExtract the data property object.\n\n\n\n\n\n","category":"macro"},{"location":"man/api/#QuranTree.@desc-Tuple{Any}","page":"API","title":"QuranTree.@desc","text":"@desc(expr)\n\nExtract the detailed description of a AbstractFeature.\n\n\n\n\n\n","category":"macro"},{"location":"man/api/#QuranTree.@transliterator-Tuple{Any,Any}","page":"API","title":"QuranTree.@transliterator","text":"@transliterator(dict, name)\n\nCreate a custom transliterator using an input dict (Dict object) with its corresponding name as String object. This will automatically update the transliterator inside all  functions like arabic, verses, and encode.\n\n\n\n\n\n","category":"macro"},{"location":"man/api/#QuranTree.@transliterator-Tuple{Any}","page":"API","title":"QuranTree.@transliterator","text":"@transliterator(dict)\n\nFallback to the default Buckwalter transliterator.\n\n\n\n\n\n","category":"macro"},{"location":"man/nlp/nlp/#Natural-Language-Processing","page":"Introduction","title":"Natural Language Processing","text":"","category":"section"},{"location":"man/nlp/nlp/","page":"Introduction","title":"Introduction","text":"The goal of this section is to demonstrate the use of the package for Natural Language Processing. At the moment, the following are the available applications:","category":"page"},{"location":"man/nlp/nlp/","page":"Introduction","title":"Introduction","text":"Pages = [\n    \"man/nlp/text_summarization.md\"\n    \"man/nlp/topic_modeling.md\"\n]\nDepth = 2","category":"page"},{"location":"man/nlp/text_summarization/#Text-Summarization","page":"Text Summarization","title":"Text Summarization","text":"","category":"section"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"This section will demonstrate how to use TextAnalysis.jl (Julia's leading NLP library) for QuranTree.jl. In particular, in summarizing the Qur'an, specifically Chapter 18 (The Cave) which most Muslims are aware of the story, since it is the chapter recommended to be read every Friday. The algorithm used for summarization is called TextRank, an application of PageRank algorithm to text datasets.","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"using Pkg\nPkg.add(\"JuliaDB\")\nPkg.add(\"PrettyTables\")\nPkg.add(\"TextAnalysis\")","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"using JuliaDB\nusing PrettyTables\nusing QuranTree\nusing TextAnalysis\n@ptconf tf=tf_compact vcrop_mode=:backend\n\ncrps, tnzl = QuranData() |> load;\ncrpsdata = table(crps)","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"!!! info 'Note'     You need to install JuliaDB.jl and PrettyTables.jl to successfully run the code. ","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"    using Pkg\n    Pkg.add(\"JuliaDB\")\n    Pkg.add(\"PrettyTables\")\n    ```\n## Data Preprocessing\nThe first data processing will be the removal of all Disconnected Letters like الٓمٓ ,الٓمٓصٓ, among others. This is done as follows:","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"@repl abc function preprocess(s::String)     feat = parse(Features, s)     disletters = isfeature(feat, AbstractDisLetters)     prepositions = isfeature(feat, AbstractPreposition)     particles = isfeature(feat, AbstractParticle)     conjunctions = isfeature(feat, AbstractConjunction)     pronouns = isfeature(feat, AbstractPronoun)     adverbs = isfeature(feat, AbstractAdverb)","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"return !disletters && !prepositions && !particles && !conjunctions && !pronouns && !adverbs","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"end","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"crpstbl = filter(t -> preprocess(t.features), crpsdata[18].data)","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"Next, we create a copy of the above data so we have the original state, and use the copy to do further data processing.","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"@repl abc crpsnew = deepcopy(crpstbl) feats = select(crpsnew, :features) feats = parse.(Features, feats)","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"## Lemmatization\nUsing the above parsed features, we then convert the `form` of the tokens into its lemma. This is useful for addressing minimal variations due to inflection.","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"@repl abc lemmas = lemma.(feats) forms1 = select(crpsnew, :form) forms1[.!ismissing.(lemmas)] = lemmas[.!ismissing.(lemmas)]","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"!!! tip \"Tips\"\n    We can also use the `Root` features instead, which is done by simply replacing `lemma.(feats)` with `root.(feats)`. \n\nWe now put back the new form to the corpus:","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"@repl abc crpsnew = transform(crpsnew, :form => forms1) crpsnew = CorpusData(crpsnew)","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"## Tokenization\nWe want to summarize the Qur'an at the verse level. Thus, the token would be the verses of the corpus. From these verses, we further clean it by dediacritization and normalization of the characters:","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"@repl abc lemvrs = verses(crpsnew) vrs = QuranTree.normalize.(dediac.(lemvrs))","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"## Creating a TextAnalysis Corpus\nTo make use of the [TextAnalysis.jl's APIs](https://juliahub.com/docs/TextAnalysis/5Mwet/0.7.2/APIReference/), we need to encode the processed Quranic Corpus to [TextAnalysis.jl](https://juliahub.com/docs/TextAnalysis/5Mwet/0.7.2/)'s Corpus. In this case, we will create a `StringDocument` of the verses.","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"@repl abc crps1 = Corpus(StringDocument.(vrs))","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"We then update the lexicon and inverse index for efficient indexing of the corpus.","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"@repl abc updatelexicon!(crps1) updateinverse_index!(crps1)","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"Next, we create a Document Term Matrix, which will have rows of verses and columns of words describing the verses.","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"@repl abc m1 = DocumentTermMatrix(crps1)","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"## TF-IDF\nFinally, we compute the corresponding TF-IDF, which will serve as the feature matrix.","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"@repl abc tfidf = tf_idf(m1)","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"## Summarizing the Qur'an\nUsing the TF-IDF, we compute the product of it with its transpose to come up with a square matrix, where the elements describes the linkage between the verses, or the similarity between the verses.","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"@repl abc sim_mat = tfidf * tfidf'","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"At this point, we can now write the code for the PageRank algorithm:","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"@repl abc using LinearAlgebra function pagerank(A; Niter=20, damping=.15)     Nmax = size(A, 1)     r = rand(1, Nmax);              # Generate a random starting rank.     r = r ./ norm(r, 1);            # Normalize     a = (1 - damping) ./ Nmax;       # Create damping vector","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"for i=1:Niter\n    s = r * A\n    rmul!(s, damping)\n    r = s .+ (a * sum(r, dims=2));   # Compute PageRank.\nend\n\nr = r ./ norm(r, 1);\n\nreturn r","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"end","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"Using this function, we apply it to the above similarity matrix (`sim_mat`) and extract the PageRank scores for all verses. This score will serve as the weights, and so higher scores suggest that the verse has a lot of connections to other verses in the corpus, which means it represents *per se* the corpus.","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"@repl abc p = pagerank(sim_mat)","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"Now we sort these scores in descending order and use it to rearrange the original verses:","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"@repl abc idx = sortperm(vec(p), rev=true)[1:10]","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"Finally, the following 10 verses best summarizes the corpus (Chapter 18) using TextRank:","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"@repl abc versenos = verses(CorpusData(crpstbl), number=true, startend=false)","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"verseout = String[]; chapter = Int64[]; verse = Int64[]; for v in versenos     verseout = vcat(verseout, verses(crpsdata[v[1]][v[2]]))     chapter = vcat(chapter, repeat(v[1], inner=length(v[2])))     verse = vcat(verse, v[2]) end","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"tbl = table((     chapter=chapter[idx],      verse=verse[idx],      versetext=arabic.(verseout[idx]) ));","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"@pt tbl","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"The following is the table of the above output properly formatted in HTML.","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"@example abc Pkg.add(\"DataFrames\") Pkg.add(\"IterableTables\") Pkg.add(\"Latexify\") using DataFrames using IterableTables using Latexify","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"mdtable(DataFrame(tbl), cluster_topics), latex=false)","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"The following are the translations of the above verses:","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"@raw html <table>     <thead><td>Chapter</td><td>Verse</td><td>Enlish Translation</td></thead>     <tbody>     <tr><td>18</td><td>85</td><td>So he travelled a course,</td></tr>     <tr><td>18</td><td>89</td><td>Then he travelled a ˹different˺ course</td></tr>     <tr><td>18</td><td>92</td><td>Then he travelled a ˹third˺ course</td></tr>     <tr><td>18</td><td>66</td><td>Moses said to him, “May I follow you, provided that you teach me some of the right guidance you have been taught?”</td></tr>     <tr><td>18</td><td>70</td><td>He responded, “Then if you follow me, do not question me about anything until I ˹myself˺ clarify it for you.”</td></tr>     <tr><td>18</td><td>8</td><td>And We will certainly reduce whatever is on it to barren ground.</td></tr>     <tr><td>18</td><td>28</td><td>And patiently stick with those who call upon their Lord morning and evening, seeking His pleasure.1 Do not let your eyes look beyond them, desiring the luxuries of this worldly life. And do not obey those whose hearts We have made heedless of Our remembrance, who follow ˹only˺ their desires and whose state is ˹total˺ loss.</td></tr>     <tr><td>18</td><td>108</td><td>where they will be forever, never desiring anywhere else.</td></tr>     <tr><td>18</td><td>91</td><td>So it was. And We truly had full knowledge of him.</td></tr>     <tr><td>18</td><td>68</td><td>And how can you be patient with what is beyond your ˹realm of˺ knowledge?”</td></tr>     </tbody> </table> ```","category":"page"},{"location":"man/camel/external/#CAMeL-Tools","page":"Content","title":"CAMeL Tools","text":"","category":"section"},{"location":"man/camel/external/","page":"Content","title":"Content","text":"In this section, we will explore the use of CAMeL tools from New York University Abu Dhabi. CAMeL is a To install the library, run the following in the terminal:","category":"page"},{"location":"man/camel/external/","page":"Content","title":"Content","text":"pip3 install camel-tools","category":"page"},{"location":"man/camel/external/","page":"Content","title":"Content","text":"Then, download the necessary data as follows:","category":"page"},{"location":"man/camel/external/","page":"Content","title":"Content","text":"camel_tools light","category":"page"},{"location":"man/camel/external/","page":"Content","title":"Content","text":"For this, tutorial we are going to use only the light version of the CAMeL data which is about 19mb. Install pycall","category":"page"},{"location":"man/camel/external/","page":"Content","title":"Content","text":"using Pkg\nPkg.add(\"JuliaDB\")\nPkg.add(\"PrettyTables\")","category":"page"},{"location":"man/camel/external/","page":"Content","title":"Content","text":"using Pkg\nPkg.add(\"PyCall\")","category":"page"},{"location":"man/camel/external/","page":"Content","title":"Content","text":"ENV[\"PYTHON\"] = \"/Library/Frameworks/Python.framework/Versions/3.8/bin/python3\"\nPkg.build(\"PyCall\")","category":"page"},{"location":"man/camel/external/#Character-Dediacritization","page":"Content","title":"Character Dediacritization","text":"","category":"section"},{"location":"man/camel/external/","page":"Content","title":"Content","text":"using PyCall\n@pyimport camel_tools.utils.dediac as camel_dediac\n@pyimport camel_tools.utils.normalize as camel_normalize","category":"page"},{"location":"man/camel/external/","page":"Content","title":"Content","text":"using QuranTree\ncrps, tnzl = load(QuranData());\ncrpsdata = table(crps);\ntnzldata = table(tnzl);\navrs1 = verses(tnzldata[1][1])[1]\ndediac(avrs1)\ncamel_dediac.dediac_ar(avrs1)\nvrs1 = verses(crpsdata[1][1])[1]\ndediac(vrs1)\ncamel_dediac.dediac_bw(vrs1)","category":"page"},{"location":"man/camel/external/#Character-Normalization","page":"Content","title":"Character Normalization","text":"","category":"section"},{"location":"man/camel/external/","page":"Content","title":"Content","text":"avrs2 = verses(tnzldata[2][3])[1]\nnormalize(avrs2, :ta_marbuta)\ncamel_normalize.normalize_teh_marbuta_ar(avrs2)\nvrs2 = verses(crpsdata[2][3])[1]\nnormalize(vrs2, :ta_marbuta)\ncamel_normalize.normalize_teh_marbuta_bw(vrs2)","category":"page"},{"location":"man/camel/external/","page":"Content","title":"Content","text":"using JuliaDB\nusing PyCall\nusing PrettyTables\n@ptconf vcrop_mode=:middle tf=tf_compact\n@pyimport camel_tools.morphology.database as camel_database\n@pyimport camel_tools.morphology.analyzer as camel_analyzer\n\ndb = camel_database.MorphologyDB.builtin_db()\nanalyzer = camel_analyzer.Analyzer(db)\nanalyses = analyzer.analyze(split(avrs1)[1])\n@pt table([(;Dict(Symbol.(keys(d)) .=> collect(values(d)))...) for d in analyses])","category":"page"},{"location":"man/camel/external/","page":"Content","title":"Content","text":"!!! info 'Note'     You need to install JuliaDB.jl to successfully run the code.      julia     using Pkg     Pkg.add(\"JuliaDB\")","category":"page"},{"location":"man/morphological_features/#Morphological-Features","page":"Morphological Features","title":"Morphological Features","text":"","category":"section"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"QuranTree.jl provides complete types for all morphological features and part of speech of The Quranic Arabic Corpus. ","category":"page"},{"location":"man/morphological_features/#Parsing","page":"Morphological Features","title":"Parsing","text":"","category":"section"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"The features of each token are encoded as String in its raw form, and in order to parse this as morphological feature, the function parse(Features, x) is used, where x is the raw String input. For example, the following will parse the 2nd part of the 3rd word of 1st verse of chapter 1:","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"using Pkg\nPkg.add(\"JuliaDB\")","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"using QuranTree\nusing JuliaDB\n\ncrps, tnzl = load(QuranData());\ncrpsdata = table(crps);\ntnzldata = table(tnzl);\ncrpsdata[1][1][3][2]\ntoken = select(crpsdata[1][1][3][2].data, :features)\nmfeat = parse(Features, token[1])\ntypeof(mfeat)","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"!!! info 'Note'     You need to install JuliaDB.jl to successfully run the code. ","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"    using Pkg\n    Pkg.add(\"JuliaDB\")\n    ```\n\n## Extracting Detailed Description\nTo see the detailed description of the features, `@desc` is used.","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"@repl abc @desc mfeat","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"The Julia's `dump` function can be used as to how to access the properties of the `Stem` object.","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"@repl abc dump(mfeat)","category":"page"},{"location":"man/morphological_features/#access-other-feats-of-the-token","page":"Morphological Features","title":"access other feats of the token","text":"","category":"section"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"mfeat.feats","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"## Checking Parts of Speech\n`isfeature(token, pos)` checks whether the `token`'s parsed feature is a particular part of speech (`pos`). For example, the following checks whether `mfeat` above, among others, is indeed `Masculine` and `Singular`.","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"@repl abc isfeature(mfeat, Masculine) isfeature(mfeat, Feminine) isfeature(mfeat, Singular) isfeature(mfeat, Adjective) && isfeature(mfeat, Genetive)","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"Another example on checking whether the token has `Root` and `Lemma` features.","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"@repl abc isfeature(mfeat, Root) && isfeature(mfeat, Lemma)","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"!!! tip \"Tips\"\n    `isfeature(...)` is useful when working with the JuliaDB.jl's filter function, instead of using regular expressions. For example,\n    ```@setup abc\n    using Pkg\n    Pkg.add(\"PrettyTables\")\n    ```\n    ```@repl abc\n    using PrettyTables\n    @ptconf vcrop_mode=:middle tf=tf_compact\n\n    tbl = filter(t -> isfeature(parse(Features, t.features), ActiveParticle), crpsdata.data)\n\n    @pt select(tbl, Not(:word, :part, :tag))\n    ```\n## Lemma, Root and Special\n`root`, `lemma` and `special` functions are used for extracting the Root, Lemma and Special morphological features, respectively. ","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"@repl abc root(mfeat) lemma(mfeat)","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"arabic(root(mfeat)) arabic(lemma(mfeat))","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"The following example shows token with `Special` feature:","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"@repl abc token2 = select(crpsdata.data, :features)[53] mfeat2 = parse(Features, token2) special(mfeat2) arabic(special(mfeat2))","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"## Implied Verb Features\nSome features of Quranic Arabic Verbs are implied. For example, the *Voice* feature of the Verb is default to *Active voice*, the *Mood* feature is default to *Indicative mood*, and the *Verb form* feature is default to *First form*. ","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"@repl abc token3 = select(crpsdata.data, :features)[27]","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"`token3` is a `Verb` with no *Mood* and *Verb form* features stated. However, parsing this will automatically add the default values of the said features as shown below:","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"@repl abc mfeat3 = parse(Features, token3) @desc mfeat3","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"Another example where the *Voice* feature of the Verb is implied:","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"@repl abc token4 = select(crpsdata.data, :features)[27] mfeat4 = parse(Features, token4) @desc mfeat4","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"## POS Abstract Types\nThe table below contains the complete list of the Part of Speech with its corresponding types. As shown in the table below, each part of speech has a corresponding parent type, which is a superset type in the Type Hierarchy. This is useful for grouping. For example, instead of using `||` (or) in checking for all tokens that are either `FirstPerson`, `SecondPerson`, or `ThirdPerson`, the parent type `AbstractPerson` can be used.","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"@repl abc","category":"page"},{"location":"man/morphological_features/#without-using-parent-type","page":"Morphological Features","title":"without using parent type","text":"","category":"section"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"function allpersons(t)     is1st = isfeature(parse(Features, t.features), FirstPerson)     is2nd = isfeature(parse(Features, t.features), SecondPerson)     is3rd = isfeature(parse(Features, t.features), ThirdPerson)","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"return is1st || is2nd || is3rd","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"end tbl1 = filter(allpersons, crpsdata.data); select(tbl1, (:form, :features))","category":"page"},{"location":"man/morphological_features/#using-parent-type","page":"Morphological Features","title":"using parent type","text":"","category":"section"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"tbl2 = filter(t -> isfeature(parse(Features, t.features), AbstractPerson), crpsdata.data); select(tbl2, (:form, :features))","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"sum(select(tbl1, :features) .!== select(tbl2, :features))","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"## Part of Speech Types","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"@raw html <table> <thead><td>Type</td><td>Parent Type</td><td>Tag</td><td>Description</td><td>Arabic Name</td></thead> <tr><td><code> Noun</code></td><td><code>AbstractNoun</code></td><td><code>Symbol(\"N\")</code></td><td>Noun</td><td style=\"text-align:right !important\">اسم</td></tr> <tr><td><code> ProperNoun</code></td><td><code>AbstractNoun</code></td><td><code>Symbol(\"PN\")</code></td><td>Proper noun</td><td style=\"text-align:right !important\">اسم علم</td></tr>","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"<tr><td><code> Adjective</code></td><td><code>AbstractDerivedNominal</code></td><td><code>Symbol(\"ADJ\")</code></td><td>Adjective</td><td style=\"text-align:right !important\">صفة</td></tr> <tr><td><code> ImperativeVerbalNoun</code></td><td><code>AbstractDerivedNominal</code></td><td><code>Symbol(\"IMPN\")</code></td><td>Imperative verbal noun</td><td style=\"text-align:right !important\">اسم فعل أمر</td></tr>","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"<tr><td><code> Personal</code></td><td><code>AbstractPronoun</code></td><td><code>Symbol(\"PRON\")</code></td><td>Personal pronoun</td><td style=\"text-align:right !important\">ضمير</td></tr> <tr><td><code> Demonstrative</code></td><td><code>AbstractPronoun</code></td><td><code>Symbol(\"DEM\")</code></td><td>Demonstrative pronoun</td><td style=\"text-align:right !important\">اسم اشارة</td></tr> <tr><td><code> Relative</code></td><td><code>AbstractPronoun</code></td><td><code>Symbol(\"REL\")</code></td><td>Relative pronoun</td><td style=\"text-align:right !important\">اسم موصول</td></tr>","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"<tr><td><code> Time</code></td><td><code>AbstractAdverb</code></td><td><code>Symbol(\"T\")</code></td><td>Time adverb</td><td style=\"text-align:right !important\">ظرف زمان</td></tr> <tr><td><code> Location</code></td><td><code>AbstractAdverb</code></td><td><code>Symbol(\"LOC\")</code></td><td>Location adverb</td><td style=\"text-align:right !important\">ظرف مكان</td></tr>","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"<tr><td><code> Preposition</code></td><td><code>AbstractPreposition</code></td><td><code>Symbol(\"P\")</code></td><td>Preposition</td><td style=\"text-align:right !important\">حرف جر</td></tr>","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"<tr><td><code> EmphaticLam</code></td><td><code>AbstractPrefix</code></td><td><code>Symbol(\"EMPH\")</code></td><td>Emphatic lam prefix</td><td style=\"text-align:right !important\">لام التوكيد</td></tr> <tr><td><code> ImperativeLam</code></td><td><code>AbstractPrefix</code></td><td><code>Symbol(\"IMPV\")</code></td><td>Imperative lam prefix</td><td style=\"text-align:right !important\">لام الامر</td></tr> <tr><td><code> PurposeLam</code></td><td><code>AbstractPrefix</code></td><td><code>Symbol(\"PRP\")</code></td><td>Purpose lam prefix</td><td style=\"text-align:right !important\">لام التعليل</td></tr> <tr><td><code> EmphaticNun</code></td><td><code>AbstractPrefix</code></td><td><code>Symbol(\"+n:EMPH\")</code></td><td>Emphatic lam prefix</td><td style=\"text-align:right !important\">لام التوكيد</td></tr>","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"<tr><td><code> Coordinating</code></td><td><code>AbstractConjunction</code></td><td><code>Symbol(\"CONJ\")</code></td><td>Coordinating conjunction</td><td style=\"text-align:right !important\">حرف عطف</td></tr> <tr><td><code> Subordinating</code></td><td><code>AbstractConjunction</code></td><td><code>Symbol(\"SUB\")</code></td><td>Subordinating particle</td><td style=\"text-align:right !important\">حرف مصدري</td></tr>","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"<tr><td><code> Accusative</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"ACC\")</code></td><td>Accusative particle</td><td style=\"text-align:right !important\">حرف نصب</td></tr> <tr><td><code> Amendment</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"AMD\")</code></td><td>Amendment particle</td><td style=\"text-align:right !important\">حرف استدراك</td></tr> <tr><td><code> Answer</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"ANS\")</code></td><td>Answer particle</td><td style=\"text-align:right !important\">حرف جواب</td></tr> <tr><td><code> Aversion</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"AVR\")</code></td><td>Aversion particle</td><td style=\"text-align:right !important\">حرف ردع</td></tr> <tr><td><code> Cause</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"CAUS\")</code></td><td>Particle of cause</td><td style=\"text-align:right !important\">حرف سببية</td></tr> <tr><td><code> Certainty</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"CERT\")</code></td><td>Particle of certainty</td><td style=\"text-align:right !important\">حرف تحقيق</td></tr> <tr><td><code> Circumstantial</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"CIRC\")</code></td><td>Circumstantial particle</td><td style=\"text-align:right !important\">حرف حال</td></tr> <tr><td><code> Comitative</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"COM\")</code></td><td>Comitative particle</td><td style=\"text-align:right !important\">واو المعية</td></tr> <tr><td><code> Conditional</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"COND\")</code></td><td>Conditional particle</td><td style=\"text-align:right !important\">حرف شرط</td></tr> <tr><td><code> Equalization</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"EQ\")</code></td><td>Equalization particle</td><td style=\"text-align:right !important\">حرف تسوية</td></tr> <tr><td><code> Exhortation</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"EXH\")</code></td><td>Exhortation particle</td><td style=\"text-align:right !important\">حرف تحضيض</td></tr> <tr><td><code> Explanation</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"EXL\")</code></td><td>Explanation particle</td><td style=\"text-align:right !important\">حرف تفصيل</td></tr> <tr><td><code> Exceptive</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"EXP\")</code></td><td>Exceptive particle</td><td style=\"text-align:right !important\">أداة استثناء</td></tr> <tr><td><code> Future</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"FUT\")</code></td><td>Future particle</td><td style=\"text-align:right !important\">حرف استقبال</td></tr> <tr><td><code> Inceptive</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"INC\")</code></td><td>Inceptive particle</td><td style=\"text-align:right !important\">حرف ابتداء</td></tr> <tr><td><code> Interpretation</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"INT\")</code></td><td>Inceptive particle</td><td style=\"text-align:right !important\">حرف تفسير</td></tr> <tr><td><code> Interogative</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"INTG\")</code></td><td>Interogative particle</td><td style=\"text-align:right !important\">حرف استفهام</td></tr> <tr><td><code> Negative</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"NEG\")</code></td><td>Negative particle</td><td style=\"text-align:right !important\">حرف نفي</td></tr> <tr><td><code> Preventive</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"PREV\")</code></td><td>Preventive particle</td><td style=\"text-align:right !important\">حرف كاف</td></tr> <tr><td><code> Prohibition</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"PRO\")</code></td><td>Prohibition particle</td><td style=\"text-align:right !important\">حرف نهي</td></tr> <tr><td><code> Resumption</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"REM\")</code></td><td>Resumption particle</td><td style=\"text-align:right !important\"حرف استئنافية</td></tr> <tr><td><code> Restriction</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"RES\")</code></td><td>Restriction particle</td><td style=\"text-align:right !important\">أداة حصر</td></tr> <tr><td><code> Retraction</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"RET\")</code></td><td>Retraction particle</td><td style=\"text-align:right !important\">حرف اضراب</td></tr> <tr><td><code> Result</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"RSLT\")</code></td><td>Result particle</td><td style=\"text-align:right !important\">حرف واقع في جواب الشرط</td></tr> <tr><td><code> Supplemental</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"SUP\")</code></td><td>Suplemental particle</td><td style=\"text-align:right !important\">حرف زائد</td></tr> <tr><td><code> Surprise</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"SUR\")</code></td><td>Surprise particle</td><td style=\"text-align:right !important\">حرف فجاءة</td></tr> <tr><td><code> Vocative</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"VOC\")</code></td><td>Vocative particle</td><td style=\"text-align:right !important\">حرف نداء</td></tr>","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"<tr><td><code> DisconnectedLetters</code></td><td><code>AbstractDisLetters</code></td><td><code>Symbol(\"INL\")</code></td><td>Quranic initials</td><td style=\"text-align:right !important\">حروف مقطعة</td></tr>","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"<tr><td><code> FirstPerson</code></td><td><code>AbstractPerson</code></td><td><code>Symbol(\"1\")</code></td><td>First person</td><td style=\"text-align:right !important\">الاسناد</td></tr> <tr><td><code> SecondPerson</code></td><td><code>AbstractPerson</code></td><td><code>Symbol(\"2\")</code></td><td>Second person</td><td style=\"text-align:right !important\">الاسناد</td></tr> <tr><td><code> ThirdPerson</code></td><td><code>AbstractPerson</code></td><td><code>Symbol(\"3\")</code></td><td>Third person</td><td style=\"text-align:right !important\">الاسناد</td></tr>","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"<tr><td><code> Masculine</code></td><td><code>AbstractGender</code></td><td><code>Symbol(\"M\")</code></td><td>Masculine</td><td style=\"text-align:right !important\">الجنس</td></tr> <tr><td><code> Feminine</code></td><td><code>AbstractGender</code></td><td><code>Symbol(\"F\")</code></td><td>Feminine</td><td style=\"text-align:right !important\">الجنس</td></tr>","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"<tr><td><code> Singular</code></td><td><code>AbstractNumber</code></td><td><code>Symbol(\"S\")</code></td><td>Singular</td><td style=\"text-align:right !important\">العدد</td></tr> <tr><td><code> Dual</code></td><td><code>AbstractNumber</code></td><td><code>Symbol(\"D\")</code></td><td>Dual</td><td style=\"text-align:right !important\">العدد</td></tr> <tr><td><code> Plural</code></td><td><code>AbstractNumber</code></td><td><code>Symbol(\"P\")</code></td><td>Plural</td><td style=\"text-align:right !important\">العدد</td></tr>","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"<tr><td><code> Verb</code></td><td><code>AbstractPartOfSpeech</code></td><td><code>Symbol(\"V\")</code></td><td>Verb</td><td style=\"text-align:right !important\">فعل</td></tr> <tr><td><code> Perfect</code></td><td><code>AbstractAspect</code></td><td><code>Symbol(\"PERF\")</code></td><td>Perfect verb</td><td style=\"text-align:right !important\">فعل ماض</td></tr> <tr><td><code> Imperfect</code></td><td><code>AbstractAspect</code></td><td><code>Symbol(\"IMPF\")</code></td><td>Imperfect verb</td><td style=\"text-align:right !important\">فعل مضارع</td></tr> <tr><td><code> Imperative</code></td><td><code>AbstractAspect</code></td><td><code>Symbol(\"IMPV\")</code></td><td>Imperative verb</td><td style=\"text-align:right !important\">فعل أمر</td></tr> <tr><td><code> Indicative</code></td><td><code>AbstractMood</code></td><td><code>Symbol(\"IND\")</code></td><td>Indicative mood (default)</td><td style=\"text-align:right !important\">مرفوع</td></tr> <tr><td><code> Subjunctive</code></td><td><code>AbstractMood</code></td><td><code>Symbol(\"SUBJ\")</code></td><td>Subjunctive mood</td><td style=\"text-align:right !important\">منصوب</td></tr> <tr><td><code> Jussive</code></td><td><code>AbstractMood</code></td><td><code>Symbol(\"JUS\")</code></td><td>Jussive mood</td><td style=\"text-align:right !important\">مجزوم</td></tr> <tr><td><code> Active</code></td><td><code>AbstractVoice</code></td><td><code>Symbol(\"ACT\")</code></td><td>Active voice (default)</td><td style=\"text-align:right !important\">مبني للمعلوم</td></tr> <tr><td><code> Passive</code></td><td><code>AbstractVoice</code></td><td><code>Symbol(\"PASS\")</code></td><td>Passive voice</td><td style=\"text-align:right !important\">مبني للمجهول</td></tr>","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"<tr><td><code> VerbFormI</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"I\")</code></td><td>First verb form (default)</td><td style=\"text-align:right !important\">فعل</td></tr> <tr><td><code> VerbFormII</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"II\")</code></td><td>Second verb form</td><td style=\"text-align:right !important\">فعل</td></tr> <tr><td><code> VerbFormIII</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"III\")</code></td><td>Third verb form</td><td style=\"text-align:right !important\">فعل</td></tr> <tr><td><code> VerbFormIV</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"IV\")</code></td><td>Fourth verb form</td><td style=\"text-align:right !important\">فعل</td></tr> <tr><td><code> VerbFormV</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"V\")</code></td><td>Fifth verb form</td><td style=\"text-align:right !important\">فعل</td></tr> <tr><td><code> VerbFormVI</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"VI\")</code></td><td>Sixth verb form</td><td style=\"text-align:right !important\">فعل</td></tr> <tr><td><code> VerbFormVII</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"VII\")</code></td><td>Seventh verb form</td><td style=\"text-align:right !important\">فعل</td></tr> <tr><td><code> VerbFormVIII</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"VIII\")</code></td><td>Eighth verb form</td><td style=\"text-align:right !important\">فعل</td></tr> <tr><td><code> VerbFormIX</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"IX\")</code></td><td>Ninth verb form</td><td style=\"text-align:right !important\">فعل</td></tr> <tr><td><code> VerbFormX</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"X\")</code></td><td>Tenth verb form</td><td style=\"text-align:right !important\">فعل</td></tr> <tr><td><code> VerbFormXI</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"XI\")</code></td><td>Eleventh verb form</td><td style=\"text-align:right !important\">فعل</td></tr> <tr><td><code> VerbFormXII</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"XII\")</code></td><td>Twelfth verb form</td><td style=\"text-align:right !important\">فعل</td></tr>","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"<tr><td><code> ActiveParticle</code></td><td><code>AbstractDerivedNoun</code></td><td><code>Symbol(\"ACT PCPL\")</code></td><td>Active particle</td><td style=\"text-align:right !important\">اسم فاعل</td></tr> <tr><td><code> PassiveParticle</code></td><td><code>AbstractDerivedNoun</code></td><td><code>Symbol(\"PASS PCPL\")</code></td><td>Passive particle</td><td style=\"text-align:right !important\">اسم مفعول</td></tr> <tr><td><code> VerbalNoun</code></td><td><code>AbstractDerivedNoun</code></td><td><code>Symbol(\"VN\")</code></td><td>Verbal noun</td><td style=\"text-align:right !important\">مصدر</td></tr>","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"<tr><td><code> Definite</code></td><td><code>AbstractState</code></td><td><code>Symbol(\"DEF\")</code></td><td>Definite state</td><td style=\"text-align:right !important\">معرفة</td></tr> <tr><td><code> Indefinite</code></td><td><code>AbstractState</code></td><td><code>Symbol(\"INDEF\")</code></td><td>Indefinite state</td><td style=\"text-align:right !important\">نكرة</td></tr> <tr><td><code> Nominative</code></td><td><code>AbstractCase</code></td><td><code>Symbol(\"NOM\")</code></td><td>Nominative case</td><td style=\"text-align:right !important\">مرفوع</td></tr> <tr><td><code> Genetive</code></td><td><code>AbstractCase</code></td><td><code>Symbol(\"GEN\")</code></td><td>Genetive case</td><td style=\"text-align:right !important\">مجرور</td></tr> </table> ```","category":"page"},{"location":"man/getting_started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"CurrentModule = QuranTree\nDocTestSetup = quote\n    using QuranTree\nend","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"There are two datasets included in the library, namely the Quranic Arabic Corpus and the Tanzil data. To load, simply run the following:","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"using QuranTree\n\ndata = QuranData()\ncrps, tnzl = load(data);","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"The QuranData() is a struct containing the default file path of the data. The load function returns a tuple for both the Quranic Corpus and the Tanzil Data. The loaded data is encoded in a immutable (read-only) array, so users cannot change it. This is specified in the type of the object as shown below:","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"crps\ntnzl","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"In order to parse these raw data, the table function is used:","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"crpsdata = table(crps);\ntnzldata = table(tnzl);\ncrpsdata\ntnzldata","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"The resulting tables are of type CorpusData and TanzilData, respectively, and are encoded on top of JuliaDB.jl's IndexedTable, which can be accessed by simply calling the macro @data (for example, @data crpsdata or crpsdata.data). One thing to note, however, is that JuliaDB.jl will only display the meta data of the columns if the width of the table is wider than the width of the output pane, for example in case of the crpsdata above, the table contains more columns (and thus wider) compared to tnzldata. To display the data of any wide table, we recommend PrettyTables.jl:","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"using Pkg\nPkg.add(\"PrettyTables\")","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"using PrettyTables\n@ptconf vcrop_mode=:middle tf=tf_compact\n@pt crpsdata","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"!!! info 'Note'     You need to install PrettyTables.jl to successfully run the code. ","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"    using Pkg\n    Pkg.add(\"PrettyTables\")\n    ```\n## Manipulating the Table\nAs mentioned above, the table is based on [JuliaDB.jl](https://github.com/JuliaData/JuliaDB.jl)'s  `IndexedTable`. Therefore, any data manipulation is done through the [JuliaDB.jl's APIs](https://juliadb.juliadata.org/latest/api/). To access the data, simply call the property with `.data` or using the macro `@data`:\n","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"@repl abc crpstbl = @data crpsdata; # or crpsdata.data tnzltbl = @data tnzldata; # or tnzldata.data crpstbl tnzltbl","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"Note that, `crpsdata` and `crpstbl` have different type (as in the case of `tnzldata` and `tnzltbl`) as shown below:","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"@repl abc typeof(crpsdata) typeof(crpstbl)","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"From here, any data manipulation is done using [JuliaDB.jl's APIs](https://juliadb.juliadata.org/latest/api/). For example, the following will select the feature column of the `crpstbl`:\n","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"@setup abc using Pkg Pkg.add(\"JuliaDB\")","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"@repl abc using JuliaDB","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"select(crpstbl, :features)","category":"page"},{"location":"man/getting_started/#or-equivalent-to","page":"Getting Started","title":"or equivalent to","text":"","category":"section"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"select(crpsdata.data, :features)","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"!!! info 'Note'\n    You need to install [JuliaDB.jl](https://github.com/JuliaData/JuliaDB.jl) to successfully run the code. \n    ```julia\n    using Pkg\n    Pkg.add(\"JuliaDB\")\n    ```\nTo filter tokens that are `Prefix`ed features, the Base.jl's `occursin` can be used:","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"@repl abc filter(t -> occursin(r\"^PREFIX\", t.features), crpstbl)","category":"page"},{"location":"man/getting_started/#or-equivalent-to-2","page":"Getting Started","title":"or equivalent to","text":"","category":"section"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"filter(t -> occursin(r\"^PREFIX\", t.features), crpsdata.data) ``The main point here is that, any data manipulation on theCorpusTableandTanzilData` is done through JuliaDB.jl's APIs.","category":"page"},{"location":"#QuranTree.jl-Documentation","page":"Home","title":"QuranTree.jl Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = QuranTree\nDocTestSetup = quote\n    using QuranTree\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"A Julia package for working with the Qur'an (Islam's Holy Book), computationally. QuranTree.jl is based on The Quranic Arabic Corpus by Kais Dukes of University of Leeds, and is aimed at offerring a high-level API alternative to the Java package, JQuranTree. ","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The following are the features of the package:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Indexing\nIntuitive indexing for Chapters, Verses, Words and Parts\nTransliteration\nBuckwalter as default\nFunctionality for creating custom transliterator\nUpdate transliteration in 1 line of code\nComplete type for all Morphological Features and Part of Speech\nSeemless transition between Arabic and Buckwalter (or custom transliteration)\nSimple Encoding (refer here)\nCharacter Normalization\nFor both Arabic and Buckwalter (or custom transliteration)\nCharacter Dediacritization\nFor both Arabic and Buckwalter (or custom transliteration)\nUtilities\nFunction for detailed description of the Morphological Features.\nModularity and Type-Safe\nCan easily integrate with other Julia packages, thanks to Julia's Multiple Dispatch\nCan easily integrate with Python (using PyCall.jl) and R (Using RCall.jl) for packages that are not yet in Julia\nLike JQuranTree, QuranTree.jl is type-safe\nOthers\nSupports Tanzil data\nRead-only array for raw datasets (Corpus and Tanzil)","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The library will soon be added to the Julia Package Registry, still finishing up the documentation. For now, QuranTree.jl can be installed as follows:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg\njulia> Pkg.add(\"https://github.com/alstat/QuranTree.jl\")","category":"page"},{"location":"#Requirements","page":"Home","title":"Requirements","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Julia >= 1.0\nJuliaDB.jl >= 0.13.0\nPrettyTables.jl >= 0.10.1","category":"page"},{"location":"man/nlp/topic_modeling/#Topic-Modeling","page":"Topic Modeling","title":"Topic Modeling","text":"","category":"section"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"Another application of Natural Language Processing is Topic Modeling, and in this section, we are going to extract the topics for Chapter 18 (The Cave). To do this, again TextAnalysis.jl (Julia's leading NLP library) is used. The model for this task will be Latent Dirichlet Allocation (LDA), but Latent Semantic Analysis (LSA) is also available in TextAnalysis.jl. To start with, load the data as follows:","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"using Pkg\nPkg.add(\"JuliaDB\")\nPkg.add(\"PrettyTables\")\nPkg.add(\"TextAnalysis\")","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"using JuliaDB\nusing PrettyTables\nusing QuranTree\nusing TextAnalysis\n@ptconf vcrop_mode=:middle tf=tf_compact\n\ncrps, tnzl = QuranData() |> load;\ncrpsdata = table(crps)","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"!!! info 'Note'     You need to install JuliaDB.jl and PrettyTables.jl to successfully run the code. ","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"    using Pkg\n    Pkg.add(\"JuliaDB\")\n    Pkg.add(\"PrettyTables\")\n    ```\n\n## Data Preprocessing\nThe first data processing will be the removal of all Disconnected Letters like الٓمٓ ,الٓمٓصٓ, among others. This is done as follows:","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"@repl abc function preprocess(s::String)     feat = parse(Features, s)     disletters = isfeature(feat, AbstractDisLetters)     prepositions = isfeature(feat, AbstractPreposition)     particles = isfeature(feat, AbstractParticle)     conjunctions = isfeature(feat, AbstractConjunction)     pronouns = isfeature(feat, AbstractPronoun)     adverbs = isfeature(feat, AbstractAdverb)","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"return !disletters && !prepositions && !particles && !conjunctions && !pronouns && !adverbs","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"end","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"crpstbl = filter(t -> preprocess(t.features), crpsdata[18].data)","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"Next, we create a copy of the above data so we have the original state, and use the copy to do further data processing.","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"@repl abc crpsnew = deepcopy(crpstbl) feats = select(crpsnew, :features) feats = parse.(Features, feats)","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"## Lemmatization\nUsing the above parsed features, we then convert the `form` of the tokens into its lemma. This is useful for addressing minimal variations due to inflection.","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"@repl abc lemmas = lemma.(feats) forms1 = select(crpsnew, :form) forms1[.!ismissing.(lemmas)] = lemmas[.!ismissing.(lemmas)]","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"!!! tip \"Tips\"\n    We can also use the `Root` features instead, which is done by simply replacing `lemma.(feats)` with `root.(feats)`. \n\nWe now put back the new form to the corpus:","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"@repl abc crpsnew = transform(crpsnew, :form => forms1) crpsnew = CorpusData(crpsnew)","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"## Tokenization\nWe want to summarize the Qur'an at the verse level. Thus, the token would be the verses of the corpus. From these verses, we further clean it by dediacritization and normalization of the characters:","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"@repl abc lemvrs = verses(crpsnew) vrs = QuranTree.normalize.(dediac.(lemvrs))","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"## Creating a TextAnalysis Corpus\nTo make use of the [TextAnalysis.jl's APIs](https://juliahub.com/docs/TextAnalysis/5Mwet/0.7.2/APIReference/), we need to encode the processed Quranic Corpus to [TextAnalysis.jl](https://juliahub.com/docs/TextAnalysis/5Mwet/0.7.2/)'s Corpus. In this case, we will create a `StringDocument` of the verses.","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"@repl abc crps1 = Corpus(StringDocument.(vrs))","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"We then update the lexicon and inverse index for efficient indexing of the corpus.","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"@repl abc updatelexicon!(crps1) updateinverse_index!(crps1)","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"Next, we create a Document Term Matrix, which will have rows of verses and columns of words describing the verses.","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"@repl abc m1 = DocumentTermMatrix(crps1)","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"## Latent Dirichlet Allocation\nFinally, run LDA as follows:","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"@repl abc k = 3          # number of topics iter = 1000    # number of gibbs sampling iterations alpha = 0.1    # hyperparameter beta = 0.1     # hyperparameter ϕ, θ = lda(m1, k, iter, alpha, beta)","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"Extract the topic for first cluster:","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"@repl abc ntopics = 10 clustertopics = Matrix(undef, ntopics, k); for i = 1:k     topicsidcs = sortperm(ϕ[i, :], rev=true)     clustertopics[:, i] = arabic.(m1.terms[topicsidcs][1:ntopics]) end @pt cluster_topics","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"Extract the topic for each verse","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"@repl abc vrstopics = [] for i = 1:dtm(m1).m     push!(vrstopics, sortperm(θ[:, i], rev=true)[1]) end @pt vrs_topics","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"Tabulating this propery would give us the following","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"@example abc Pkg.add(\"DataFrames\") Pkg.add(\"Latexify\") using DataFrames: DataFrame using Latexify","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"mdtable(convert(DataFrame, cluster_topics), latex=false) ``` As you may have noticed, the result is not good and this is mainly due to data processing. Readers are encourage to improve this for their own use. This section, however, demonstrated how TextAnalysis.jl's LDA can be used for Topic Modeling the QuranTree.jl's corpus.","category":"page"}]
}
