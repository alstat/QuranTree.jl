var documenterSearchIndex = {"docs":
[{"location":"man/transliteration/#Transliteration","page":"Transliteration","title":"Transliteration","text":"","category":"section"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"For transliteration, we will use Yunir.jl, a lightweight Arabic NLP toolkit. Yunir.jl uses Buckwalter as the default transliteration based on the Quranic Arabic Corpus encoding. The transliteration is done via the encode function, for example, the following will transliterate the first verse of Chapter 1:","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"using Pkg\nPkg.add(\"Yunir\")","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"using QuranTree\nusing Yunir \n\ncrps, tnzl = load(QuranData());\ncrpsdata = table(crps);\ntnzldata = table(tnzl);\nvrs = verses(tnzldata[1][1])\nencode(vrs[1])","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"note: Note\nYou need to install Yunir.jl to run the above code. To install, runusing Pkg\nPkg.add(\"Yunir\")","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"The verses function above is used to extract the corresponding verse from the Qur'an data of type AbstractQuran.","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"tip: Tips\nverses by default only returns the verse form of the table, but one can also extract the corresponding verse number instead of the form, example:verses(tnzldata, number=true, start_end=true)\nverses(tnzldata, number=true, start_end=false)","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"tip: Tips\nTo extract the words of the corpus, use the function words instead.","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"The function verses always returns an Array, and hence encoding multiple verses is possible using Julia's . (dot) broadcasting operation. For example, the following will transliterate all verses of Chapter 114:","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"vrs = verses(tnzldata[114])\nencode.(vrs)","category":"page"},{"location":"man/transliteration/#Decoding","page":"Transliteration","title":"Decoding","text":"","category":"section"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"To decode the transliterated back to Arabic form, Yunir.jl has arabic function to do just that. For example, the following will decode to Arabic the transliterated verses of Chapter 114 above:","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"arabic.(encode.(vrs))","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"Or using the CorpusData, ","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"vrs = verses(crpsdata[114])\navrs = arabic.(vrs)","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"tip: Tips\n. (dot) broadcasting is only used for arrays. So, for String input (not arrays of String), arabic(...) (without dot) is used. Example,arabic(vrs[1])","category":"page"},{"location":"man/transliteration/#Custom-Transliteration","page":"Transliteration","title":"Custom Transliteration","text":"","category":"section"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"Creating a custom transliteration requires only an input encoding in the form of a dictionary (Dict). For example, Yunir.jl's Buckwalter's encoding is provided by the constant BW_ENCODING as shown below:","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"BW_ENCODING","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"Suppose, we want to create a new transliteration by simply reversing the values of the dictionary. This is done as follows:","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"old_keys = collect(keys(BW_ENCODING));\nnew_vals = reverse(collect(values(BW_ENCODING)));\nmy_encoder = Dict(old_keys .=> new_vals)\n@transliterator my_encoder \"MyEncoder\"","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"The macro @transliterator is used for updating the transliteration, and it takes two inputs: the dictionary (my_encoder) and the name of the encoding (\"MyEncoder\"). Using this new encoding, the avrs above will have a new transliteration:","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"new_vrs = encode.(avrs);\nnew_vrs","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"To confirm this new transliteration, decoding it back to arabic should generate the proper results:","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"arabic.(new_vrs)","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"To reset the transliteration, simply run the following:","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"@transliterator :default","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"This will fallback to the Buckwalter transliteration, as shown below:","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"bw_vrs = encode.(avrs);\nbw_vrs\narabic.(bw_vrs)","category":"page"},{"location":"man/transliteration/#Simple-Encoding","page":"Transliteration","title":"Simple Encoding","text":"","category":"section"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"Another feature supported in QuranTree.jl is the Simple Encoding. For example, the following will (Simple) encode the first verse of Chapter 1:","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"vrs = verses(tnzldata[1][1:5])\nparse(SimpleEncoding, vrs[1])\nparse.(SimpleEncoding, vrs)","category":"page"},{"location":"man/nlp/nlp/#Natural-Language-Processing","page":"Introduction","title":"Natural Language Processing","text":"","category":"section"},{"location":"man/nlp/nlp/","page":"Introduction","title":"Introduction","text":"CurrentModule = QuranTree\nDocTestSetup = quote\n    using QuranTree\nend","category":"page"},{"location":"man/nlp/nlp/","page":"Introduction","title":"Introduction","text":"The goal of this section is to demonstrate the use of the package for Natural Language Processing. At the moment, the following are the available applications:","category":"page"},{"location":"man/nlp/nlp/","page":"Introduction","title":"Introduction","text":"Pages = [\n    \"text_summarization.md\"\n    \"topic_modeling.md\"\n]\nDepth = 2","category":"page"},{"location":"man/indexing/#Indexing-the-Corpus","page":"Indexing","title":"Indexing the Corpus","text":"","category":"section"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"QuranTree.jl offers a intuitive indexing for both Quranic Arabic Corpus and the Tanzil Data, specifically it follows the following usage:","category":"page"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"# for Quranic Arabic Corpus\ncrpsdata[<chapters>][<verses>][<words>][<parts>]\n\n# for Tanzil Data\ntnzldata[<chapters>][<verses>]","category":"page"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"The following are the options supported for each index:","category":"page"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"Chapters:\nInt64 - crpsdata[1] (extracts Chapter 1)\nUnitRange - crpsdata[15:24] (extracts Chapter 15 to 24)\nArray{Int64,1} - crpsdata[[3,9,10]] (extracts Chapter 3, 9 and 10)\nend (special) - crpsdata[end-3:end] (extracts Chapter 111 to 114).\nVerses:\nInt64 - crpsdata[1][1] (extracts Verse 1 of Chapter 1)\nUnitRange - crpsdata[2][15:24] (extracts verses 15 to 24 of Chapter 2)\nArray{Int64,1} - crpsdata[10][[3,9,10]] (extracts verses 3, 9 and 10 of Chapter 10)\nWords: (not applicable for TanzilData, only CorpusData)\nInt64 - crpsdata[1][1][1] (extracts Word 1 of Verse 1 of Chapter 1)\nUnitRange - crpsdata[2][8][1:3] (extracts words 1 to 3 of Verse 8 of Chapter 2)\nArray{Int64,1} - crpsdata[2][8][[1,3]] (extracts words 1 and 3 of Verse 8 of Chapter 2)\nParts: (not applicable for TanzilData, only CorpusData)\nInt64 - crpsdata[1][1][1][1] (extracts Part 1 of Word 1 of Verse 1 of Chapter 1)\nUnitRange - crpsdata[2][9][1][1:2] (extracts Part 1 to Part 2 of Word 1 of Verse 9 of Chapter 2)\nArray{Int64,1} - crpsdata[2][9][1][[1,2]] (extracts Part 1 and Part 2 of Word 1 of Verse 9 of Chapter 2)","category":"page"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"As an example, the following will extract Verse 9 of Chapter 2 in both TanzilData and CorpusData:","category":"page"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"using QuranTree\n\ndata = QuranData();\ncrps, tnzl = load(data);\ncrpsdata = table(crps);\ntnzldata = table(tnzl);\ncrpsdata[2][9]\ntnzldata[2][9]","category":"page"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"As shown above, the output of the indexing contains label for the chapter name, both in Arabic and in English. ","category":"page"},{"location":"man/indexing/#Combinations-of-Indices","page":"Indexing","title":"Combinations of Indices","text":"","category":"section"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"Combinations of these indices are also supported. For example, the following will extract Chapter 111 to 114, each with verses 1 and 3:","category":"page"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"crpsdata[111:114][[1,3]]\ntnzldata[111:114][[1,3]] ","category":"page"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"info: Note\nSpecial indexing end is also applicable, for example crpsdata[111:114][[1,3]] is the same as crpsdata[end-3:end][[1,3]], and tnzldata[111:114][[1,3]] is equivalent to tnzldata[end-3:end][[1,3]].","category":"page"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"Another example, the following will extract Part 1 of Words 1 to 3 of the above CorpusData output:","category":"page"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"crpsdata[111:114][[1,3]][1:3][1] ","category":"page"},{"location":"man/morphological_features/#Morphological-Features","page":"Morphological Features","title":"Morphological Features","text":"","category":"section"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"QuranTree.jl provides complete types for all morphological features and part of speech of The Quranic Arabic Corpus. ","category":"page"},{"location":"man/morphological_features/#Parsing","page":"Morphological Features","title":"Parsing","text":"","category":"section"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"The features of each token are encoded as String in its raw form, and in order to parse this as morphological feature, the function parse(QuranFeatures, x) is used, where x is the raw String input. For example, the following will parse the 2nd part of the 3rd word of the 1st verse of Chapter 1:","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"using Pkg\nPkg.add(\"Yunir\")\nPkg.add(\"TextAnalysis\")","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"using QuranTree\nusing Yunir\n\ncrps, tnzl = load(QuranData());\ncrpsdata = table(crps);\ntnzldata = table(tnzl);\ncrpsdata[1][1][3][2]\ntoken = crpsdata[1][1][3][2].data[!, :features]\nmfeat = parse(QuranFeatures, token[1])\ntypeof(mfeat)","category":"page"},{"location":"man/morphological_features/#Extracting-Detailed-Description","page":"Morphological Features","title":"Extracting Detailed Description","text":"","category":"section"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"To see the detailed description of the features, @desc is used.","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"@desc mfeat","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"The Julia's dump function can be used as to how to access the properties of the Stem object.","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"dump(mfeat)\n\n# access other feats of the token\nmfeat.feats","category":"page"},{"location":"man/morphological_features/#Checking-Parts-of-Speech","page":"Morphological Features","title":"Checking Parts of Speech","text":"","category":"section"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"isfeat(token, pos) checks whether the token's parsed feature is a particular part of speech (pos). For example, the following checks whether mfeat above, among others, is indeed Masculine and Singular.","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"isfeat(mfeat, Masculine)\nisfeat(mfeat, Feminine)\nisfeat(mfeat, Singular)\nisfeat(mfeat, Adjective) && isfeat(mfeat, Genetive)","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"Another example on checking whether the token has Root and Lemma features.","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"isfeat(mfeat, Root) && isfeat(mfeat, Lemma)","category":"page"},{"location":"man/morphological_features/#Lemma,-Root-and-Special","page":"Morphological Features","title":"Lemma, Root and Special","text":"","category":"section"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"root, lemma and special functions are used for extracting the Root, Lemma and Special morphological features, respectively. ","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"root(mfeat)\nlemma(mfeat)\n\narabic(root(mfeat))\narabic(lemma(mfeat))","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"The following example shows token with Special feature:","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"token2 = crpsdata.data[!, :features][53]\nmfeat2 = parse(QuranFeatures, token2)\nspecial(mfeat2)\narabic(special(mfeat2))","category":"page"},{"location":"man/morphological_features/#Implied-Verb-Features","page":"Morphological Features","title":"Implied Verb Features","text":"","category":"section"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"Some features of Quranic Arabic Verbs are implied. For example, the Voice feature of the Verb is default to Active voice, the Mood feature is default to Indicative mood, and the Verb form feature is default to First form. ","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"token3 = crpsdata.data[!, :features][27]","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"token3 is a Verb with no Mood and Verb form features stated. However, parsing this will automatically add the default values of the said features as shown below:","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"mfeat3 = parse(QuranFeatures, token3)\n@desc mfeat3","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"Another example where the Voice feature of the Verb is implied:","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"token4 = crpsdata.data[!, :features][27]\nmfeat4 = parse(QuranFeatures, token4)\n@desc mfeat4","category":"page"},{"location":"man/morphological_features/#POS-Abstract-Types","page":"Morphological Features","title":"POS Abstract Types","text":"","category":"section"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"The table below contains the complete list of the Part of Speech with its corresponding types. As shown in the table below, each part of speech has a corresponding parent type, which is a superset type in the Type Hierarchy. This is useful for grouping. For example, instead of using || (or) in checking for all tokens that are either FirstPerson, SecondPerson, or ThirdPerson, the parent type AbstractPerson can be used.","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"# without using parent type\nfunction allpersons(row)\n    is1st = isfeat(parse(QuranFeatures, row.features), FirstPerson)\n    is2nd = isfeat(parse(QuranFeatures, row.features), SecondPerson)\n    is3rd = isfeat(parse(QuranFeatures, row.features), ThirdPerson)\n    \n    return is1st || is2nd || is3rd\nend\ntbl1 = filter(allpersons, crpsdata.data);\ntbl1[!, [:form, :features]]\n# using parent type\ntbl2 = filter(row -> isfeat(parse(QuranFeatures, row.features), AbstractPerson), crpsdata.data);\ntbl2[!, [:form, :features]]\n\nsum(tbl1[!, :features] .!== tbl2[!, :features])","category":"page"},{"location":"man/morphological_features/#Part-of-Speech-Types","page":"Morphological Features","title":"Part of Speech Types","text":"","category":"section"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"<table>\n<thead><td>Type</td><td>Parent Type</td><td>Tag</td><td>Description</td><td>Arabic Name</td></thead>\n<tr><td><code> Noun</code></td><td><code>AbstractNoun</code></td><td><code>Symbol(\"N\")</code></td><td>Noun</td><td style=\"text-align:right !important\">اسم</td></tr>\n<tr><td><code> ProperNoun</code></td><td><code>AbstractNoun</code></td><td><code>Symbol(\"PN\")</code></td><td>Proper noun</td><td style=\"text-align:right !important\">اسم علم</td></tr>\n\n<tr><td><code> Adjective</code></td><td><code>AbstractDerivedNominal</code></td><td><code>Symbol(\"ADJ\")</code></td><td>Adjective</td><td style=\"text-align:right !important\">صفة</td></tr>\n<tr><td><code> ImperativeVerbalNoun</code></td><td><code>AbstractDerivedNominal</code></td><td><code>Symbol(\"IMPN\")</code></td><td>Imperative verbal noun</td><td style=\"text-align:right !important\">اسم فعل أمر</td></tr>\n\n<tr><td><code> Personal</code></td><td><code>AbstractPronoun</code></td><td><code>Symbol(\"PRON\")</code></td><td>Personal pronoun</td><td style=\"text-align:right !important\">ضمير</td></tr>\n<tr><td><code> Demonstrative</code></td><td><code>AbstractPronoun</code></td><td><code>Symbol(\"DEM\")</code></td><td>Demonstrative pronoun</td><td style=\"text-align:right !important\">اسم اشارة</td></tr>\n<tr><td><code> Relative</code></td><td><code>AbstractPronoun</code></td><td><code>Symbol(\"REL\")</code></td><td>Relative pronoun</td><td style=\"text-align:right !important\">اسم موصول</td></tr>\n\n<tr><td><code> Time</code></td><td><code>AbstractAdverb</code></td><td><code>Symbol(\"T\")</code></td><td>Time adverb</td><td style=\"text-align:right !important\">ظرف زمان</td></tr>\n<tr><td><code> Location</code></td><td><code>AbstractAdverb</code></td><td><code>Symbol(\"LOC\")</code></td><td>Location adverb</td><td style=\"text-align:right !important\">ظرف مكان</td></tr>\n\n<tr><td><code> Preposition</code></td><td><code>AbstractPreposition</code></td><td><code>Symbol(\"P\")</code></td><td>Preposition</td><td style=\"text-align:right !important\">حرف جر</td></tr>\n\n<tr><td><code> EmphaticLam</code></td><td><code>AbstractPrefix</code></td><td><code>Symbol(\"EMPH\")</code></td><td>Emphatic lam prefix</td><td style=\"text-align:right !important\">لام التوكيد</td></tr>\n<tr><td><code> ImperativeLam</code></td><td><code>AbstractPrefix</code></td><td><code>Symbol(\"IMPV\")</code></td><td>Imperative lam prefix</td><td style=\"text-align:right !important\">لام الامر</td></tr>\n<tr><td><code> PurposeLam</code></td><td><code>AbstractPrefix</code></td><td><code>Symbol(\"PRP\")</code></td><td>Purpose lam prefix</td><td style=\"text-align:right !important\">لام التعليل</td></tr>\n<tr><td><code> EmphaticNun</code></td><td><code>AbstractPrefix</code></td><td><code>Symbol(\"+n:EMPH\")</code></td><td>Emphatic lam prefix</td><td style=\"text-align:right !important\">لام التوكيد</td></tr>\n\n<tr><td><code> Coordinating</code></td><td><code>AbstractConjunction</code></td><td><code>Symbol(\"CONJ\")</code></td><td>Coordinating conjunction</td><td style=\"text-align:right !important\">حرف عطف</td></tr>\n<tr><td><code> Subordinating</code></td><td><code>AbstractConjunction</code></td><td><code>Symbol(\"SUB\")</code></td><td>Subordinating particle</td><td style=\"text-align:right !important\">حرف مصدري</td></tr>\n\n<tr><td><code> Accusative</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"ACC\")</code></td><td>Accusative particle</td><td style=\"text-align:right !important\">حرف نصب</td></tr>\n<tr><td><code> Amendment</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"AMD\")</code></td><td>Amendment particle</td><td style=\"text-align:right !important\">حرف استدراك</td></tr>\n<tr><td><code> Answer</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"ANS\")</code></td><td>Answer particle</td><td style=\"text-align:right !important\">حرف جواب</td></tr>\n<tr><td><code> Aversion</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"AVR\")</code></td><td>Aversion particle</td><td style=\"text-align:right !important\">حرف ردع</td></tr>\n<tr><td><code> Cause</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"CAUS\")</code></td><td>Particle of cause</td><td style=\"text-align:right !important\">حرف سببية</td></tr>\n<tr><td><code> Certainty</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"CERT\")</code></td><td>Particle of certainty</td><td style=\"text-align:right !important\">حرف تحقيق</td></tr>\n<tr><td><code> Circumstantial</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"CIRC\")</code></td><td>Circumstantial particle</td><td style=\"text-align:right !important\">حرف حال</td></tr>\n<tr><td><code> Comitative</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"COM\")</code></td><td>Comitative particle</td><td style=\"text-align:right !important\">واو المعية</td></tr>\n<tr><td><code> Conditional</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"COND\")</code></td><td>Conditional particle</td><td style=\"text-align:right !important\">حرف شرط</td></tr>\n<tr><td><code> Equalization</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"EQ\")</code></td><td>Equalization particle</td><td style=\"text-align:right !important\">حرف تسوية</td></tr>\n<tr><td><code> Exhortation</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"EXH\")</code></td><td>Exhortation particle</td><td style=\"text-align:right !important\">حرف تحضيض</td></tr>\n<tr><td><code> Explanation</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"EXL\")</code></td><td>Explanation particle</td><td style=\"text-align:right !important\">حرف تفصيل</td></tr>\n<tr><td><code> Exceptive</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"EXP\")</code></td><td>Exceptive particle</td><td style=\"text-align:right !important\">أداة استثناء</td></tr>\n<tr><td><code> Future</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"FUT\")</code></td><td>Future particle</td><td style=\"text-align:right !important\">حرف استقبال</td></tr>\n<tr><td><code> Inceptive</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"INC\")</code></td><td>Inceptive particle</td><td style=\"text-align:right !important\">حرف ابتداء</td></tr>\n<tr><td><code> Interpretation</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"INT\")</code></td><td>Inceptive particle</td><td style=\"text-align:right !important\">حرف تفسير</td></tr>\n<tr><td><code> Interogative</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"INTG\")</code></td><td>Interogative particle</td><td style=\"text-align:right !important\">حرف استفهام</td></tr>\n<tr><td><code> Negative</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"NEG\")</code></td><td>Negative particle</td><td style=\"text-align:right !important\">حرف نفي</td></tr>\n<tr><td><code> Preventive</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"PREV\")</code></td><td>Preventive particle</td><td style=\"text-align:right !important\">حرف كاف</td></tr>\n<tr><td><code> Prohibition</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"PRO\")</code></td><td>Prohibition particle</td><td style=\"text-align:right !important\">حرف نهي</td></tr>\n<tr><td><code> Resumption</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"REM\")</code></td><td>Resumption particle</td><td style=\"text-align:right !important\"حرف استئنافية</td></tr>\n<tr><td><code> Restriction</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"RES\")</code></td><td>Restriction particle</td><td style=\"text-align:right !important\">أداة حصر</td></tr>\n<tr><td><code> Retraction</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"RET\")</code></td><td>Retraction particle</td><td style=\"text-align:right !important\">حرف اضراب</td></tr>\n<tr><td><code> Result</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"RSLT\")</code></td><td>Result particle</td><td style=\"text-align:right !important\">حرف واقع في جواب الشرط</td></tr>\n<tr><td><code> Supplemental</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"SUP\")</code></td><td>Suplemental particle</td><td style=\"text-align:right !important\">حرف زائد</td></tr>\n<tr><td><code> Surprise</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"SUR\")</code></td><td>Surprise particle</td><td style=\"text-align:right !important\">حرف فجاءة</td></tr>\n<tr><td><code> Vocative</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"VOC\")</code></td><td>Vocative particle</td><td style=\"text-align:right !important\">حرف نداء</td></tr>\n\n<tr><td><code> DisconnectedLetters</code></td><td><code>AbstractDisLetters</code></td><td><code>Symbol(\"INL\")</code></td><td>Quranic initials</td><td style=\"text-align:right !important\">حروف مقطعة</td></tr>\n\n<tr><td><code> FirstPerson</code></td><td><code>AbstractPerson</code></td><td><code>Symbol(\"1\")</code></td><td>First person</td><td style=\"text-align:right !important\">الاسناد</td></tr>\n<tr><td><code> SecondPerson</code></td><td><code>AbstractPerson</code></td><td><code>Symbol(\"2\")</code></td><td>Second person</td><td style=\"text-align:right !important\">الاسناد</td></tr>\n<tr><td><code> ThirdPerson</code></td><td><code>AbstractPerson</code></td><td><code>Symbol(\"3\")</code></td><td>Third person</td><td style=\"text-align:right !important\">الاسناد</td></tr>\n\n<tr><td><code> Masculine</code></td><td><code>AbstractGender</code></td><td><code>Symbol(\"M\")</code></td><td>Masculine</td><td style=\"text-align:right !important\">الجنس</td></tr>\n<tr><td><code> Feminine</code></td><td><code>AbstractGender</code></td><td><code>Symbol(\"F\")</code></td><td>Feminine</td><td style=\"text-align:right !important\">الجنس</td></tr>\n\n<tr><td><code> Singular</code></td><td><code>AbstractNumber</code></td><td><code>Symbol(\"S\")</code></td><td>Singular</td><td style=\"text-align:right !important\">العدد</td></tr>\n<tr><td><code> Dual</code></td><td><code>AbstractNumber</code></td><td><code>Symbol(\"D\")</code></td><td>Dual</td><td style=\"text-align:right !important\">العدد</td></tr>\n<tr><td><code> Plural</code></td><td><code>AbstractNumber</code></td><td><code>Symbol(\"P\")</code></td><td>Plural</td><td style=\"text-align:right !important\">العدد</td></tr>\n\n<tr><td><code> Verb</code></td><td><code>AbstractPartOfSpeech</code></td><td><code>Symbol(\"V\")</code></td><td>Verb</td><td style=\"text-align:right !important\">فعل</td></tr>\n<tr><td><code> Perfect</code></td><td><code>AbstractAspect</code></td><td><code>Symbol(\"PERF\")</code></td><td>Perfect verb</td><td style=\"text-align:right !important\">فعل ماض</td></tr>\n<tr><td><code> Imperfect</code></td><td><code>AbstractAspect</code></td><td><code>Symbol(\"IMPF\")</code></td><td>Imperfect verb</td><td style=\"text-align:right !important\">فعل مضارع</td></tr>\n<tr><td><code> Imperative</code></td><td><code>AbstractAspect</code></td><td><code>Symbol(\"IMPV\")</code></td><td>Imperative verb</td><td style=\"text-align:right !important\">فعل أمر</td></tr>\n<tr><td><code> Indicative</code></td><td><code>AbstractMood</code></td><td><code>Symbol(\"IND\")</code></td><td>Indicative mood (default)</td><td style=\"text-align:right !important\">مرفوع</td></tr>\n<tr><td><code> Subjunctive</code></td><td><code>AbstractMood</code></td><td><code>Symbol(\"SUBJ\")</code></td><td>Subjunctive mood</td><td style=\"text-align:right !important\">منصوب</td></tr>\n<tr><td><code> Jussive</code></td><td><code>AbstractMood</code></td><td><code>Symbol(\"JUS\")</code></td><td>Jussive mood</td><td style=\"text-align:right !important\">مجزوم</td></tr>\n<tr><td><code> Active</code></td><td><code>AbstractVoice</code></td><td><code>Symbol(\"ACT\")</code></td><td>Active voice (default)</td><td style=\"text-align:right !important\">مبني للمعلوم</td></tr>\n<tr><td><code> Passive</code></td><td><code>AbstractVoice</code></td><td><code>Symbol(\"PASS\")</code></td><td>Passive voice</td><td style=\"text-align:right !important\">مبني للمجهول</td></tr>\n\n<tr><td><code> VerbFormI</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"I\")</code></td><td>First verb form (default)</td><td style=\"text-align:right !important\">فعل</td></tr>\n<tr><td><code> VerbFormII</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"II\")</code></td><td>Second verb form</td><td style=\"text-align:right !important\">فعل</td></tr>\n<tr><td><code> VerbFormIII</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"III\")</code></td><td>Third verb form</td><td style=\"text-align:right !important\">فعل</td></tr>\n<tr><td><code> VerbFormIV</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"IV\")</code></td><td>Fourth verb form</td><td style=\"text-align:right !important\">فعل</td></tr>\n<tr><td><code> VerbFormV</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"V\")</code></td><td>Fifth verb form</td><td style=\"text-align:right !important\">فعل</td></tr>\n<tr><td><code> VerbFormVI</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"VI\")</code></td><td>Sixth verb form</td><td style=\"text-align:right !important\">فعل</td></tr>\n<tr><td><code> VerbFormVII</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"VII\")</code></td><td>Seventh verb form</td><td style=\"text-align:right !important\">فعل</td></tr>\n<tr><td><code> VerbFormVIII</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"VIII\")</code></td><td>Eighth verb form</td><td style=\"text-align:right !important\">فعل</td></tr>\n<tr><td><code> VerbFormIX</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"IX\")</code></td><td>Ninth verb form</td><td style=\"text-align:right !important\">فعل</td></tr>\n<tr><td><code> VerbFormX</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"X\")</code></td><td>Tenth verb form</td><td style=\"text-align:right !important\">فعل</td></tr>\n<tr><td><code> VerbFormXI</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"XI\")</code></td><td>Eleventh verb form</td><td style=\"text-align:right !important\">فعل</td></tr>\n<tr><td><code> VerbFormXII</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"XII\")</code></td><td>Twelfth verb form</td><td style=\"text-align:right !important\">فعل</td></tr>\n\n<tr><td><code> ActiveParticle</code></td><td><code>AbstractDerivedNoun</code></td><td><code>Symbol(\"ACT PCPL\")</code></td><td>Active particle</td><td style=\"text-align:right !important\">اسم فاعل</td></tr>\n<tr><td><code> PassiveParticle</code></td><td><code>AbstractDerivedNoun</code></td><td><code>Symbol(\"PASS PCPL\")</code></td><td>Passive particle</td><td style=\"text-align:right !important\">اسم مفعول</td></tr>\n<tr><td><code> VerbalNoun</code></td><td><code>AbstractDerivedNoun</code></td><td><code>Symbol(\"VN\")</code></td><td>Verbal noun</td><td style=\"text-align:right !important\">مصدر</td></tr>\n\n<tr><td><code> Definite</code></td><td><code>AbstractState</code></td><td><code>Symbol(\"DEF\")</code></td><td>Definite state</td><td style=\"text-align:right !important\">معرفة</td></tr>\n<tr><td><code> Indefinite</code></td><td><code>AbstractState</code></td><td><code>Symbol(\"INDEF\")</code></td><td>Indefinite state</td><td style=\"text-align:right !important\">نكرة</td></tr>\n<tr><td><code> Nominative</code></td><td><code>AbstractCase</code></td><td><code>Symbol(\"NOM\")</code></td><td>Nominative case</td><td style=\"text-align:right !important\">مرفوع</td></tr>\n<tr><td><code> Genetive</code></td><td><code>AbstractCase</code></td><td><code>Symbol(\"GEN\")</code></td><td>Genetive case</td><td style=\"text-align:right !important\">مجرور</td></tr>\n</table>","category":"page"},{"location":"man/data_processing/#Data-Processing","page":"Data Processing","title":"Data Processing","text":"","category":"section"},{"location":"man/data_processing/","page":"Data Processing","title":"Data Processing","text":"Special utilities for Arabic Natural Language Processing (ANLP) for data preprocessing are provided by Yunir.jl, for example on tasks like character dediacritization and character normalization.","category":"page"},{"location":"man/data_processing/#Character-Dediacritization","page":"Data Processing","title":"Character Dediacritization","text":"","category":"section"},{"location":"man/data_processing/","page":"Data Processing","title":"Data Processing","text":"dediac works for both Arabic, Buckwalter and custom transliterations.","category":"page"},{"location":"man/data_processing/","page":"Data Processing","title":"Data Processing","text":"using Pkg\nPkg.add(\"Yunir\")","category":"page"},{"location":"man/data_processing/","page":"Data Processing","title":"Data Processing","text":"using QuranTree\nusing Yunir\n\ncrps, tnzl = load(QuranData());\ncrpsdata = table(crps);\ntnzldata = table(tnzl);\navrs = verses(tnzldata[1][1])[1]\ndediac(avrs)\nbvrs = verses(crpsdata[1][1])[1]\ndediac(bvrs)\ndediac(avrs) === arabic(dediac(bvrs))","category":"page"},{"location":"man/data_processing/","page":"Data Processing","title":"Data Processing","text":"Custom transliteration is also dediacritizable as shown below,","category":"page"},{"location":"man/data_processing/","page":"Data Processing","title":"Data Processing","text":"old_keys = collect(keys(BW_ENCODING));\nnew_vals = reverse(collect(values(BW_ENCODING)));\nmy_encoder = Dict(old_keys .=> new_vals);\n\n@transliterator my_encoder \"MyEncoder\"\nencode(avrs)\narabic(encode(avrs))\ndediac(encode(avrs))\narabic(dediac(encode(avrs)))","category":"page"},{"location":"man/data_processing/","page":"Data Processing","title":"Data Processing","text":"To reset the transliteration,","category":"page"},{"location":"man/data_processing/","page":"Data Processing","title":"Data Processing","text":"@transliterator :default\nencode(avrs)\ndediac(encode(avrs))","category":"page"},{"location":"man/data_processing/#Character-Normalization","page":"Data Processing","title":"Character Normalization","text":"","category":"section"},{"location":"man/data_processing/","page":"Data Processing","title":"Data Processing","text":"Normalization is done using the normalize function. It works for Arabic, Buckwalter and other custom transliterations. For example, the following normalizes the avrs above:","category":"page"},{"location":"man/data_processing/","page":"Data Processing","title":"Data Processing","text":"normalize(avrs)\nnormalize(dediac(avrs))\ndediac(normalize(avrs))\n# using pipe notation\navrs |> dediac |> normalize |> encode","category":"page"},{"location":"man/data_processing/","page":"Data Processing","title":"Data Processing","text":"Specific character can be normalized:","category":"page"},{"location":"man/data_processing/","page":"Data Processing","title":"Data Processing","text":"avrs1 = verses(tnzldata[2][4])[1]\nnormalize(avrs1, :alif_maddah)\nnormalize(avrs1, :alif_hamza_above)\nnormalize(avrs, [:alif_khanjareeya, :hamzat_wasl])","category":"page"},{"location":"man/data_processing/","page":"Data Processing","title":"Data Processing","text":"Or using the CorpusData instead of the TanzilData,","category":"page"},{"location":"man/data_processing/","page":"Data Processing","title":"Data Processing","text":"avrs2 = arabic(verses(crpsdata[2][15])[1])\nnormalize(avrs2, :ya_hamza_above)","category":"page"},{"location":"man/getting_started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"CurrentModule = QuranTree\nDocTestSetup = quote\n    using QuranTree\nend","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"There are two datasets included in the library, namely the Quranic Arabic Corpus and the Tanzil data. To load, simply run the following:","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"using QuranTree\n\ndata = QuranData()\ncrps, tnzl = load(data);","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"The QuranData() is a struct containing the default file path of the data. The load function returns a tuple for both the Quranic Corpus and the Tanzil Data. The loaded data is encoded in a immutable (read-only) array, so users cannot change it. This is specified in the type of the object as shown below:","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"crps\ntnzl","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"In order to parse these raw data, the table function is used:","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"crpsdata = table(crps);\ntnzldata = table(tnzl);\ncrpsdata\ntnzldata","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"The resulting tables are of type CorpusData and TanzilData, respectively, and are encoded on top of DataFrames.jl's IndexedTable, which can be accessed by simply calling the macro @data (for example, @data crpsdata or crpsdata.data).","category":"page"},{"location":"man/getting_started/#Manipulating-the-Table","page":"Getting Started","title":"Manipulating the Table","text":"","category":"section"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"As mentioned above, the table is based on DataFrames.jl's  DataFrame. Therefore, any data manipulation is done through the DataFrames.jl's APIs. To access the data, simply call the property with .data or using the macro @data:","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"crpstbl = @data crpsdata; # or crpsdata.data\ntnzltbl = @data tnzldata; # or tnzldata.data\ncrpstbl\ntnzltbl","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"Note that, crpsdata and crpstbl have different types (as in the case of tnzldata and tnzltbl) as shown below:","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"typeof(crpsdata)\ntypeof(crpstbl)","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"From here, any data manipulation is done using DataFrames.jl's APIs. For example, the following will select the feature column of the crpstbl:","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"using Pkg\nPkg.add(\"DataFrames\")","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"using DataFrames\n\ncrpstbl[!, :features]\n\n# or equivalent to\ncrpsdata.data[!, :features]","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"info: Note\nYou need to install DataFrames.jl to successfully run the code. using Pkg\nPkg.add(\"DataFrames\")","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"To filter tokens that are Prefixed features, the Base.jl's occursin can be used:","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"filter(t -> occursin(r\"^PREFIX\", t.features), crpstbl)\n\n# or equivalent to\nfilter(t -> occursin(r\"^PREFIX\", t.features), crpsdata.data)","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"The main point here is that, any data manipulation on the CorpusTable and TanzilData is done through DataFrames.jl's APIs.","category":"page"},{"location":"man/nlp/text_summarization/#Text-Summarization","page":"Text Summarization","title":"Text Summarization","text":"","category":"section"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"This section will demonstrate how to use TextAnalysis.jl (Julia's leading NLP library) for QuranTree.jl. In particular, in summarizing the Qur'an, specifically Chapter 18 (The Cave) which most Muslims are familiar with (this is the chapter recommended to be read every Friday). The algorithm used for summarization is called TextRank, an application of PageRank algorithm to text datasets.","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"using Pkg\nPkg.add(\"Yunir\")\nPkg.add(\"TextAnalysis\")","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"using QuranTree\nusing TextAnalysis\nusing Yunir\n\ncrps, tnzl = QuranData() |> load;\ncrpsdata = table(crps)","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"info: Note\nYou need to install Yunir.jl to successfully run the code. using Pkg\nPkg.add(\"Yunir\")\nPkg.add(\"TextAnalysis\")","category":"page"},{"location":"man/nlp/text_summarization/#Data-Preprocessing","page":"Text Summarization","title":"Data Preprocessing","text":"","category":"section"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"The first data processing will be the removal of all Disconnected Letters (like الٓمٓ ,الٓمٓصٓ, among others), Prepositions, Particles, Conjunctions, Pronouns, and Adverbs. This is done as follows:","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"function preprocess(s::String)\n    feat = parse(QuranFeatures, s)\n    disletters = isfeat(feat, AbstractDisLetters)\n    prepositions = isfeat(feat, AbstractPreposition)\n    particles = isfeat(feat, AbstractParticle)\n    conjunctions = isfeat(feat, AbstractConjunction)\n    pronouns = isfeat(feat, AbstractPronoun)\n    adverbs = isfeat(feat, AbstractAdverb)\n\n    return !disletters && !prepositions && !particles && !conjunctions && !pronouns && !adverbs\nend\n\ncrpstbl = filter(t -> preprocess(t.features), crpsdata[18].data)","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"Next, we create a copy of the above data (so we have the original state), and use the copy to do further data processing.","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"crpsnew = deepcopy(crpstbl)\nfeats = crpsnew[!, :features]\nfeats = parse.(QuranFeatures, feats)","category":"page"},{"location":"man/nlp/text_summarization/#Lemmatization","page":"Text Summarization","title":"Lemmatization","text":"","category":"section"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"Using the above parsed features, we then convert the form of the tokens into its lemma. This is useful for addressing variations due to inflection.","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"lemmas = lemma.(feats)\nforms1 = crpsnew[!, :form]\nforms1[.!ismissing.(lemmas)] = lemmas[.!ismissing.(lemmas)]","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"tip: Tips\nWe can also use the Root features instead, which is done by simply replacing lemma.(feats) with root.(feats). ","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"We now put back the new form to the corpus:","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"crpsnew[!, :form] = forms1\ncrpsnew = CorpusData(crpsnew)","category":"page"},{"location":"man/nlp/text_summarization/#Tokenization","page":"Text Summarization","title":"Tokenization","text":"","category":"section"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"We want to summarize the Qur'an at the verse level. Thus, the token would be the verses of the corpus. From these verses, we further clean it by dediacritization and normalization of the characters:","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"lem_vrs = verses(crpsnew)\nvrs = normalize.(dediac.(lem_vrs))","category":"page"},{"location":"man/nlp/text_summarization/#Creating-a-TextAnalysis-Corpus","page":"Text Summarization","title":"Creating a TextAnalysis Corpus","text":"","category":"section"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"To make use of the TextAnalysis.jl's APIs, we need to encode the processed Quranic Corpus to TextAnalysis.jl's Corpus. In this case, we will create a StringDocument of the verses.","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"crps1 = Corpus(StringDocument.(vrs))","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"We then update the lexicon and inverse index for efficient indexing of the corpus.","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"update_lexicon!(crps1)\nupdate_inverse_index!(crps1)","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"Next, we create a Document Term Matrix, which will have rows of verses and columns of words describing the verses.","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"m1 = DocumentTermMatrix(crps1)","category":"page"},{"location":"man/nlp/text_summarization/#TF-IDF","page":"Text Summarization","title":"TF-IDF","text":"","category":"section"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"Finally, we compute the corresponding TF-IDF, which will serve as the feature matrix.","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"tfidf = tf_idf(m1)","category":"page"},{"location":"man/nlp/text_summarization/#Summarizing-the-Qur'an","page":"Text Summarization","title":"Summarizing the Qur'an","text":"","category":"section"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"Using the TF-IDF, we compute the product of it with its transpose to come up with a square matrix, where the elements describes the linkage between the verses, or the similarity between the verses.","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"sim_mat = tfidf * tfidf'","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"At this point, we can now write the code for the PageRank algorithm:","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"using LinearAlgebra\nfunction pagerank(A; Niter=20, damping=.15)\n    Nmax = size(A, 1)\n    r = rand(1, Nmax);              # Generate a random starting rank.\n    r = r ./ norm(r, 1);            # Normalize\n    a = (1 - damping) ./ Nmax;      # Create damping vector\n\n    for i=1:Niter\n        s = r * A\n        rmul!(s, damping)\n        r = s .+ (a * sum(r, dims=2));   # Compute PageRank.\n    end\n\n    r = r ./ norm(r, 1);\n\n    return r\nend","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"Using this function, we apply it to the above similarity matrix (sim_mat) and extract the PageRank scores for all verses. These scores will serve as the weights, and so higher scores suggest that the verse has a lot of connections to other verses in the corpus, which means it represents per se the corpus.","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"p = pagerank(sim_mat)","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"Now we sort these scores in descending order and use it to rearrange the original verses:","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"idx = sortperm(vec(p), rev=true)[1:10]","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"Finally, the following 10 verses best summarizes the corpus (Chapter 18) using TextRank:","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"verse_nos = verses(CorpusData(crpstbl), number=true, start_end=false)\n\nverse_out = String[];\nchapter = Int64[];\nverse = Int64[];\nfor v in verse_nos\n    verse_out = vcat(verse_out, verses(crpsdata[v[1]][v[2]]))\n    chapter = vcat(chapter, repeat(v[1], inner=length(v[2])))\n    verse = vcat(verse, v[2])\nend\n\nusing DataFrames\ntbl = DataFrame(\n    chapter=chapter[idx], \n    verse=verse[idx], \n    verse_text=arabic.(verse_out[idx])\n);\n\ntbl","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"The following is the table of the above output properly formatted in HTML.","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"Pkg.add(\"Latexify\")\nusing Latexify\n\nmdtable(DataFrame(tbl), latex=false)","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"The following are the translations of the above verses:","category":"page"},{"location":"man/nlp/text_summarization/","page":"Text Summarization","title":"Text Summarization","text":"<table>\n    <thead><td>Chapter</td><td>Verse</td><td>English Translation</td></thead>\n    <tbody>\n    <tr><td>18</td><td>85</td><td>So he travelled a course,</td></tr>\n    <tr><td>18</td><td>89</td><td>Then he travelled a ˹different˺ course</td></tr>\n    <tr><td>18</td><td>92</td><td>Then he travelled a ˹third˺ course</td></tr>\n    <tr><td>18</td><td>66</td><td>Moses said to him, “May I follow you, provided that you teach me some of the right guidance you have been taught?”</td></tr>\n    <tr><td>18</td><td>70</td><td>He responded, “Then if you follow me, do not question me about anything until I ˹myself˺ clarify it for you.”</td></tr>\n    <tr><td>18</td><td>8</td><td>And We will certainly reduce whatever is on it to barren ground.</td></tr>\n    <tr><td>18</td><td>28</td><td>And patiently stick with those who call upon their Lord morning and evening, seeking His pleasure. Do not let your eyes look beyond them, desiring the luxuries of this worldly life. And do not obey those whose hearts We have made heedless of Our remembrance, who follow ˹only˺ their desires and whose state is ˹total˺ loss.</td></tr>\n    <tr><td>18</td><td>108</td><td>where they will be forever, never desiring anywhere else.</td></tr>\n    <tr><td>18</td><td>91</td><td>So it was. And We truly had full knowledge of him.</td></tr>\n    <tr><td>18</td><td>68</td><td>And how can you be patient with what is beyond your ˹realm of˺ knowledge?”</td></tr>\n    </tbody>\n</table>","category":"page"},{"location":"#QuranTree.jl-Documentation","page":"Home","title":"QuranTree.jl Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = QuranTree\nDocTestSetup = quote\n    using QuranTree\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"A Julia package for working with the Qur'an (Islam's Holy Book), computationally. QuranTree.jl is based on The Quranic Arabic Corpus by Kais Dukes of University of Leeds, and is aimed at offerring a high-level API alternative to the Java package, JQuranTree. ","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The following are the features of the package:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Indexing\nIntuitive indexing for Chapters, Verses, Words and Parts\nComplete type for all Morphological Features and Part of Speech\nOthers\nSupports Tanzil data\nRead-only array for raw datasets (Corpus and Tanzil)","category":"page"},{"location":"#Yunir.jl-support","page":"Home","title":"Yunir.jl support","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Yunir.jl is a lightweight Arabic NLP toolkit that well supports QuranTree.jl for the following functionalities:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Transliteration\nBuckwalter as default\nFunctionality for creating custom transliterator\nUpdate transliteration in 1 line of code\nSeemless transition between Arabic and Buckwalter (or custom transliteration)\nSimple Encoding (refer here)\nCharacter Normalization\nFor both Arabic and Buckwalter (or custom transliteration)\nCharacter Dediacritization\nFor both Arabic and Buckwalter (or custom transliteration)\nOrthographical Analysis","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install the package, run the following:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg\njulia> Pkg.add(\"QuranTree\")","category":"page"},{"location":"man/api/#API-References","page":"API","title":"API References","text":"","category":"section"},{"location":"man/api/","page":"API","title":"API","text":"Modules = [QuranTree]","category":"page"},{"location":"man/api/#QuranTree.Lemma","page":"API","title":"QuranTree.Lemma","text":"Lemma(data::String)\n\nConvert a string to a Lemma object.\n\n\n\n\n\n","category":"type"},{"location":"man/api/#QuranTree.Prefix","page":"API","title":"QuranTree.Prefix","text":"Prefix(data::Symbol, pos::AbstractPartOfSpeech)\n\nCreate a new Prefix object with data as the symbol of the morphological feature with pos as  the corresponding Part of Speech.\n\n\n\n\n\n","category":"type"},{"location":"man/api/#QuranTree.QuranFeatures","page":"API","title":"QuranTree.QuranFeatures","text":"QuranFeatures(data::String)\n\nConvert a string to morphological feature object.\n\n\n\n\n\n","category":"type"},{"location":"man/api/#QuranTree.Root","page":"API","title":"QuranTree.Root","text":"Root(data::String)\n\nConvert a string to a Root object.\n\n\n\n\n\n","category":"type"},{"location":"man/api/#QuranTree.Special","page":"API","title":"QuranTree.Special","text":"Special(data::String)\n\nConvert a string to a Special object.\n\n\n\n\n\n","category":"type"},{"location":"man/api/#QuranTree.Stem","page":"API","title":"QuranTree.Stem","text":"Stem(data::Symbol, pos::AbstractPartOfSpeech)\n\nCreate a new Stem object with data as the symbol of the morphological feature with pos as  the corresponding Part of Speech.\n\n\n\n\n\n","category":"type"},{"location":"man/api/#QuranTree.Suffix","page":"API","title":"QuranTree.Suffix","text":"Suffix(data::Symbol, pos::AbstractPartOfSpeech)\n\nCreate a new Suffix object with data as the symbol of the morphological feature with pos as  the corresponding Part of Speech.\n\n\n\n\n\n","category":"type"},{"location":"man/api/#Base.parse-Tuple{Type{QuranFeatures}, AbstractString}","page":"API","title":"Base.parse","text":"parse(::Type{QuranFeatures}, f::AbstractString)\n\nExtract the features of a morphological Feature object.\n\nExamples\n\njulia> data = QuranData()\njulia> crps, tnzl = load(data)\njulia> crpsdata = table(crps)\njulia> tnzldata = table(tnzl)\njulia> parse(QuranFeatures, select(crpsdata.data, :features)[53])\nStem(:NEG, NEG, AbstractQuranFeature[Lemma(\"laA\"), Special(\"<in~\")])\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.chapter_name-Tuple{AbstractQuran}","page":"API","title":"QuranTree.chapter_name","text":"chapter_name(quran::AbstractQuran, transliterate::Bool=false; lang::Symbol=:arabic)\n\nExtract the chapter name of the input quran, in either :arabic (default) or :english\n\nExamples\n\njulia> data = QuranData()\njulia> crps, tnzl = load(data)\njulia> crpsdata = table(crps)\njulia> tnzldata = table(tnzl)\njulia> chapter_name(crpsdata[13][2][1])\n\"ٱلرَّعْد\"\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.lemma-Tuple{AbstractQuranFeature}","page":"API","title":"QuranTree.lemma","text":"lemma(feat::AbstractQuranFeature)\n\nExtract the lemma of the feature.\n\nExamples\n\njulia> data = QuranData()\njulia> crps, tnzl = load(data)\njulia> crpsdata = table(crps)\njulia> tnzldata = table(tnzl)\njulia> lemma(parse(QuranFeatures, select(crpsdata[112].data, :features)[1]))\n\"qaAla\"\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.load-Tuple{QuranData}","page":"API","title":"QuranTree.load","text":"load(data::QuranData)\n\nLoad the raw QuranData as a ReadOnlyArray for both Quranic Corpus and Tanzil Data.\n\nExamples\n\njulia> data = QuranData()\njulia> crps, tnzl = load(data);\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.root-Tuple{AbstractQuranFeature}","page":"API","title":"QuranTree.root","text":"root(feat::AbstractQuranFeature)\n\nExtract the root of the feature.\n\nExamples\n\njulia> data = QuranData()\njulia> crps, tnzl = load(data)\njulia> crpsdata = table(crps)\njulia> tnzldata = table(tnzl)\njulia> root(parse(QuranFeatures, select(crpsdata[112].data, :features)[1]))\n\"qwl\"\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.special-Tuple{AbstractQuranFeature}","page":"API","title":"QuranTree.special","text":"special(feat::AbstractQuranFeature)\n\nExtract the special feature of the token.\n\nExamples\n\njulia> data = QuranData()\njulia> crps, tnzl = load(data)\njulia> crpsdata = table(crps)\njulia> tnzldata = table(tnzl)\njulia> special(parse(QuranFeatures, select(crpsdata.data, :features)[53]))\n\"<in~\"\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.table-Tuple{CorpusRaw}","page":"API","title":"QuranTree.table","text":"table(crps::CorpusRaw)\n\nConvert the CorpusRaw read-only array into a tabularized CorpusData using IndexedTable.\n\nExamples\n\njulia> data = QuranData()\njulia> crps, tnzl = load(data)\njulia> crpsdata = table(crps);\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.table-Tuple{TanzilRaw}","page":"API","title":"QuranTree.table","text":"table(tnzl::TanzilRaw)\n\nConvert the TanzilRaw read-only array into a tabularized TanzilData using IndexedTable.\n\nExamples\n\njulia> data = QuranData()\njulia> crps, tnzl = load(data)\njulia> tnzldata = table(tnzl);\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.verses-Tuple{AbstractQuran}","page":"API","title":"QuranTree.verses","text":"verses(quran::AbstractQuran; number=false, start_end=true)\n\nExtract the verses of a AbstractQuran object.\n\nExamples\n\njulia> data = QuranData()\njulia> crps, tnzl = load(data)\njulia> crpsdata = table(crps)\njulia> tnzldata = table(tnzl)\njulia> verses(crpsdata[1])[7]\n\"Sira`Ta {l~a*iyna >anoEamota Ealayohimo gayori {lomagoDuwbi Ealayohimo walaA {lD~aA^l~iyna\"\njulia> verses(crpsdata[113:114], number=true)[1]\n\"113:(1,5)\"\njulia> verses(crpsdata[113:114], number=true, start_end=false)[1]\n([113], [1, 2, 3, 4, 5])\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.verses-Tuple{DataFrames.DataFrame, Int64, Int64}","page":"API","title":"QuranTree.verses","text":"verses(data::DataFrame[, a::Int64[, b::Int64]]; number=false, start_end=true)\n\nExtract the verses of a DataFrame object from row a to row b.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.verses-Tuple{TanzilData}","page":"API","title":"QuranTree.verses","text":"verses(quran::TanzilData)\n\nExtract the verses of a TanzilData object.\n\nExamples\n\njulia> data = QuranData()\njulia> crps, tnzl = load(data)\njulia> crpsdata = table(crps)\njulia> tnzldata = table(tnzl)\njulia> verses(tnzldata)[1]\n\"بِسْمِ ٱللَّهِ ٱلرَّحْمَٰنِ ٱلرَّحِيمِ\"\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.words-Tuple{AbstractQuran}","page":"API","title":"QuranTree.words","text":"words(quran::AbstractQuran)\n\nExtract words of the input quran.\n\nExamples\n\njulia> data = QuranData()\njulia> crps, tnzl = load(data)\njulia> crpsdata = table(crps)\njulia> tnzldata = table(tnzl)\njulia> words(tnzldata[1][7])[1]\n\"صِرَٰطَ\"\n\n\n\n\n\n","category":"method"},{"location":"man/api/#Yunir.isfeat-Tuple{AbstractQuranFeature, Type{var\"#s112\"} where var\"#s112\"<:AbstractQuranFeature}","page":"API","title":"Yunir.isfeat","text":"isfeat(feat::QuranFeatures, pos::Type{<:AbstractQuranFeature})\n\nCheck if the morphological Feature object is a type of pos.\n\nExamples\n\njulia> data = QuranData()\njulia> crps, tnzl = load(data)\njulia> crpsdata = table(crps)\njulia> tnzldata = table(tnzl)\njulia> isfeat(parse(QuranFeatures, select(crpsdata[1].data, :features)[2]), Stem)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.@data-Tuple{Any}","page":"API","title":"QuranTree.@data","text":"@data(expr)\n\nExtract the data property object.\n\nExamples\n\njulia> data = QuranData()\njulia> crps, tnzl = load(data)\njulia> crpsdata = table(crps);\njulia> tnzldata = table(tnzl);\njulia> feat = parse(Features, select(crpsdata.data, :features)[53])\njulia> @data feat\n:NEG\n\n\n\n\n\n","category":"macro"},{"location":"man/api/#QuranTree.@desc-Tuple{Any}","page":"API","title":"QuranTree.@desc","text":"@desc(expr)\n\nExtract the detailed description of a AbstractQuranFeature.\n\nExamples\n\njulia> data = QuranData()\njulia> crps, tnzl = load(data)\njulia> crpsdata = table(crps);\njulia> tnzldata = table(tnzl);\njulia> feat = parse(Features, select(crpsdata.data, :features)[53])\njulia> @desc feat\nStem\n────\nNegative:\n ├ data: NEG\n ├ desc: Negative particle\n └ ar_label: حرف نفي\nLemma:\n └ data: laA\nSpecial:\n └ data: <in~\n\n\n\n\n\n","category":"macro"},{"location":"man/nlp/topic_modeling/#Topic-Modeling","page":"Topic Modeling","title":"Topic Modeling","text":"","category":"section"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"Another application of Natural Language Processing is the Topic Modeling, which aims to extract the topics from a given document. In this section, we are going to apply this to Chapter 18 (the Cave) of the Qur'an. To do this, we are going to use the TextAnalysis.jl library. The model for this task will be the Latent Dirichlet Allocation (LDA). To start with, load the data as follows:","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"using Pkg\nPkg.add(\"TextAnalysis\")\nPkg.add(\"Yunir\")","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"using QuranTree\nusing TextAnalysis\nusing Yunir\n\ncrps, tnzl = QuranData() |> load;\ncrpsdata = table(crps)","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"info: Note\nYou need to install Yunir.jl to successfully run the code. using Pkg\nPkg.add(\"Yunir\")\nPkg.add(\"TextAnalysis\")","category":"page"},{"location":"man/nlp/topic_modeling/#Data-Preprocessing","page":"Topic Modeling","title":"Data Preprocessing","text":"","category":"section"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"The first data processing will be the removal of all Disconnected Letters (like الٓمٓ ,الٓمٓصٓ, among others), Prepositions, Particles, Conjunctions, Pronouns, and Adverbs. This is done as follows:","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"function preprocess(s::String)\n    feat = parse(QuranFeatures, s)\n    disletters = isfeat(feat, AbstractDisLetters)\n    prepositions = isfeat(feat, AbstractPreposition)\n    particles = isfeat(feat, AbstractParticle)\n    conjunctions = isfeat(feat, AbstractConjunction)\n    pronouns = isfeat(feat, AbstractPronoun)\n    adverbs = isfeat(feat, AbstractAdverb)\n\n    return !disletters && !prepositions && !particles && !conjunctions && !pronouns && !adverbs\nend\n\ncrpstbl = filter(t -> preprocess(t.features), crpsdata[18].data)","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"Next, we create a copy of the above data so we have the original state, and use the copy to do further data processing.","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"crpsnew = deepcopy(crpstbl)\nfeats = crpsnew[!, :features]\nfeats = parse.(QuranFeatures, feats)","category":"page"},{"location":"man/nlp/topic_modeling/#Lemmatization","page":"Topic Modeling","title":"Lemmatization","text":"","category":"section"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"Using the above parsed features, we then convert the form of the tokens into its lemma. This is useful for addressing inflections.","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"lemmas = lemma.(feats)\nforms1 = crpsnew[!, :form]\nforms1[.!ismissing.(lemmas)] = lemmas[.!ismissing.(lemmas)]","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"tip: Tips\nWe can also use the Root features instead, which is done by simply replacing lemma.(feats) with root.(feats). ","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"We now put back the new form to the corpus:","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"crpsnew[!, :form] = forms1\ncrpsnew = CorpusData(crpsnew)","category":"page"},{"location":"man/nlp/topic_modeling/#Tokenization","page":"Topic Modeling","title":"Tokenization","text":"","category":"section"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"We want to summarize the Qur'an at the verse level. Thus, the token would be the verses of the corpus. From these verses, we further clean it by dediacritization and normalization of the characters:","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"lem_vrs = verses(crpsnew)\nvrs = normalize.(dediac.(lem_vrs))","category":"page"},{"location":"man/nlp/topic_modeling/#Creating-a-TextAnalysis-Corpus","page":"Topic Modeling","title":"Creating a TextAnalysis Corpus","text":"","category":"section"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"To make use of the TextAnalysis.jl's APIs, we need to encode the processed Quranic Corpus to TextAnalysis.jl's Corpus. In this case, we will create a StringDocument of the verses.","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"crps1 = Corpus(StringDocument.(vrs))","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"We then update the lexicon and inverse index for efficient indexing of the corpus.","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"update_lexicon!(crps1)\nupdate_inverse_index!(crps1)","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"Next, we create a Document Term Matrix, which will have rows of verses and columns of words describing the verses.","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"m1 = DocumentTermMatrix(crps1)","category":"page"},{"location":"man/nlp/topic_modeling/#Latent-Dirichlet-Allocation","page":"Topic Modeling","title":"Latent Dirichlet Allocation","text":"","category":"section"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"Finally, run LDA as follows:","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"k = 3          # number of topics\niter = 1000    # number of gibbs sampling iterations\nalpha = 0.1    # hyperparameter\nbeta = 0.1     # hyperparameter\nϕ, θ = lda(m1, k, iter, alpha, beta)","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"Extract the topic for first cluster:","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"ntopics = 10\ncluster_topics = Matrix(undef, ntopics, k);\nfor i = 1:k\n    topics_idcs = sortperm(ϕ[i, :], rev=true)\n    cluster_topics[:, i] = arabic.(m1.terms[topics_idcs][1:ntopics])\nend\ncluster_topics","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"Tabulating this properly would give us the following","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"Pkg.add(\"DataFrames\")\nPkg.add(\"Latexify\")\nusing DataFrames: DataFrame\nusing Latexify\n\nmdtable(DataFrame(\n    topic1 = cluster_topics[:, 1], \n    topic2 = cluster_topics[:, 2], \n    topic3 = cluster_topics[:, 3]\n    ), latex=false)","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"As you may have noticed, the result is not good and this is mainly due to data processing. Readers are encourage to improve this for their use case. This section simply demonstrated how TextAnalysis.jl's LDA can be used for Topic Modeling of the QuranTree.jl's corpus.","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"Finally, the following will extract the topic for each verse:","category":"page"},{"location":"man/nlp/topic_modeling/","page":"Topic Modeling","title":"Topic Modeling","text":"vrs_topics = []\nfor i = 1:dtm(m1).m\n    push!(vrs_topics, sortperm(θ[:, i], rev=true)[1])\nend\nvrs_topics","category":"page"}]
}
