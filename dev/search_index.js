var documenterSearchIndex = {"docs":
[{"location":"man/usage/#Usage","page":"Usage","title":"Usage","text":"","category":"section"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"CurrentModule = QuranTree\nDocTestSetup = quote\n    using QuranTree\nend","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"The dataset is included in the library already, both the Quranic Corpus and the Tanzil Data. To load the data, run the following","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"using QuranTree\n\ndata = QuranData()\ncrps, tnzl = load(data);","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"The load function returns a tuple both for the Quranic Corpus and the Tanzil Data. The loaded data is encoded in a immutable (read-only) array, so users cannot change it. This is specified in the type of the object as shown below:","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"using QuranTree\n\ndata = QuranData()\ncrps, tnzl = load(data)","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"crps","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"This is a sample","category":"page"},{"location":"#QuranTree.jl-Documentation","page":"Home","title":"QuranTree.jl Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = QuranTree\nDocTestSetup = quote\n    using QuranTree\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"A Julia package for working with the Quran. The library is based on the Quranic corpus dataset  from The Quranic Arabic Corpus, and is inspired by the provided JQuranTree java package. The following are the features available:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Special Indexing for the Chapters, Verses, Words and Parts\nTransliteration\nBuckwalter as default\nFunction for creating custom transliterator\nAutomatically updates the transliteration in 1 line of code\nComplete type for all Morphological Features and Part of Speech\nSeemless transitioning between Arabic and Buckwalter\nArabic and Buckwalter character Normalizer\nArabic and Buckwalter character Dediacritization\nFunction for detailed description of the morphological feature.\nSupports Tanzil Data\nImmutable Array for raw datasets (Corpus and Tanzil)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Lastly, since this is built on Julia, it is therefore fast and robust (with strong type) as well.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The library is not yet registered to Julia Packages since we are still working on the documentations and completing the unit tests, but it can be installed as follows:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg\njulia> Pkg.add(\"https://github.com/alstat/QuranTree.jl\")","category":"page"},{"location":"#Requirements","page":"Home","title":"Requirements","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Julia >= 1.4\nJuliaDB >= 0.13.0\nPrettyTables >= 0.10.1","category":"page"},{"location":"#Manual-outline","page":"Home","title":"Manual outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"man/usage.md\",\n    \"man/api.md\n]","category":"page"},{"location":"man/api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"man/api/","page":"API","title":"API","text":"Modules = [QuranTree]","category":"page"},{"location":"man/api/#QuranTree.Features","page":"API","title":"QuranTree.Features","text":"Features(data::String)\n\nConvert a string to morphological feature object.\n\n\n\n\n\n","category":"type"},{"location":"man/api/#QuranTree.Lemma","page":"API","title":"QuranTree.Lemma","text":"Lemma(data::String)\n\nConvert a string to a Lemma object.\n\n\n\n\n\n","category":"type"},{"location":"man/api/#QuranTree.Prefix","page":"API","title":"QuranTree.Prefix","text":"Prefix(data::Symbol, pos::AbstractPartOfSpeech)\n\nCreate a new Prefix object with data as the symbol of the morphological feature with pos as  the corresponding Part of Speech.\n\n\n\n\n\n","category":"type"},{"location":"man/api/#QuranTree.Root","page":"API","title":"QuranTree.Root","text":"Root(data::String)\n\nConvert a string to a Root object.\n\n\n\n\n\n","category":"type"},{"location":"man/api/#QuranTree.Special","page":"API","title":"QuranTree.Special","text":"Special(data::String)\n\nConvert a string to a Special object.\n\n\n\n\n\n","category":"type"},{"location":"man/api/#QuranTree.Stem","page":"API","title":"QuranTree.Stem","text":"Stem(data::Symbol, pos::AbstractPartOfSpeech)\n\nCreate a new Stem object with data as the symbol of the morphological feature with pos as  the corresponding Part of Speech.\n\n\n\n\n\n","category":"type"},{"location":"man/api/#QuranTree.Suffix","page":"API","title":"QuranTree.Suffix","text":"Suffix(data::Symbol, pos::AbstractPartOfSpeech)\n\nCreate a new Suffix object with data as the symbol of the morphological feature with pos as  the corresponding Part of Speech.\n\n\n\n\n\n","category":"type"},{"location":"man/api/#Base.parse-Tuple{Type{Features},AbstractString}","page":"API","title":"Base.parse","text":"parse(::Type{Features}, f::AbstractString)\n\nExtract the features of a morphological Feature object.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#IndexedTables.table-Tuple{CorpusRaw}","page":"API","title":"IndexedTables.table","text":"table(crps::CorpusRaw)\n\nConvert the CorpusRaw read-only array into a tabularized CorpusData using IndexedTable.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#IndexedTables.table-Tuple{TanzilRaw}","page":"API","title":"IndexedTables.table","text":"table(tnzl::TanzilRaw)\n\nConvert the TanzilRaw read-only array into a tabularized TanzilData using IndexedTable.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.arabic-Tuple{String}","page":"API","title":"QuranTree.arabic","text":"arabic(s::String[, encoder::AbstractEncoder])\n\nEncode the String object into Arabic characters. Custom encoder generated from @transliterator can be provided, but default is Buckwalter.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.chapter_name","page":"API","title":"QuranTree.chapter_name","text":"chapter_name(quran::AbstractQuran, transliterate::Bool=false; lang::Symbol=:arabic)\n\nExtracts the chapter label of the input quran, in either :arabic (default) or :english\n\n\n\n\n\n","category":"function"},{"location":"man/api/#QuranTree.dediac-Tuple{String}","page":"API","title":"QuranTree.dediac","text":"dediac(s::String)\n\nDediacritize the input String object.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.encode-Tuple{String}","page":"API","title":"QuranTree.encode","text":"encode(s::String)\n\nTransliterate the input String object using Buckwalter.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.encode-Tuple{Type{SimpleEncoder},String}","page":"API","title":"QuranTree.encode","text":"encode(::Type{SimpleEncoder}, s::String)\n\nEncode the input String object as SimpleEncoder.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.encode-Tuple{Union{Char, String},AbstractEncoder}","page":"API","title":"QuranTree.encode","text":"encode(s::Union{Char,String}, encoder::AbstractEncoder)\n\nTransliterate the input String object using a custom encoder. Custom encoder is generated using the @transliterator.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.isfeature-Tuple{QuranTree.AbstractFeature,Type{var\"#s13\"} where var\"#s13\"<:QuranTree.AbstractFeature}","page":"API","title":"QuranTree.isfeature","text":"isfeature(feat::Features, pos::Type{<:AbstractFeature})\n\nCheck if the morphological Feature object is a type of pos.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.load-Tuple{QuranData}","page":"API","title":"QuranTree.load","text":"load(data::QuranData)\n\nLoad the raw QuranData as a ReadOnlyArray for both Quranic Corpus and Tanzil Data.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.normalize-Tuple{String,Array{Symbol,1}}","page":"API","title":"QuranTree.normalize","text":"normalize(s::String, chars::Array{Symbol,1})\n\nNormalize a specific Arabic or Buckwalter String character/s (chars).\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.normalize-Tuple{String,Symbol}","page":"API","title":"QuranTree.normalize","text":"normalize(s::String, char::Symbol)\n\nNormalize a specific Arabic or Buckwalter String character (chars).\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.normalize-Tuple{String}","page":"API","title":"QuranTree.normalize","text":"normalize(s::String)\n\nNormalize a Arabic or Buckwalter String characters.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.verses-Tuple{IndexedTables.IndexedTable,Int64,Int64}","page":"API","title":"QuranTree.verses","text":"verses(data::IndexedTable[, a::Int64[, b::Int64]])\n\nExtract the verses of a IndexedTable object from row a to row b.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.verses-Tuple{QuranTree.AbstractQuran}","page":"API","title":"QuranTree.verses","text":"verses(quran::AbstractQuran)\n\nExtract the verses of a AbstractQuran object.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.verses-Tuple{QuranTree.TanzilData}","page":"API","title":"QuranTree.verses","text":"verses(quran::TanzilData)\n\nExtract the verses of a TanzilData object.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.@transliterator-Tuple{Any,Any}","page":"API","title":"QuranTree.@transliterator","text":"@transliterator(dict, name)\n\nCreate a custom transliterator using an input dict (Dict object) with its corresponding name as String object. This will automatically update the transliterator inside all  functions like arabic, verses, and encode.\n\n\n\n\n\n","category":"macro"},{"location":"man/api/#QuranTree.@transliterator-Tuple{Any}","page":"API","title":"QuranTree.@transliterator","text":"@transliterator(dict)\n\nFallback to the default Buckwalter transliterator.\n\n\n\n\n\n","category":"macro"}]
}
