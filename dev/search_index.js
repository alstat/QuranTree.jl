var documenterSearchIndex = {"docs":
[{"location":"man/transliteration/#Transliteration","page":"Transliteration","title":"Transliteration","text":"","category":"section"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"QuranTree.jl uses Buckwalter as the default transliteration, which is based on the Quranic Arabic Corpus encoding. The transliteration is invoke using the encode function. However, to extract the form/verses of the CorpusData/TanzilData, the function verses can be used. For example, the following will transliterate the first verse of chapter 1:","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"using QuranTree\n\ncrps, tnzl = load(QuranData());\ncrpsdata = table(crps);\ntnzldata = table(tnzl);\nvrs = verses(tnzldata[1][1])\nencode(vrs[1])","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"The function verses always returns an Array, and hence encoding multiple verses is possible using Julia's . (dot) broadcasting. For example, the following will transliterate all verses of chapter 114:","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"vrs = verses(tnzldata[114])\nencode.(vrs)","category":"page"},{"location":"man/transliteration/#Decoding","page":"Transliteration","title":"Decoding","text":"","category":"section"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"To decode the transliterated back to arabic is done using the function arabic. For example, the following will decode to arabic the transliterated verses above of chapter 114:","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"arabic.(encode.(vrs))","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"Or using the CorpusData, ","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"vrs = verses(crpsdata[114])\navrs = arabic.(vrs)","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"Note that . (dot) broadcasting is only used for arrays. So for pure string input (not arrays of string), arabic(...) (without dot) is used. Example,","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"vrs[1]\narabic(vrs[1])","category":"page"},{"location":"man/transliteration/#Custom-Transliteration","page":"Transliteration","title":"Custom Transliteration","text":"","category":"section"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"Creating a custom transliteration requires only an input encoding in the form of dictionary. For example, QuranTree.jl's Buckwalter's encoding is provided by the constant BW_ENCODING as shown below:","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"BW_ENCODING","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"Suppose, we want to create a new transliteration by simply reversing the values of the dictionary. This is done as follows:","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"old_keys = collect(keys(BW_ENCODING));\nnew_vals = reverse(collect(values(BW_ENCODING)));\nmy_encoder = Dict(old_keys .=> new_vals)\n@transliterator my_encoder \"MyEncoder\"","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"The macro @transliterator is used for updating the transliteration, and it takes two inputs: the dictionary (my_encoder) and the name of the encoding (\"MyEncoder\"). Using this new encoding, the avrs above will have a new transliteration:","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"new_vrs = encode.(avrs);\nnew_vrs","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"To confirm this new transliteration, decoding it back to arabic should generate the proper results:","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"arabic.(new_vrs)","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"To reset the transliteration, simply run the following:","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"@transliterator :default","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"This will fallback to the Buckwalter transliteration, as shown below:","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"bw_vrs = encode.(avrs);\nbw_vrs\narabic.(bw_vrs)","category":"page"},{"location":"man/transliteration/#Simple-Encoding","page":"Transliteration","title":"Simple Encoding","text":"","category":"section"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"Another feature supported in QuranTree.jl is the Simple Encoding. For example, the following will (Simple) encode first verse of chapter 1:","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"vrs = verses(tnzldata[1][1])\nencode(SimpleEncoder, vrs[1])","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"Or, for verses 1 to 4 of chapter 114:","category":"page"},{"location":"man/transliteration/","page":"Transliteration","title":"Transliteration","text":"vrs = verses(tnzldata[114][1:4])\nencode.(SimpleEncoder, vrs)","category":"page"},{"location":"man/indexing/#Indexing-the-Corpus","page":"Indexing","title":"Indexing the Corpus","text":"","category":"section"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"QuranTree.jl offers a intuitive indexing for both Quranic Arabic Corpus and the Tanzil Data, specifically it follows the following usage:","category":"page"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"# for Quranic Arabic Corpus\ncrpsdata[<chapters>][<verses>][<words>][<parts>]\n\n# for Tanzil Data\ntnzldata[<chapters>][<verses>]","category":"page"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"The following are the options supported for each index:","category":"page"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"Chapters:\nInt64 - crpsdata[1] (extracts chapter 1)\nUnitRange - crpsdata[15:24] (extracts chapters 15 to 24)\nArray{Int64,1} - crpsdata[[3,9,10]] (extracts chapters 3, 9 and 10)\nend (special) - crpsdata[end-3:end] (extracts chapters 111 to 114).\nVerses:\nInt64 - crpsdata[1][1] (extracts verse 1 of chapter 1)\nUnitRange - crpsdata[2][15:24] (extracts verses 15 to 24 of chapter 2)\nArray{Int64,1} - crpsdata[10][[3,9,10]] (extracts verses 3, 9 and 10 of chapter 10)\nWords: (not applicable for TanzilData, only CorpusData)\nInt64 - crpsdata[1][1][1] (extracts word 1 of verse 1 of chapter 1)\nUnitRange - crpsdata[2][8][1:3] (extracts words 1 to 3 of verse 8 of chapter 2)\nArray{Int64,1} - crpsdata[2][8][[1,3]] (extracts words 1 and 3 of verse 8 of chapter 2)\nParts: (not applicable for TanzilData, only CorpusData)\nInt64 - crpsdata[1][1][1][1] (extracts part 1 of word 1 of verse 1 of chapter 1)\nUnitRange - crpsdata[2][9][1][1:2] (extracts part 1 to part 2 of word 1 of verse 9 of chapter 2)\nArray{Int64,1} - crpsdata[2][9][1][[1,2]] (extracts part 1 and part 2 of word 1 of verse 9 of chapter 2)","category":"page"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"Hence, to extract chapters verses 9 of chapter 2 of both TanzilData and CorpusData are given below:","category":"page"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"using QuranTree\n\ndata = QuranData();\ncrps, tnzl = load(data);\ncrpsdata = table(crps);\ntnzldata = table(tnzl);\ncrpsdata[2][9]\ntnzldata[2][9]","category":"page"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"As shown above, the output of the indexing returns the label for the chapter name, both in Arabic and in English. Again the output of the crpsdata[2][9] is not shown, since the width of the output is wider than the width of the output pane. So, PrettyTables.jl can be used to view the table, as follows:","category":"page"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"using Pkg\nPkg.add(\"PrettyTables\")","category":"page"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"using PrettyTables\n@ptconf vcrop_mode=:middle tf=tf_compact\n@pt crpsdata[2][9]","category":"page"},{"location":"man/indexing/#Combinations-of-Indices","page":"Indexing","title":"Combinations of Indices","text":"","category":"section"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"Combinations of these indices are also supported. For example, to extract chapters 111 to 114, verses 1 and 3, is done as follows:","category":"page"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"@pt crpsdata[111:114][[1,3]] # or crpsdata[end-3:end][[1,3]]\n@pt tnzldata[111:114][[1,3]] # or tnzldata[end-3:end][[1,3]]","category":"page"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"Further, to extract part 1 of words 1 to 3 of the above CorpusData output, is done as follows:","category":"page"},{"location":"man/indexing/","page":"Indexing","title":"Indexing","text":"@pt crpsdata[111:114][[1,3]][1:3][1] ","category":"page"},{"location":"man/morphological_features/#Morphological-Features","page":"Morphological Features","title":"Morphological Features","text":"","category":"section"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"QuranTree.jl provides complete types for all morphological features and part of speech of The Quranic Arabic Corpus. ","category":"page"},{"location":"man/morphological_features/#Parsing","page":"Morphological Features","title":"Parsing","text":"","category":"section"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"The features of each token are encoded as String in its raw form, and in order to parse this as morphological feature, the function parse(Features, x) is used. For example, the following will parse the 2nd part of the 3rd word of 1st verse of chapter 1:","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"using Pkg\nPkg.add(\"JuliaDB\")","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"using QuranTree\nusing JuliaDB\n\ncrps, tnzl = load(QuranData());\ncrpsdata = table(crps);\ntnzldata = table(tnzl);\ncrpsdata[1][1][3][2]\ntoken = select(crpsdata[1][1][3][2].data, :features)\nmfeat = parse(Features, token[1])\ntypeof(mfeat)","category":"page"},{"location":"man/morphological_features/#Extracting-Detailed-Description","page":"Morphological Features","title":"Extracting Detailed Description","text":"","category":"section"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"To see the detailed description of the features, @desc is used.","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"@desc mfeat","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"Dumping the object gives details on how to access the properties of the Stem object.","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"dump(mfeat)\n\n# access other feats of the token\nmfeat.feats","category":"page"},{"location":"man/morphological_features/#Checking-Part-of-Speech","page":"Morphological Features","title":"Checking Part of Speech","text":"","category":"section"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"isfeature(token, pos) checks whether the token's parsed feature is a particular part of speech (pos). For example, the following checks whether mfeat above is indeed Masculine and Singular, among others.","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"isfeature(mfeat, Masculine)\nisfeature(mfeat, Feminine)\nisfeature(mfeat, Singular)\nisfeature(mfeat, Adjective) && isfeature(mfeat, Genetive)","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"To further check if it has Root and Lemma,","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"isfeature(mfeat, Root) && isfeature(mfeat, Lemma)","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"isfeature(...) is useful when working with the JuliaDB.jl's filter function, instead of using regular expressions. For example,","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"using Pkg\nPkg.add(\"PrettyTables\")","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"using PrettyTables\n@ptconf vcrop_mode=:middle tf=tf_compact\n\ntbl = filter(t -> isfeature(parse(Features, t.features), ActiveParticle), crpsdata.data)\n\n@pt select(tbl, Not(:word, :part, :tag))","category":"page"},{"location":"man/morphological_features/#Lemma,-Root-and-Special","page":"Morphological Features","title":"Lemma, Root and Special","text":"","category":"section"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"root, lemma and special functions extract the Root, Lemma and Special morphological features, respectively. ","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"root(mfeat)\nlemma(mfeat)\n\narabic(root(mfeat))\narabic(lemma(mfeat))","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"The following example shows token with Special feature:","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"token2 = select(crpsdata.data, :features)[53]\nmfeat2 = parse(Features, token2)\nspecial(mfeat2)\narabic(special(mfeat2))","category":"page"},{"location":"man/morphological_features/#Implied-Verb-Features","page":"Morphological Features","title":"Implied Verb Features","text":"","category":"section"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"Arabic Verbs are rich in morphology and some features are implied. For example, the Voice feature of the Verb is default to Active voice, the Mood feature is default to Indicative mood, and the Verb form feature is default to First form. ","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"token3 = select(crpsdata.data, :features)[27]","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"token3 is a Verb with no Mood and Verb form features stated. However, parsing this will automatically add the default values of the said features as shown below:","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"mfeat3 = parse(Features, token3)\n@desc mfeat3","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"Another example where the Voice feature of the Verb is implied:","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"token4 = select(crpsdata.data, :features)[27]\nmfeat4 = parse(Features, token4)\n@desc mfeat4","category":"page"},{"location":"man/morphological_features/#POS-Abstract-Types","page":"Morphological Features","title":"POS Abstract Types","text":"","category":"section"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"As shown in the table below, each part of speech has a corresponding parent type, which is a superset type in the type hierarchy. This is useful for grouping. For example, instead of using || (or) in checking for all tokens that are either FirstPerson, SecondPerson, or ThirdPerson, the parent type AbstractPerson can be used.","category":"page"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"# without using parent type\nfunction allpersons(t)\n    is1st = isfeature(parse(Features, t.features), FirstPerson)\n    is2nd = isfeature(parse(Features, t.features), SecondPerson)\n    is3rd = isfeature(parse(Features, t.features), ThirdPerson)\n    \n    return is1st || is2nd || is3rd\nend\ntbl1 = filter(allpersons, crpsdata.data);\nselect(tbl1, (:form, :features))\n# using parent type\ntbl2 = filter(t -> isfeature(parse(Features, t.features), AbstractPerson), crpsdata.data);\nselect(tbl2, (:form, :features))\n\nsum(select(tbl1, :features) .!== select(tbl2, :features))","category":"page"},{"location":"man/morphological_features/#Part-of-Speech-Types","page":"Morphological Features","title":"Part of Speech Types","text":"","category":"section"},{"location":"man/morphological_features/","page":"Morphological Features","title":"Morphological Features","text":"<table>\n<thead><td>Type</td><td>Parent Type</td><td>Tag</td><td>Description</td><td>Arabic Name</td></thead>\n<tr><td><code> Noun</code></td><td><code>AbstractNoun</code></td><td><code>Symbol(\"N\")</code></td><td>Noun</td><td style=\"text-align:right !important\">اسم</td></tr>\n<tr><td><code> ProperNoun</code></td><td><code>AbstractNoun</code></td><td><code>Symbol(\"PN\")</code></td><td>Proper noun</td><td style=\"text-align:right !important\">اسم علم</td></tr>\n\n<tr><td><code> Adjective</code></td><td><code>AbstractDerivedNominal</code></td><td><code>Symbol(\"ADJ\")</code></td><td>Adjective</td><td style=\"text-align:right !important\">صفة</td></tr>\n<tr><td><code> ImperativeVerbalNoun</code></td><td><code>AbstractDerivedNominal</code></td><td><code>Symbol(\"IMPN\")</code></td><td>Imperative verbal noun</td><td style=\"text-align:right !important\">اسم فعل أمر</td></tr>\n\n<tr><td><code> Personal</code></td><td><code>AbstractPronoun</code></td><td><code>Symbol(\"PRON\")</code></td><td>Personal pronoun</td><td style=\"text-align:right !important\">ضمير</td></tr>\n<tr><td><code> Demonstrative</code></td><td><code>AbstractPronoun</code></td><td><code>Symbol(\"DEM\")</code></td><td>Demonstrative pronoun</td><td style=\"text-align:right !important\">اسم اشارة</td></tr>\n<tr><td><code> Relative</code></td><td><code>AbstractPronoun</code></td><td><code>Symbol(\"REL\")</code></td><td>Relative pronoun</td><td style=\"text-align:right !important\">اسم موصول</td></tr>\n\n<tr><td><code> Time</code></td><td><code>AbstractAdverb</code></td><td><code>Symbol(\"T\")</code></td><td>Time adverb</td><td style=\"text-align:right !important\">ظرف زمان</td></tr>\n<tr><td><code> Location</code></td><td><code>AbstractAdverb</code></td><td><code>Symbol(\"LOC\")</code></td><td>Location adverb</td><td style=\"text-align:right !important\">ظرف مكان</td></tr>\n\n<tr><td><code> Preposition</code></td><td><code>AbstractPreposition</code></td><td><code>Symbol(\"P\")</code></td><td>Preposition</td><td style=\"text-align:right !important\">حرف جر</td></tr>\n\n<tr><td><code> EmphaticLam</code></td><td><code>AbstractPrefix</code></td><td><code>Symbol(\"EMPH\")</code></td><td>Emphatic lam prefix</td><td style=\"text-align:right !important\">لام التوكيد</td></tr>\n<tr><td><code> ImperativeLam</code></td><td><code>AbstractPrefix</code></td><td><code>Symbol(\"IMPV\")</code></td><td>Imperative lam prefix</td><td style=\"text-align:right !important\">لام الامر</td></tr>\n<tr><td><code> PurposeLam</code></td><td><code>AbstractPrefix</code></td><td><code>Symbol(\"PRP\")</code></td><td>Purpose lam prefix</td><td style=\"text-align:right !important\">لام التعليل</td></tr>\n<tr><td><code> EmphaticNun</code></td><td><code>AbstractPrefix</code></td><td><code>Symbol(\"+n:EMPH\")</code></td><td>Emphatic lam prefix</td><td style=\"text-align:right !important\">لام التوكيد</td></tr>\n\n<tr><td><code> Coordinating</code></td><td><code>AbstractConjunction</code></td><td><code>Symbol(\"CONJ\")</code></td><td>Coordinating conjunction</td><td style=\"text-align:right !important\">حرف عطف</td></tr>\n<tr><td><code> Subordinating</code></td><td><code>AbstractConjunction</code></td><td><code>Symbol(\"SUB\")</code></td><td>Subordinating particle</td><td style=\"text-align:right !important\">حرف مصدري</td></tr>\n\n<tr><td><code> Accusative</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"ACC\")</code></td><td>Accusative particle</td><td style=\"text-align:right !important\">حرف نصب</td></tr>\n<tr><td><code> Amendment</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"AMD\")</code></td><td>Amendment particle</td><td style=\"text-align:right !important\">حرف استدراك</td></tr>\n<tr><td><code> Answer</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"ANS\")</code></td><td>Answer particle</td><td style=\"text-align:right !important\">حرف جواب</td></tr>\n<tr><td><code> Aversion</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"AVR\")</code></td><td>Aversion particle</td><td style=\"text-align:right !important\">حرف ردع</td></tr>\n<tr><td><code> Cause</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"CAUS\")</code></td><td>Particle of cause</td><td style=\"text-align:right !important\">حرف سببية</td></tr>\n<tr><td><code> Certainty</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"CERT\")</code></td><td>Particle of certainty</td><td style=\"text-align:right !important\">حرف تحقيق</td></tr>\n<tr><td><code> Circumstantial</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"CIRC\")</code></td><td>Circumstantial particle</td><td style=\"text-align:right !important\">حرف حال</td></tr>\n<tr><td><code> Comitative</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"COM\")</code></td><td>Comitative particle</td><td style=\"text-align:right !important\">واو المعية</td></tr>\n<tr><td><code> Conditional</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"COND\")</code></td><td>Conditional particle</td><td style=\"text-align:right !important\">حرف شرط</td></tr>\n<tr><td><code> Equalization</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"EQ\")</code></td><td>Equalization particle</td><td style=\"text-align:right !important\">حرف تسوية</td></tr>\n<tr><td><code> Exhortation</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"EXH\")</code></td><td>Exhortation particle</td><td style=\"text-align:right !important\">حرف تحضيض</td></tr>\n<tr><td><code> Explanation</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"EXL\")</code></td><td>Explanation particle</td><td style=\"text-align:right !important\">حرف تفصيل</td></tr>\n<tr><td><code> Exceptive</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"EXP\")</code></td><td>Exceptive particle</td><td style=\"text-align:right !important\">أداة استثناء</td></tr>\n<tr><td><code> Future</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"FUT\")</code></td><td>Future particle</td><td style=\"text-align:right !important\">حرف استقبال</td></tr>\n<tr><td><code> Inceptive</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"INC\")</code></td><td>Inceptive particle</td><td style=\"text-align:right !important\">حرف ابتداء</td></tr>\n<tr><td><code> Interpretation</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"INT\")</code></td><td>Inceptive particle</td><td style=\"text-align:right !important\">حرف تفسير</td></tr>\n<tr><td><code> Interogative</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"INTG\")</code></td><td>Interogative particle</td><td style=\"text-align:right !important\">حرف استفهام</td></tr>\n<tr><td><code> Negative</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"NEG\")</code></td><td>Negative particle</td><td style=\"text-align:right !important\">حرف نفي</td></tr>\n<tr><td><code> Preventive</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"PREV\")</code></td><td>Preventive particle</td><td style=\"text-align:right !important\">حرف كاف</td></tr>\n<tr><td><code> Prohibition</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"PRO\")</code></td><td>Prohibition particle</td><td style=\"text-align:right !important\">حرف نهي</td></tr>\n<tr><td><code> Resumption</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"REM\")</code></td><td>Resumption particle</td><td style=\"text-align:right !important\"حرف استئنافية</td></tr>\n<tr><td><code> Restriction</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"RES\")</code></td><td>Restriction particle</td><td style=\"text-align:right !important\">أداة حصر</td></tr>\n<tr><td><code> Retraction</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"RET\")</code></td><td>Retraction particle</td><td style=\"text-align:right !important\">حرف اضراب</td></tr>\n<tr><td><code> Result</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"RSLT\")</code></td><td>Result particle</td><td style=\"text-align:right !important\">حرف واقع في جواب الشرط</td></tr>\n<tr><td><code> Supplemental</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"SUP\")</code></td><td>Suplemental particle</td><td style=\"text-align:right !important\">حرف زائد</td></tr>\n<tr><td><code> Surprise</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"SUR\")</code></td><td>Surprise particle</td><td style=\"text-align:right !important\">حرف فجاءة</td></tr>\n<tr><td><code> Vocative</code></td><td><code>AbstractParticle</code></td><td><code>Symbol(\"VOC\")</code></td><td>Vocative particle</td><td style=\"text-align:right !important\">حرف نداء</td></tr>\n\n<tr><td><code> DisconnectedLetters</code></td><td><code>AbstractDisLetters</code></td><td><code>Symbol(\"INL\")</code></td><td>Quranic initials</td><td style=\"text-align:right !important\">حروف مقطعة</td></tr>\n\n<tr><td><code> FirstPerson</code></td><td><code>AbstractPerson</code></td><td><code>Symbol(\"1\")</code></td><td>First person</td><td style=\"text-align:right !important\">الاسناد</td></tr>\n<tr><td><code> SecondPerson</code></td><td><code>AbstractPerson</code></td><td><code>Symbol(\"2\")</code></td><td>Second person</td><td style=\"text-align:right !important\">الاسناد</td></tr>\n<tr><td><code> ThirdPerson</code></td><td><code>AbstractPerson</code></td><td><code>Symbol(\"3\")</code></td><td>Third person</td><td style=\"text-align:right !important\">الاسناد</td></tr>\n\n<tr><td><code> Masculine</code></td><td><code>AbstractGender</code></td><td><code>Symbol(\"M\")</code></td><td>Masculine</td><td style=\"text-align:right !important\">الجنس</td></tr>\n<tr><td><code> Feminine</code></td><td><code>AbstractGender</code></td><td><code>Symbol(\"F\")</code></td><td>Feminine</td><td style=\"text-align:right !important\">الجنس</td></tr>\n\n<tr><td><code> Singular</code></td><td><code>AbstractNumber</code></td><td><code>Symbol(\"S\")</code></td><td>Singular</td><td style=\"text-align:right !important\">العدد</td></tr>\n<tr><td><code> Dual</code></td><td><code>AbstractNumber</code></td><td><code>Symbol(\"D\")</code></td><td>Dual</td><td style=\"text-align:right !important\">العدد</td></tr>\n<tr><td><code> Plural</code></td><td><code>AbstractNumber</code></td><td><code>Symbol(\"P\")</code></td><td>Plural</td><td style=\"text-align:right !important\">العدد</td></tr>\n\n<tr><td><code> Verb</code></td><td><code>AbstractPartOfSpeech</code></td><td><code>Symbol(\"V\")</code></td><td>Verb</td><td style=\"text-align:right !important\">فعل</td></tr>\n<tr><td><code> Perfect</code></td><td><code>AbstractAspect</code></td><td><code>Symbol(\"PERF\")</code></td><td>Perfect verb</td><td style=\"text-align:right !important\">فعل ماض</td></tr>\n<tr><td><code> Imperfect</code></td><td><code>AbstractAspect</code></td><td><code>Symbol(\"IMPF\")</code></td><td>Imperfect verb</td><td style=\"text-align:right !important\">فعل مضارع</td></tr>\n<tr><td><code> Imperative</code></td><td><code>AbstractAspect</code></td><td><code>Symbol(\"IMPV\")</code></td><td>Imperative verb</td><td style=\"text-align:right !important\">فعل أمر</td></tr>\n<tr><td><code> Indicative</code></td><td><code>AbstractMood</code></td><td><code>Symbol(\"IND\")</code></td><td>Indicative mood (default)</td><td style=\"text-align:right !important\">مرفوع</td></tr>\n<tr><td><code> Subjunctive</code></td><td><code>AbstractMood</code></td><td><code>Symbol(\"SUBJ\")</code></td><td>Subjunctive mood</td><td style=\"text-align:right !important\">منصوب</td></tr>\n<tr><td><code> Jussive</code></td><td><code>AbstractMood</code></td><td><code>Symbol(\"JUS\")</code></td><td>Jussive mood</td><td style=\"text-align:right !important\">مجزوم</td></tr>\n<tr><td><code> Active</code></td><td><code>AbstractVoice</code></td><td><code>Symbol(\"ACT\")</code></td><td>Active voice (default)</td><td style=\"text-align:right !important\">مبني للمعلوم</td></tr>\n<tr><td><code> Passive</code></td><td><code>AbstractVoice</code></td><td><code>Symbol(\"PASS\")</code></td><td>Passive voice</td><td style=\"text-align:right !important\">مبني للمجهول</td></tr>\n\n<tr><td><code> VerbFormI</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"I\")</code></td><td>First verb form (default)</td><td style=\"text-align:right !important\">فعل</td></tr>\n<tr><td><code> VerbFormII</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"II\")</code></td><td>Second verb form</td><td style=\"text-align:right !important\">فعل</td></tr>\n<tr><td><code> VerbFormIII</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"III\")</code></td><td>Third verb form</td><td style=\"text-align:right !important\">فعل</td></tr>\n<tr><td><code> VerbFormIV</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"IV\")</code></td><td>Fourth verb form</td><td style=\"text-align:right !important\">فعل</td></tr>\n<tr><td><code> VerbFormV</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"V\")</code></td><td>Fifth verb form</td><td style=\"text-align:right !important\">فعل</td></tr>\n<tr><td><code> VerbFormVI</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"VI\")</code></td><td>Sixth verb form</td><td style=\"text-align:right !important\">فعل</td></tr>\n<tr><td><code> VerbFormVII</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"VII\")</code></td><td>Seventh verb form</td><td style=\"text-align:right !important\">فعل</td></tr>\n<tr><td><code> VerbFormVIII</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"VIII\")</code></td><td>Eighth verb form</td><td style=\"text-align:right !important\">فعل</td></tr>\n<tr><td><code> VerbFormIX</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"IX\")</code></td><td>Ninth verb form</td><td style=\"text-align:right !important\">فعل</td></tr>\n<tr><td><code> VerbFormX</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"X\")</code></td><td>Tenth verb form</td><td style=\"text-align:right !important\">فعل</td></tr>\n<tr><td><code> VerbFormXI</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"XI\")</code></td><td>Eleventh verb form</td><td style=\"text-align:right !important\">فعل</td></tr>\n<tr><td><code> VerbFormXII</code></td><td><code>AbstractForm</code></td><td><code>Symbol(\"XII\")</code></td><td>Twelfth verb form</td><td style=\"text-align:right !important\">فعل</td></tr>\n\n<tr><td><code> ActiveParticle</code></td><td><code>AbstractDerivedNoun</code></td><td><code>Symbol(\"ACT PCPL\")</code></td><td>Active particle</td><td style=\"text-align:right !important\">اسم فاعل</td></tr>\n<tr><td><code> PassiveParticle</code></td><td><code>AbstractDerivedNoun</code></td><td><code>Symbol(\"PASS PCPL\")</code></td><td>Passive particle</td><td style=\"text-align:right !important\">اسم مفعول</td></tr>\n<tr><td><code> VerbalNoun</code></td><td><code>AbstractDerivedNoun</code></td><td><code>Symbol(\"VN\")</code></td><td>Verbal noun</td><td style=\"text-align:right !important\">مصدر</td></tr>\n\n<tr><td><code> Definite</code></td><td><code>AbstractState</code></td><td><code>Symbol(\"DEF\")</code></td><td>Definite state</td><td style=\"text-align:right !important\">معرفة</td></tr>\n<tr><td><code> Indefinite</code></td><td><code>AbstractState</code></td><td><code>Symbol(\"INDEF\")</code></td><td>Indefinite state</td><td style=\"text-align:right !important\">نكرة</td></tr>\n<tr><td><code> Nominative</code></td><td><code>AbstractCase</code></td><td><code>Symbol(\"NOM\")</code></td><td>Nominative case</td><td style=\"text-align:right !important\">مرفوع</td></tr>\n<tr><td><code> Genetive</code></td><td><code>AbstractCase</code></td><td><code>Symbol(\"GEN\")</code></td><td>Genetive case</td><td style=\"text-align:right !important\">مجرور</td></tr>\n</table>","category":"page"},{"location":"man/data_processing/#Data-Processing","page":"Data Processing","title":"Data Processing","text":"","category":"section"},{"location":"man/data_processing/","page":"Data Processing","title":"Data Processing","text":"The goal of having a Quranic corpus is to study it computationally. As such, special utilities for further data preprocessing are necessary. QuranTree.jl offers functions for processing Arabic texts. These include, character dediacritization and normalization.","category":"page"},{"location":"man/data_processing/#Character-Dediacritization","page":"Data Processing","title":"Character Dediacritization","text":"","category":"section"},{"location":"man/data_processing/","page":"Data Processing","title":"Data Processing","text":"dediac works for both Arabic, Buckwalter and custom transliterations.","category":"page"},{"location":"man/data_processing/","page":"Data Processing","title":"Data Processing","text":"using QuranTree\n\ncrps, tnzl = load(QuranData());\ncrpsdata = table(crps);\ntnzldata = table(tnzl);\navrs = verses(tnzldata[1][1])[1]\ndediac(avrs)\nbvrs = verses(crpsdata[1][1])[1]\ndediac(bvrs)\ndediac(avrs) === arabic(dediac(bvrs))","category":"page"},{"location":"man/data_processing/","page":"Data Processing","title":"Data Processing","text":"Custom transliteration is also dediacritizable as shown below,","category":"page"},{"location":"man/data_processing/","page":"Data Processing","title":"Data Processing","text":"old_keys = collect(keys(BW_ENCODING));\nnew_vals = reverse(collect(values(BW_ENCODING)));\nmy_encoder = Dict(old_keys .=> new_vals);\n\n@transliterator my_encoder \"MyEncoder\"\nencode(avrs)\narabic(encode(avrs))\ndediac(encode(avrs))\narabic(dediac(encode(avrs)))","category":"page"},{"location":"man/data_processing/","page":"Data Processing","title":"Data Processing","text":"To reset the transliteration,","category":"page"},{"location":"man/data_processing/","page":"Data Processing","title":"Data Processing","text":"@transliterator :default\nencode(avrs)\ndediac(encode(avrs))","category":"page"},{"location":"man/data_processing/#Character-Normalization","page":"Data Processing","title":"Character Normalization","text":"","category":"section"},{"location":"man/data_processing/","page":"Data Processing","title":"Data Processing","text":"Normalization is done using the normalize function. It works for Arabic, Buckwalter and other custom transliterations. For example, the following normalizes the avrs above:","category":"page"},{"location":"man/data_processing/","page":"Data Processing","title":"Data Processing","text":"normalize(avrs)\nnormalize(dediac(avrs))\ndediac(normalize(avrs))\n# using pipe notation\navrs |> dediac |> normalize |> encode","category":"page"},{"location":"man/data_processing/","page":"Data Processing","title":"Data Processing","text":"Specific character can be normalize:","category":"page"},{"location":"man/data_processing/","page":"Data Processing","title":"Data Processing","text":"avrs1 = verses(tnzldata[2][4])[1]\nnormalize(avrs1, :alif_maddah)\nnormalize(avrs1, :alif_hamza_above)\nnormalize(avrs, [:alif_khanjareeya, :hamzat_wasl])","category":"page"},{"location":"man/data_processing/","page":"Data Processing","title":"Data Processing","text":"Or using the CorpusData instead of the TanzilData,","category":"page"},{"location":"man/data_processing/","page":"Data Processing","title":"Data Processing","text":"avrs2 = arabic(verses(crpsdata[2][15])[1])\nnormalize(avrs2, :ya_hamza_above)","category":"page"},{"location":"man/getting_started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"CurrentModule = QuranTree\nDocTestSetup = quote\n    using QuranTree\nend","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"The dataset is included in the library already, both the Quranic Corpus and the Tanzil Data. To load the data, simply run the following","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"using QuranTree\n\ndata = QuranData()\ncrps, tnzl = load(data);","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"The QuranData() is a struct containing the default filepath of the data. The load function returns a tuple for both the Quranic Corpus and the Tanzil Data. The loaded data is encoded in a immutable (read-only) array, so users cannot change it. This is specified in the type of the object as shown below:","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"crps\ntnzl","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"In order to parse these raw data, the table function is used:","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"crpsdata = table(crps);\ntnzldata = table(tnzl);\ncrpsdata\ntnzldata","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"The resulting tables, which are of type CorpusData and TanzilData, respectively, are based on JuliaDB.jl, which can be accessed by simply calling the macro @data (for example, @data crpsdata or crpsdata.data). One thing to note, however, is that JuliaDB.jl will only display the meta data of the columns if the width of the table is wider than the width of the output pane, for example in case of the crpsdata above which has more columns (and thus wider) compared to tnzldata. To display the data of any wide table, PrettyTables.jl can be used:","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"using Pkg\nPkg.add(\"PrettyTables\")","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"using PrettyTables\n@ptconf vcrop_mode=:middle tf=tf_compact\n@pt crpsdata","category":"page"},{"location":"man/getting_started/#Manipulating-the-Table","page":"Getting Started","title":"Manipulating the Table","text":"","category":"section"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"As mentioned above, the table is based on JuliaDB.jl, which has a type IndexedTable. Therefore, any data manipulation is done through the JuliaDB.jl's APIs. To access the data simply call the property with .data or the macro @data:","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"crpstbl = @data crpsdata; # or crpsdata.data\ntnzltbl = @data tnzldata; # or tnzldata.data\ncrpstbl\ntnzltbl","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"Note that, crpsdata and crpstbl have different type (as in the case of tnzldata and tnzltbl) as shown below:","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"typeof(crpsdata)\ntypeof(crpstbl)","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"From here, any data manipulation is done using JuliaDB.jl's APIs. For example, to select the feature column of the crpstbl is done as follows:","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"using Pkg\nPkg.add(\"JuliaDB\")","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"using JuliaDB\n\nselect(crpstbl, :features)\n\n# or equivalent to\nselect(crpsdata.data, :features)","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"Or filtering tokens that are Prefix features, is done as follows:","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"filter(t -> occursin(r\"^PREFIX\", t.features), crpstbl)\n\n# or equivalent to\nfilter(t -> occursin(r\"^PREFIX\", t.features), crpsdata.data)","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"Bottomline, any data manipulation on the CorpusTable and TanzilData is done through JuliaDB.jl's APIs.","category":"page"},{"location":"man/nlp/#Natural-Language-Processing","page":"Natural Language Processing","title":"Natural Language Processing","text":"","category":"section"},{"location":"man/nlp/","page":"Natural Language Processing","title":"Natural Language Processing","text":"In this section, we will demonstrate how to perform some Natural Language Processing task using QuranTree.jl with Julia's TextAnalysis.jl library. In particular, we will emphasize on how to come up with a feature matrix that can be used as input for any NLP tasks.","category":"page"},{"location":"man/nlp/#Text-Summarization","page":"Natural Language Processing","title":"Text Summarization","text":"","category":"section"},{"location":"man/nlp/","page":"Natural Language Processing","title":"Natural Language Processing","text":"The first task is to summarize the quran. The algorithm that we will be using is the TextRank which applies PageRank algorithm to text datasets.","category":"page"},{"location":"man/nlp/","page":"Natural Language Processing","title":"Natural Language Processing","text":"using Pkg\nPkg.add(\"JuliaDB\")\nPkg.add(\"TextAnalysis\")","category":"page"},{"location":"man/nlp/","page":"Natural Language Processing","title":"Natural Language Processing","text":"using JuliaDB\nusing QuranTree\nusing TextAnalysis\n\ncrps, tnzl = QuranData() |> load;\ncrpsdata = table(crps)","category":"page"},{"location":"man/nlp/#Data-Preprocessing","page":"Natural Language Processing","title":"Data Preprocessing","text":"","category":"section"},{"location":"man/nlp/","page":"Natural Language Processing","title":"Natural Language Processing","text":"To start with, we first clean the data by removing the Disconnected Letters such as الٓمٓ ,الٓمٓصٓ, among others. This is done as follows:","category":"page"},{"location":"man/nlp/","page":"Natural Language Processing","title":"Natural Language Processing","text":"function preprocess(s::String)\n    feat = parse(Features, s)\n    disletters = isfeature(feat, AbstractDisLetters)\n    prepositions = isfeature(feat, Stem) && isfeature(feat, Preposition)\n    conjunctions = isfeature(feat, AbstractConjunction)\n    pronouns = isfeature(feat, AbstractPronoun)\n\n    return !disletters && !prepositions && !conjunctions && !pronouns\nend\n\ncrpstbl = filter(t -> preprocess(t.features), crpsdata.data)","category":"page"},{"location":"man/nlp/","page":"Natural Language Processing","title":"Natural Language Processing","text":"Next, we need to create a copy of the above data so we have the original state, and use the copy to do further data processing.","category":"page"},{"location":"man/nlp/","page":"Natural Language Processing","title":"Natural Language Processing","text":"crpsnew = deepcopy(crpstbl)\nfeats = select(crpsnew, :features)\nfeats = parse.(Features, feats)","category":"page"},{"location":"man/nlp/#Lemmatization","page":"Natural Language Processing","title":"Lemmatization","text":"","category":"section"},{"location":"man/nlp/","page":"Natural Language Processing","title":"Natural Language Processing","text":"Using the above parsed features, we then convert the form of the tokens to its lemma. This is useful for addressing minimal variations due to inflection.","category":"page"},{"location":"man/nlp/","page":"Natural Language Processing","title":"Natural Language Processing","text":"lemmas = lemma.(feats)\nforms1 = select(crpsnew, :form)\nforms1[.!ismissing.(lemmas)] = lemmas[.!ismissing.(lemmas)]","category":"page"},{"location":"man/nlp/","page":"Natural Language Processing","title":"Natural Language Processing","text":"We can also use the Root features instead, which is done by simply replacing lemma.(feats) with root.(feats). We now put back the new form to the corpus:","category":"page"},{"location":"man/nlp/","page":"Natural Language Processing","title":"Natural Language Processing","text":"crpsnew = transform(crpsnew, :form => forms1)\ncrpsnew = CorpusData(crpsnew)","category":"page"},{"location":"man/nlp/#Tokenization","page":"Natural Language Processing","title":"Tokenization","text":"","category":"section"},{"location":"man/nlp/","page":"Natural Language Processing","title":"Natural Language Processing","text":"We want to summarize the document, in this case the Qur'an, using its verses. In doing so, the token would be the verses of the corpus. From these verses, we further clean it by dediacritization and normalization of the characters:","category":"page"},{"location":"man/nlp/","page":"Natural Language Processing","title":"Natural Language Processing","text":"lem_vrs = verses(crpsnew)\nvrs = QuranTree.normalize.(dediac.(lem_vrs))","category":"page"},{"location":"man/nlp/#Creating-a-TextAnalysis-Corpus","page":"Natural Language Processing","title":"Creating a TextAnalysis Corpus","text":"","category":"section"},{"location":"man/nlp/","page":"Natural Language Processing","title":"Natural Language Processing","text":"To make use of the TextAnalysis.jl's api, we need to encode the processed Quranic Corpus to TextAnalysis.jl's Corpus. In this case, we will create a String document of the verses.","category":"page"},{"location":"man/nlp/","page":"Natural Language Processing","title":"Natural Language Processing","text":"crps1 = Corpus(StringDocument.(vrs))","category":"page"},{"location":"man/nlp/","page":"Natural Language Processing","title":"Natural Language Processing","text":"We then update the lexicon and inverse index for efficient indexing of the corpus.","category":"page"},{"location":"man/nlp/","page":"Natural Language Processing","title":"Natural Language Processing","text":"update_lexicon!(crps1)\nupdate_inverse_index!(crps1)","category":"page"},{"location":"man/nlp/","page":"Natural Language Processing","title":"Natural Language Processing","text":"We then create a Document Term Matrix, which will have rows of verses and columns of words describing the verses.","category":"page"},{"location":"man/nlp/","page":"Natural Language Processing","title":"Natural Language Processing","text":"m1 = DocumentTermMatrix(crps1)","category":"page"},{"location":"man/nlp/#TF-IDF","page":"Natural Language Processing","title":"TF-IDF","text":"","category":"section"},{"location":"man/nlp/","page":"Natural Language Processing","title":"Natural Language Processing","text":"Finally, we compute the corresponding TF-IDF, which will serve as the feature matrix.","category":"page"},{"location":"man/nlp/","page":"Natural Language Processing","title":"Natural Language Processing","text":"tfidf = tf_idf(m1)","category":"page"},{"location":"man/nlp/#Summarizing-the-Quran","page":"Natural Language Processing","title":"Summarizing the Quran","text":"","category":"section"},{"location":"man/nlp/","page":"Natural Language Processing","title":"Natural Language Processing","text":"Using the TF-IDF, we compute the product of it with its transpose to come up with a square matrix, where the elements describes the linkage between the verses, or the similarity between the verses.","category":"page"},{"location":"man/nlp/","page":"Natural Language Processing","title":"Natural Language Processing","text":"sim_mat = tfidf * tfidf'","category":"page"},{"location":"man/nlp/","page":"Natural Language Processing","title":"Natural Language Processing","text":"At this point, we can now write the code for PageRank algorithm:","category":"page"},{"location":"man/nlp/","page":"Natural Language Processing","title":"Natural Language Processing","text":"using LinearAlgebra\nfunction pagerank( A; Niter=20, damping=.15)\n    Nmax = size(A, 1)\n    r = rand(1,Nmax);              # Generate a random starting rank.\n    r = r ./ norm(r,1);            # Normalize\n    a = (1-damping) ./ Nmax;       # Create damping vector\n\n    for i=1:Niter\n        s = r * A\n        rmul!(s, damping)\n        r = s .+ (a * sum(r, dims=2));   # Compute PageRank.\n    end\n\n    r = r./norm(r,1);\n\n    return r\nend","category":"page"},{"location":"man/nlp/","page":"Natural Language Processing","title":"Natural Language Processing","text":"Using this function, we apply it to the above similarity matrix (sim_mat) and extract the PageRank scores for all verses. This score will serve as the weights, and so the higher the score the higher the change that this verse have a lot of connections to other verses in the corpus, which means it represents per se the corpus.","category":"page"},{"location":"man/nlp/","page":"Natural Language Processing","title":"Natural Language Processing","text":"p = pagerank(sim_mat)","category":"page"},{"location":"man/nlp/","page":"Natural Language Processing","title":"Natural Language Processing","text":"Now we sort these scores in descending order and use it to rearrange the original verses:","category":"page"},{"location":"man/nlp/","page":"Natural Language Processing","title":"Natural Language Processing","text":"idx = sortperm(vec(p), rev=true)[1:10]","category":"page"},{"location":"man/nlp/","page":"Natural Language Processing","title":"Natural Language Processing","text":"Therefore, the Quranic Arabic corpus can be summarized by the following 10 verses using TextRank:","category":"page"},{"location":"man/nlp/","page":"Natural Language Processing","title":"Natural Language Processing","text":"verse_nos = verses(CorpusData(crpstbl), number=true, start_end=false)\n\nverse_out = String[];\nchapter = Int64[];\nverse = Int64[];\nfor v in verse_nos\n    verse_out = vcat(verse_out, verses(crpsdata[v[1]][v[2]]))\n    chapter = vcat(chapter, repeat(v[1], inner=length(v[2])))\n    verse = vcat(verse, v[2])\nend\n\ntable((\n    chapter=chapter[idx], \n    verse=verse[idx], \n    verse_text=arabic.(verse_out[idx])\n))","category":"page"},{"location":"man/nlp/","page":"Natural Language Processing","title":"Natural Language Processing","text":"The following are the translations of the above verses:","category":"page"},{"location":"man/nlp/","page":"Natural Language Processing","title":"Natural Language Processing","text":"<table>\n    <thead><td>Chapter</td><td>Verse</td><td>Enlish Translation</td></thead>\n    <tbody>\n    <tr><td>101</td><td>10</td><td>And what will make you realize what that is?</td></tr>\n    <tr><td>37</td><td>13</td><td>When they are reminded, they are never mindful.</td></tr>\n    <tr><td>109</td><td>2</td><td>I do not worship what you worship,</td></tr>\n    <tr><td>83</td><td>17</td><td>and then be told, “This is what you used to deny.”</td></tr>\n    <tr><td>16</td><td>24</td><td>And when it is said to them, “What has your Lord revealed?” They say, “Ancient fables!”</td></tr>\n    <tr><td>96</td><td>10</td><td>a servant ˹of Ours˺ from praying?</td></tr>\n    <tr><td>37</td><td>85</td><td>and said to his father and his people, “What are you worshipping?</td></tr>\n    <tr><td>83</td><td>32</td><td>And when they saw the faithful, they would say, “These ˹people˺ are truly astray,”</td></tr>\n    <tr><td>26</td><td>117</td><td>Noah prayed, “My Lord! My people have truly rejected me.</td></tr>\n    <tr><td>99</td><td>3</td><td>and humanity cries, “What is wrong with it?”—</td></tr>\n    </tbody>\n</table>","category":"page"},{"location":"man/nlp/#Topic-Modeling","page":"Natural Language Processing","title":"Topic Modeling","text":"","category":"section"},{"location":"man/nlp/","page":"Natural Language Processing","title":"Natural Language Processing","text":"In this section, we are going to extract the topics for Chapters 2 to Chapters 12. To do this, Latent Dirichlet Allocation (LDA) is used to model the topics. Let's start with fresh data:","category":"page"},{"location":"man/nlp/","page":"Natural Language Processing","title":"Natural Language Processing","text":"using QuranTree\nusing TextAnalysis\ncrps, tnzl = QuranData() |> load;\ncrpsdata = table(crps)","category":"page"},{"location":"man/nlp/#Data-Preprocessing-2","page":"Natural Language Processing","title":"Data Preprocessing","text":"","category":"section"},{"location":"man/nlp/","page":"Natural Language Processing","title":"Natural Language Processing","text":"We clean the data by removing the following:","category":"page"},{"location":"man/nlp/","page":"Natural Language Processing","title":"Natural Language Processing","text":"Disconnected Letters\n","category":"page"},{"location":"man/nlp/","page":"Natural Language Processing","title":"Natural Language Processing","text":"This is done as follows:","category":"page"},{"location":"man/nlp/","page":"Natural Language Processing","title":"Natural Language Processing","text":"\nfunction preprocess(s::String)\n    feat = parse(Features, s)\n    disletters = isfeature(feat, AbstractDisLetters)\n    prepositions = isfeature(feat, Stem) && isfeature(feat, Preposition)\n    conjunctions = isfeature(feat, AbstractConjunction)\n    pronouns = isfeature(feat, AbstractPronoun)\n\n    return !disletters && !prepositions && !conjunctions && !pronouns\nend\n\ncrpstbl = filter(t -> !isfeature(parse(Features, t.features), DisconnectedLetters), crpsdata.data)","category":"page"},{"location":"man/nlp/","page":"Natural Language Processing","title":"Natural Language Processing","text":"Next, we need to create a copy of the above data so we have the original state, and use the copy to do further data processing.","category":"page"},{"location":"man/nlp/","page":"Natural Language Processing","title":"Natural Language Processing","text":"crpsnew = deepcopy(crpstbl)\nfeats = select(crpsnew, :features)\nfeats = parse.(Features, feats)\n\ncrps2 = Corpus(NGramDocument.(ngrams.(StringDocument.(vrs), 2)))\nupdate_lexicon!(crps2)\nupdate_inverse_index!(crps2)\nm2 = DocumentTermMatrix(crps2)\nk = 10      # number of topics\niter = 1000 # number of gibbs sampling iterations\nalpha = 0.1 # hyperparameter\nbeta = 0.1  # hyperparameter\nϕ, θ = lda(m2, k, iter, alpha, beta)","category":"page"},{"location":"man/nlp/","page":"Natural Language Processing","title":"Natural Language Processing","text":"Extract the topic for first cluster:","category":"page"},{"location":"man/nlp/","page":"Natural Language Processing","title":"Natural Language Processing","text":"ntopics = 10\ncluster_topics = Matrix(undef, ntopics, k)\nfor i = 1:k\n    topics_idcs = sortperm(ϕ[i, :], rev=true)\n    cluster_topics[:, i] = arabic.(m2.terms[topics_idcs][1:ntopics])\nend","category":"page"},{"location":"#QuranTree.jl-Documentation","page":"Home","title":"QuranTree.jl Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = QuranTree\nDocTestSetup = quote\n    using QuranTree\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"A Julia package for working with the Quran (Islam's Holy Book), computationally. QuranTree.jl is based on The Quranic Arabic Corpus by Kais Dukes of University of Leeds, and is aimed at offerring a high-level API alternative to the Java package, JQuranTree. ","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The following are the features of the package:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Indexing\nIntuitive indexing for Chapters, Verses, Words and Parts\nTransliteration\nBuckwalter as default\nFunctionality for creating custom transliterator\nUpdate transliteration in 1 line of code\nComplete type for all Morphological Features and Part of Speech\nSeemless transition between Arabic and Buckwalter (or custom transliteration)\nSimple Encoding (refer here)\nCharacter Normalization\nFor both Arabic and Buckwalter (or custom transliteration)\nCharacter Dediacritization\nFor both Arabic and Buckwalter (or custom transliteration)\nUtilities\nFunction for detailed description of the Morphological Features.\nModularity and Type-Safe\nCan easily integrate with other Julia packages, thanks to Julia's Multiple Dispatch.\nCan easily integrate with Python (using PyCall.jl) and R (Using RCall.jl) for packages that are not yet in Julia.\nLike JQuranTree, QuranTree.jl is type-safe.\nOthers\nSupports Tanzil data\nRead-only array for raw datasets (Corpus and Tanzil)","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The library will soon be added to the Julia Package Registry, still finishing up the documentation. For now, QuranTree.jl can be installed as follows:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg\njulia> Pkg.add(\"https://github.com/alstat/QuranTree.jl\")","category":"page"},{"location":"#Requirements","page":"Home","title":"Requirements","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Julia >= 1.0\nJuliaDB.jl >= 0.13.0\nPrettyTables.jl >= 0.10.1","category":"page"},{"location":"man/api/#API-References","page":"API","title":"API References","text":"","category":"section"},{"location":"man/api/","page":"API","title":"API","text":"Modules = [QuranTree]","category":"page"},{"location":"man/api/#QuranTree.Features","page":"API","title":"QuranTree.Features","text":"Features(data::String)\n\nConvert a string to morphological feature object.\n\n\n\n\n\n","category":"type"},{"location":"man/api/#QuranTree.Lemma","page":"API","title":"QuranTree.Lemma","text":"Lemma(data::String)\n\nConvert a string to a Lemma object.\n\n\n\n\n\n","category":"type"},{"location":"man/api/#QuranTree.Prefix","page":"API","title":"QuranTree.Prefix","text":"Prefix(data::Symbol, pos::AbstractPartOfSpeech)\n\nCreate a new Prefix object with data as the symbol of the morphological feature with pos as  the corresponding Part of Speech.\n\n\n\n\n\n","category":"type"},{"location":"man/api/#QuranTree.Root","page":"API","title":"QuranTree.Root","text":"Root(data::String)\n\nConvert a string to a Root object.\n\n\n\n\n\n","category":"type"},{"location":"man/api/#QuranTree.Special","page":"API","title":"QuranTree.Special","text":"Special(data::String)\n\nConvert a string to a Special object.\n\n\n\n\n\n","category":"type"},{"location":"man/api/#QuranTree.Stem","page":"API","title":"QuranTree.Stem","text":"Stem(data::Symbol, pos::AbstractPartOfSpeech)\n\nCreate a new Stem object with data as the symbol of the morphological feature with pos as  the corresponding Part of Speech.\n\n\n\n\n\n","category":"type"},{"location":"man/api/#QuranTree.Suffix","page":"API","title":"QuranTree.Suffix","text":"Suffix(data::Symbol, pos::AbstractPartOfSpeech)\n\nCreate a new Suffix object with data as the symbol of the morphological feature with pos as  the corresponding Part of Speech.\n\n\n\n\n\n","category":"type"},{"location":"man/api/#Base.parse-Tuple{Type{Features},AbstractString}","page":"API","title":"Base.parse","text":"parse(::Type{Features}, f::AbstractString)\n\nExtract the features of a morphological Feature object.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#Dagger.load-Tuple{QuranData}","page":"API","title":"Dagger.load","text":"load(data::QuranData)\n\nLoad the raw QuranData as a ReadOnlyArray for both Quranic Corpus and Tanzil Data.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#IndexedTables.table-Tuple{CorpusRaw}","page":"API","title":"IndexedTables.table","text":"table(crps::CorpusRaw)\n\nConvert the CorpusRaw read-only array into a tabularized CorpusData using IndexedTable.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#IndexedTables.table-Tuple{TanzilRaw}","page":"API","title":"IndexedTables.table","text":"table(tnzl::TanzilRaw)\n\nConvert the TanzilRaw read-only array into a tabularized TanzilData using IndexedTable.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.arabic-Tuple{String}","page":"API","title":"QuranTree.arabic","text":"arabic(s::String[, encoder::AbstractEncoder])\n\nEncode the String object into Arabic characters. Custom encoder generated from @transliterator can be provided, but default is Buckwalter.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.chapter_name","page":"API","title":"QuranTree.chapter_name","text":"chapter_name(quran::AbstractQuran, transliterate::Bool=false; lang::Symbol=:arabic)\n\nExtract the chapter name of the input quran, in either :arabic (default) or :english\n\n\n\n\n\n","category":"function"},{"location":"man/api/#QuranTree.dediac-Tuple{String}","page":"API","title":"QuranTree.dediac","text":"dediac(s::String)\n\nDediacritize the input String object.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.encode-Tuple{String}","page":"API","title":"QuranTree.encode","text":"encode(s::String)\n\nTransliterate the input String object using Buckwalter.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.encode-Tuple{Type{SimpleEncoder},String}","page":"API","title":"QuranTree.encode","text":"encode(::Type{SimpleEncoder}, s::String)\n\nEncode the input String object as SimpleEncoder.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.encode-Tuple{Union{Char, String},AbstractEncoder}","page":"API","title":"QuranTree.encode","text":"encode(s::Union{Char,String}, encoder::AbstractEncoder)\n\nTransliterate the input String object using a custom encoder. Custom encoder is generated using the @transliterator.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.isfeature-Tuple{AbstractFeature,Type{var\"#s13\"} where var\"#s13\"<:AbstractFeature}","page":"API","title":"QuranTree.isfeature","text":"isfeature(feat::Features, pos::Type{<:AbstractFeature})\n\nCheck if the morphological Feature object is a type of pos.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.lemma-Tuple{AbstractFeature}","page":"API","title":"QuranTree.lemma","text":"lemma(feat::AbstractFeature)\n\nExtract the lemma of the feature.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.normalize-Tuple{String,Array{Symbol,1}}","page":"API","title":"QuranTree.normalize","text":"normalize(s::String, chars::Array{Symbol,1})\n\nNormalize a specific Arabic or Buckwalter String character/s (chars).\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.normalize-Tuple{String,Symbol}","page":"API","title":"QuranTree.normalize","text":"normalize(s::String, char::Symbol)\n\nNormalize a specific Arabic or Buckwalter String character (chars).\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.normalize-Tuple{String}","page":"API","title":"QuranTree.normalize","text":"normalize(s::String)\n\nNormalize a Arabic or Buckwalter String characters.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.root-Tuple{AbstractFeature}","page":"API","title":"QuranTree.root","text":"root(feat::AbstractFeature)\n\nExtract the root of the feature.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.special-Tuple{AbstractFeature}","page":"API","title":"QuranTree.special","text":"lemma(feat::AbstractFeature)\n\nExtract the special feature of the token.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.verses-Tuple{AbstractQuran}","page":"API","title":"QuranTree.verses","text":"verses(quran::AbstractQuran; number=false, start_end=true)\n\nExtract the verses of a AbstractQuran object.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.verses-Tuple{IndexedTables.IndexedTable,Int64,Int64}","page":"API","title":"QuranTree.verses","text":"verses(data::IndexedTable[, a::Int64[, b::Int64]]; number=false, start_end=true)\n\nExtract the verses of a IndexedTable object from row a to row b.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.verses-Tuple{TanzilData}","page":"API","title":"QuranTree.verses","text":"verses(quran::TanzilData)\n\nExtract the verses of a TanzilData object.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.words-Tuple{AbstractQuran}","page":"API","title":"QuranTree.words","text":"words(quran::AbstractQuran)\n\nExtract words of the input quran.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#QuranTree.@data-Tuple{Any}","page":"API","title":"QuranTree.@data","text":"@data(expr)\n\nExtract the data property object.\n\n\n\n\n\n","category":"macro"},{"location":"man/api/#QuranTree.@desc-Tuple{Any}","page":"API","title":"QuranTree.@desc","text":"@desc(expr)\n\nExtract the detailed description of a AbstractFeature.\n\n\n\n\n\n","category":"macro"},{"location":"man/api/#QuranTree.@transliterator-Tuple{Any,Any}","page":"API","title":"QuranTree.@transliterator","text":"@transliterator(dict, name)\n\nCreate a custom transliterator using an input dict (Dict object) with its corresponding name as String object. This will automatically update the transliterator inside all  functions like arabic, verses, and encode.\n\n\n\n\n\n","category":"macro"},{"location":"man/api/#QuranTree.@transliterator-Tuple{Any}","page":"API","title":"QuranTree.@transliterator","text":"@transliterator(dict)\n\nFallback to the default Buckwalter transliterator.\n\n\n\n\n\n","category":"macro"}]
}
